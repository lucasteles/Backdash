{
  "api/Backdash.ConnectionInterruptedEventInfo.html": {
    "href": "api/Backdash.ConnectionInterruptedEventInfo.html",
    "title": "Struct ConnectionInterruptedEventInfo | Backdash Netcode",
    "summary": "Struct ConnectionInterruptedEventInfo Namespace Backdash Assembly Backdash.dll Data for ConnectionInterrupted event. public readonly struct ConnectionInterruptedEventInfo : IEquatable<ConnectionInterruptedEventInfo> Implements IEquatable<ConnectionInterruptedEventInfo> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ConnectionInterruptedEventInfo(TimeSpan) Data for ConnectionInterrupted event. public ConnectionInterruptedEventInfo(TimeSpan DisconnectTimeout) Parameters DisconnectTimeout TimeSpan Time to disconnect. Properties DisconnectTimeout Time to disconnect. public TimeSpan DisconnectTimeout { get; init; } Property Value TimeSpan Methods Deconstruct(out TimeSpan) public void Deconstruct(out TimeSpan DisconnectTimeout) Parameters DisconnectTimeout TimeSpan Equals(ConnectionInterruptedEventInfo) public bool Equals(ConnectionInterruptedEventInfo other) Parameters other ConnectionInterruptedEventInfo Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(ConnectionInterruptedEventInfo, ConnectionInterruptedEventInfo) public static bool operator ==(ConnectionInterruptedEventInfo left, ConnectionInterruptedEventInfo right) Parameters left ConnectionInterruptedEventInfo right ConnectionInterruptedEventInfo Returns bool operator !=(ConnectionInterruptedEventInfo, ConnectionInterruptedEventInfo) public static bool operator !=(ConnectionInterruptedEventInfo left, ConnectionInterruptedEventInfo right) Parameters left ConnectionInterruptedEventInfo right ConnectionInterruptedEventInfo Returns bool"
  },
  "api/Backdash.Core.ConsoleTextLogWriter.html": {
    "href": "api/Backdash.Core.ConsoleTextLogWriter.html",
    "title": "Class ConsoleTextLogWriter | Backdash Netcode",
    "summary": "Class ConsoleTextLogWriter Namespace Backdash.Core Assembly Backdash.dll Implementation of ILogWriter for logging into Console. public sealed class ConsoleTextLogWriter : TextLogWriter, ILogWriter, IDisposable Inheritance object TextLogWriter ConsoleTextLogWriter Implements ILogWriter IDisposable Inherited Members TextLogWriter.Write(LogLevel, char[], int) TextLogWriter.Dispose() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ConsoleTextLogWriter() public ConsoleTextLogWriter() Properties TextWriter Current TextWriter protected override TextWriter TextWriter { get; } Property Value TextWriter"
  },
  "api/Backdash.Core.FileTextLogWriter.html": {
    "href": "api/Backdash.Core.FileTextLogWriter.html",
    "title": "Class FileTextLogWriter | Backdash Netcode",
    "summary": "Class FileTextLogWriter Namespace Backdash.Core Assembly Backdash.dll Implementation of ILogWriter for logging into a file. public sealed class FileTextLogWriter : TextLogWriter, ILogWriter, IDisposable Inheritance object TextLogWriter FileTextLogWriter Implements ILogWriter IDisposable Inherited Members TextLogWriter.Write(LogLevel, char[], int) TextLogWriter.Dispose() object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors FileTextLogWriter(string?, bool) Initializes a new instance of the FileTextLogWriter class. public FileTextLogWriter(string? fileName = null, bool append = true) Parameters fileName string Log file name you can use placeholders for: - ProcessId: \"{{proc_id}}\"; - UtcNow: \"{{timestamp}}\"; Defaults to \"{{proc_id}}_{{timestamp}}.log\" append bool true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file. Properties TextWriter Current TextWriter protected override TextWriter TextWriter { get; } Property Value TextWriter Methods GetLogFileWriter(string?, bool) Return a log file stream writer public static StreamWriter GetLogFileWriter(string? fileName = null, bool append = true) Parameters fileName string append bool Returns StreamWriter"
  },
  "api/Backdash.Core.ILogWriter.html": {
    "href": "api/Backdash.Core.ILogWriter.html",
    "title": "Interface ILogWriter | Backdash Netcode",
    "summary": "Interface ILogWriter Namespace Backdash.Core Assembly Backdash.dll Defines how and where the log's should be written. public interface ILogWriter : IDisposable Inherited Members IDisposable.Dispose() Methods Write(LogLevel, char[], int) Write chars into an output. void Write(LogLevel level, char[] chars, int size) Parameters level LogLevel Current LogLevel level. chars char[] Char buffer array containing the log message size int Number of chars of characters to read from chars"
  },
  "api/Backdash.Core.INetcodeJob.html": {
    "href": "api/Backdash.Core.INetcodeJob.html",
    "title": "Interface INetcodeJob | Backdash Netcode",
    "summary": "Interface INetcodeJob Namespace Backdash.Core Assembly Backdash.dll Defines an asynchronous background job public interface INetcodeJob Properties JobName Job name identity string? JobName { get; } Property Value string Methods Start(CancellationToken) Job task Task Start(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task"
  },
  "api/Backdash.Core.InvalidTypeArgumentException-1.html": {
    "href": "api/Backdash.Core.InvalidTypeArgumentException-1.html",
    "title": "Class InvalidTypeArgumentException<T> | Backdash Netcode",
    "summary": "Class InvalidTypeArgumentException<T> Namespace Backdash.Core Assembly Backdash.dll An exception that is thrown when for invalid type argument T. public sealed class InvalidTypeArgumentException<T> : InvalidTypeArgumentException, ISerializable Type Parameters T Generic type argument Inheritance object Exception NetcodeException InvalidTypeArgumentException InvalidTypeArgumentException<T> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.Core.InvalidTypeArgumentException.html": {
    "href": "api/Backdash.Core.InvalidTypeArgumentException.html",
    "title": "Class InvalidTypeArgumentException | Backdash Netcode",
    "summary": "Class InvalidTypeArgumentException Namespace Backdash.Core Assembly Backdash.dll An exception that is thrown for invalid type arguments. public class InvalidTypeArgumentException : NetcodeException, ISerializable Inheritance object Exception NetcodeException InvalidTypeArgumentException Implements ISerializable Derived InvalidTypeArgumentException<T> Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.Core.LogLevel.html": {
    "href": "api/Backdash.Core.LogLevel.html",
    "title": "Enum LogLevel | Backdash Netcode",
    "summary": "Enum LogLevel Namespace Backdash.Core Assembly Backdash.dll Defines logging severity levels. public enum LogLevel : byte Fields Debug = 1 Logs that are used for interactive investigation during development. Error = 4 Logs that highlight when the current flow of execution is stopped due to a failure Information = 2 Logs that track the general flow of the application. None = 255 Specifies that a logging category should not write any messages. Trace = 0 Logs that contain the most detailed messages. Warning = 3 Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop."
  },
  "api/Backdash.Core.NetcodeAssertionException.html": {
    "href": "api/Backdash.Core.NetcodeAssertionException.html",
    "title": "Class NetcodeAssertionException | Backdash Netcode",
    "summary": "Class NetcodeAssertionException Namespace Backdash.Core Assembly Backdash.dll An exception that is thrown when an error is encountered on netcode deserialization. public class NetcodeAssertionException : NetcodeException, ISerializable Inheritance object Exception NetcodeException NetcodeAssertionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.Core.NetcodeDeserializationException.html": {
    "href": "api/Backdash.Core.NetcodeDeserializationException.html",
    "title": "Class NetcodeDeserializationException | Backdash Netcode",
    "summary": "Class NetcodeDeserializationException Namespace Backdash.Core Assembly Backdash.dll An exception that is thrown when an error is encountered on netcode deserialization. public class NetcodeDeserializationException : NetcodeException, ISerializable Inheritance object Exception NetcodeException NetcodeDeserializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.Core.NetcodeException.html": {
    "href": "api/Backdash.Core.NetcodeException.html",
    "title": "Class NetcodeException | Backdash Netcode",
    "summary": "Class NetcodeException Namespace Backdash.Core Assembly Backdash.dll An exception that is thrown when an error is encountered on netcode. public class NetcodeException : Exception, ISerializable Inheritance object Exception NetcodeException Implements ISerializable Derived InvalidTypeArgumentException NetcodeAssertionException NetcodeDeserializationException NetcodeSerializationException Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.Core.NetcodeSerializationException-1.html": {
    "href": "api/Backdash.Core.NetcodeSerializationException-1.html",
    "title": "Class NetcodeSerializationException<T> | Backdash Netcode",
    "summary": "Class NetcodeSerializationException<T> Namespace Backdash.Core Assembly Backdash.dll An exception that is thrown when an error is encountered on netcode serialization for type T. public class NetcodeSerializationException<T> : NetcodeSerializationException, ISerializable Type Parameters T Serialization type Inheritance object Exception NetcodeException NetcodeSerializationException NetcodeSerializationException<T> Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.Core.NetcodeSerializationException.html": {
    "href": "api/Backdash.Core.NetcodeSerializationException.html",
    "title": "Class NetcodeSerializationException | Backdash Netcode",
    "summary": "Class NetcodeSerializationException Namespace Backdash.Core Assembly Backdash.dll An exception that is thrown when an error is encountered on netcode serialization. public class NetcodeSerializationException : NetcodeException, ISerializable Inheritance object Exception NetcodeException NetcodeSerializationException Implements ISerializable Derived NetcodeSerializationException<T> Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.Core.TextLogWriter.html": {
    "href": "api/Backdash.Core.TextLogWriter.html",
    "title": "Class TextLogWriter | Backdash Netcode",
    "summary": "Class TextLogWriter Namespace Backdash.Core Assembly Backdash.dll Base implementation of ILogWriter for any TextWriter. public abstract class TextLogWriter : ILogWriter, IDisposable Inheritance object TextLogWriter Implements ILogWriter IDisposable Derived ConsoleTextLogWriter FileTextLogWriter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TextLogWriter() protected TextLogWriter() Properties TextWriter Current TextWriter protected abstract TextWriter TextWriter { get; } Property Value TextWriter Methods Dispose() public void Dispose() Dispose(bool) Releases all resources currently used by this TextLogWriter instance. protected virtual void Dispose(bool disposing) Parameters disposing bool true if this method is being invoked by the Dispose() method, otherwise false. Write(LogLevel, char[], int) Write chars into an output. public void Write(LogLevel level, char[] chars, int size) Parameters level LogLevel Current LogLevel level. chars char[] Char buffer array containing the log message size int Number of chars of characters to read from chars"
  },
  "api/Backdash.Core.html": {
    "href": "api/Backdash.Core.html",
    "title": "Namespace Backdash.Core | Backdash Netcode",
    "summary": "Namespace Backdash.Core Classes ConsoleTextLogWriter Implementation of ILogWriter for logging into Console. FileTextLogWriter Implementation of ILogWriter for logging into a file. InvalidTypeArgumentException An exception that is thrown for invalid type arguments. InvalidTypeArgumentException<T> An exception that is thrown when for invalid type argument T. NetcodeAssertionException An exception that is thrown when an error is encountered on netcode deserialization. NetcodeDeserializationException An exception that is thrown when an error is encountered on netcode deserialization. NetcodeException An exception that is thrown when an error is encountered on netcode. NetcodeSerializationException An exception that is thrown when an error is encountered on netcode serialization. NetcodeSerializationException<T> An exception that is thrown when an error is encountered on netcode serialization for type T. TextLogWriter Base implementation of ILogWriter for any TextWriter. Interfaces ILogWriter Defines how and where the log's should be written. INetcodeJob Defines an asynchronous background job Enums LogLevel Defines logging severity levels."
  },
  "api/Backdash.Data.ByteSize.Measure.html": {
    "href": "api/Backdash.Data.ByteSize.Measure.html",
    "title": "Enum ByteSize.Measure | Backdash Netcode",
    "summary": "Enum ByteSize.Measure Namespace Backdash.Data Assembly Backdash.dll Unit of measure for ByteSize public enum ByteSize.Measure : sbyte Fields Byte = 0 Byte GibiByte = 3 1GiB == 1_073_741_824 bytes GigaByte = 7 1GB == 1_000_000_000 bytes KibiByte = 1 1KiB == 1024 bytes KiloByte = 5 1KB == 1000 bytes MebiByte = 2 1MiB == 1_048_576 bytes MegaByte = 6 1MB == 1_000_000 bytes TebiByte = 4 1TiB == 1_099_511_627_776 bytes TeraByte = 8 1TB == 1_000_000_000_000 bytes Unknown = -1 Unknown unit of measure"
  },
  "api/Backdash.Data.ByteSize.html": {
    "href": "api/Backdash.Data.ByteSize.html",
    "title": "Struct ByteSize | Backdash Netcode",
    "summary": "Struct ByteSize Namespace Backdash.Data Assembly Backdash.dll Represents a byte size value public readonly struct ByteSize : IComparable<ByteSize>, IFormattable, IUtf8SpanFormattable, IComparisonOperators<ByteSize, ByteSize, bool>, IEqualityOperators<ByteSize, ByteSize, bool>, IAdditionOperators<ByteSize, ByteSize, ByteSize>, ISubtractionOperators<ByteSize, ByteSize, ByteSize>, IDivisionOperators<ByteSize, long, ByteSize>, IDivisionOperators<ByteSize, double, ByteSize>, IMultiplyOperators<ByteSize, long, ByteSize>, IIncrementOperators<ByteSize>, IDecrementOperators<ByteSize>, IEquatable<ByteSize> Implements IComparable<ByteSize> IFormattable IUtf8SpanFormattable IComparisonOperators<ByteSize, ByteSize, bool> IEqualityOperators<ByteSize, ByteSize, bool> IAdditionOperators<ByteSize, ByteSize, ByteSize> ISubtractionOperators<ByteSize, ByteSize, ByteSize> IDivisionOperators<ByteSize, long, ByteSize> IDivisionOperators<ByteSize, double, ByteSize> IMultiplyOperators<ByteSize, long, ByteSize> IIncrementOperators<ByteSize> IDecrementOperators<ByteSize> IEquatable<ByteSize> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ByteSize(long) Represents a byte size value public ByteSize(long ByteCount) Parameters ByteCount long Properties ByteCount public long ByteCount { get; init; } Property Value long GibiBytes Gets the number of GibiBytes represented by this object. public double GibiBytes { get; } Property Value double GigaBytes Gets the number of GigaBytes represented by this object. public double GigaBytes { get; } Property Value double KibiBytes Gets the number of KibiBytes represented by this object. public double KibiBytes { get; } Property Value double KiloBytes Gets the number of KiloBytes represented by this object. public double KiloBytes { get; } Property Value double MebiBytes Gets the number of MebiBytes represented by this object. public double MebiBytes { get; } Property Value double MegaBytes Gets the number of MegaBytes represented by this object. public double MegaBytes { get; } Property Value double One Gets the byte value 1. public static ByteSize One { get; } Property Value ByteSize TebiBytes Gets the number of TebiBytes represented by this object. public double TebiBytes { get; } Property Value double TeraBytes Gets the number of TeraBytes represented by this object. public double TeraBytes { get; } Property Value double Zero Gets the byte value 0. public static ByteSize Zero { get; } Property Value ByteSize Methods ByteCountOfBits(in ushort) Returns number of bits for byteCount bytes. public static int ByteCountOfBits(in ushort byteCount) Parameters byteCount ushort Returns int CompareTo(ByteSize) public int CompareTo(ByteSize other) Parameters other ByteSize Returns int Deconstruct(out long) public void Deconstruct(out long ByteCount) Parameters ByteCount long Equals(ByteSize) public bool Equals(ByteSize other) Parameters other ByteSize Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool FromBytes(long) Returns new ByteSize with value bytes public static ByteSize FromBytes(long value) Parameters value long Number of bytes Returns ByteSize FromGibiBytes(double) Returns new ByteSize with value gibi-bytes public static ByteSize FromGibiBytes(double value) Parameters value double Number of gibi-bytes Returns ByteSize FromGigaBytes(double) Returns new ByteSize with value giga-bytes public static ByteSize FromGigaBytes(double value) Parameters value double Number of giga-bytes Returns ByteSize FromKibiBytes(double) Returns new ByteSize with value kibi-bytes public static ByteSize FromKibiBytes(double value) Parameters value double Number of kibi-bytes Returns ByteSize FromKiloByte(double) Returns new ByteSize with value kilo-bytes public static ByteSize FromKiloByte(double value) Parameters value double Number of kilo-bytes Returns ByteSize FromMebiBytes(double) Returns new ByteSize with value mebi-bytes public static ByteSize FromMebiBytes(double value) Parameters value double Number of mebi-bytes Returns ByteSize FromMegaBytes(double) Returns new ByteSize with value mega-bytes public static ByteSize FromMegaBytes(double value) Parameters value double Number of mega-bytes Returns ByteSize FromTebiBytes(double) Returns new ByteSize with value gibi-bytes public static ByteSize FromTebiBytes(double value) Parameters value double Number of tebi-bytes Returns ByteSize FromTeraBytes(double) Returns new ByteSize with value tera-bytes public static ByteSize FromTeraBytes(double value) Parameters value double Number of tera-bytes Returns ByteSize GetHashCode() public override int GetHashCode() Returns int ToString() Returns the string representation for the current byte size public override string ToString() Returns string ToString(Measure) Returns the string representation for the current byte size as measure public string ToString(ByteSize.Measure measure) Parameters measure ByteSize.Measure Returns string ToString(string?) public string ToString(string? format) Parameters format string Returns string ToString(string?, IFormatProvider?) public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string formatProvider IFormatProvider Returns string TryFormat(Span<byte>, out int, ReadOnlySpan<char>, IFormatProvider?) public bool TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider) Parameters utf8Destination Span<byte> bytesWritten int format ReadOnlySpan<char> provider IFormatProvider Returns bool Operators explicit operator ByteSize(byte) Returns new ByteSize with value bytes public static explicit operator ByteSize(byte value) Parameters value byte Returns ByteSize explicit operator ByteSize(short) Returns new ByteSize with value bytes public static explicit operator ByteSize(short value) Parameters value short Returns ByteSize explicit operator ByteSize(int) Returns new ByteSize with value bytes public static explicit operator ByteSize(int value) Parameters value int Returns ByteSize explicit operator ByteSize(long) Returns new ByteSize with value bytes public static explicit operator ByteSize(long value) Parameters value long Returns ByteSize explicit operator ByteSize(sbyte) Returns new ByteSize with value bytes public static explicit operator ByteSize(sbyte value) Parameters value sbyte Returns ByteSize explicit operator ByteSize(ushort) Returns new ByteSize with value bytes public static explicit operator ByteSize(ushort value) Parameters value ushort Returns ByteSize explicit operator ByteSize(uint) Returns new ByteSize with value bytes public static explicit operator ByteSize(uint value) Parameters value uint Returns ByteSize operator *(long, ByteSize) public static ByteSize operator *(long left, ByteSize right) Parameters left long right ByteSize Returns ByteSize Explicit Interface Implementations operator +(ByteSize, ByteSize) static ByteSize operator +(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns ByteSize operator --(ByteSize) static ByteSize operator --(ByteSize value) Parameters value ByteSize Returns ByteSize operator /(ByteSize, double) static ByteSize operator /(ByteSize left, double right) Parameters left ByteSize right double Returns ByteSize operator /(ByteSize, long) static ByteSize operator /(ByteSize left, long right) Parameters left ByteSize right long Returns ByteSize operator ==(ByteSize, ByteSize) static bool operator ==(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns bool operator >(ByteSize, ByteSize) static bool operator >(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns bool operator >=(ByteSize, ByteSize) static bool operator >=(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns bool operator ++(ByteSize) static ByteSize operator ++(ByteSize value) Parameters value ByteSize Returns ByteSize operator !=(ByteSize, ByteSize) static bool operator !=(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns bool operator <(ByteSize, ByteSize) static bool operator <(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns bool operator <=(ByteSize, ByteSize) static bool operator <=(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns bool operator *(ByteSize, long) static ByteSize operator *(ByteSize left, long right) Parameters left ByteSize right long Returns ByteSize operator -(ByteSize, ByteSize) static ByteSize operator -(ByteSize left, ByteSize right) Parameters left ByteSize right ByteSize Returns ByteSize"
  },
  "api/Backdash.Data.CircularBuffer-1.Enumerator.html": {
    "href": "api/Backdash.Data.CircularBuffer-1.Enumerator.html",
    "title": "Struct CircularBuffer<T>.Enumerator | Backdash Netcode",
    "summary": "Struct CircularBuffer<T>.Enumerator Namespace Backdash.Data Assembly Backdash.dll public struct CircularBuffer<T>.Enumerator : IEnumerator<T>, IEnumerator, IDisposable Implements IEnumerator<T> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Properties Current public readonly T Current { get; } Property Value T Methods Dispose() public readonly void Dispose() MoveNext() public bool MoveNext() Returns bool"
  },
  "api/Backdash.Data.CircularBuffer-1.html": {
    "href": "api/Backdash.Data.CircularBuffer-1.html",
    "title": "Class CircularBuffer<T> | Backdash Netcode",
    "summary": "Class CircularBuffer<T> Namespace Backdash.Data Assembly Backdash.dll A collection data structure that uses a single fixed-size buffer as if it were connected end-to-end. public sealed class CircularBuffer<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IEquatable<CircularBuffer<T>> Type Parameters T Inheritance object CircularBuffer<T> Implements IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<CircularBuffer<T>> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors CircularBuffer(int) A collection data structure that uses a single fixed-size buffer as if it were connected end-to-end. public CircularBuffer(int capacity) Parameters capacity int Properties Capacity public int Capacity { get; } Property Value int CurrentIndex public int CurrentIndex { get; } Property Value int IsEmpty public bool IsEmpty { get; } Property Value bool IsFull public bool IsFull { get; } Property Value bool this[Index] public ref T this[Index index] { get; } Parameters index Index Property Value T this[int] public ref T this[int index] { get; } Parameters index int Property Value T LastIndex public int LastIndex { get; } Property Value int Size public int Size { get; } Property Value int Methods Add(in T) public void Add(in T item) Parameters item T AddRange(ReadOnlySpan<T>) public void AddRange(ReadOnlySpan<T> values) Parameters values ReadOnlySpan<T> Advance(int) public void Advance(int offset = 1) Parameters offset int At(int) public ref T At(int index) Parameters index int Returns T Back() public ref T Back() Returns T Clear(bool) public void Clear(bool clearArray = false) Parameters clearArray bool CopyFrom(ReadOnlySpan<T>) public void CopyFrom(ReadOnlySpan<T> values) Parameters values ReadOnlySpan<T> CopyTo(Span<T>) public void CopyTo(Span<T> destination) Parameters destination Span<T> Discard(int) public void Discard(int offset = 1) Parameters offset int Drop() public T Drop() Returns T Equals(CircularBuffer<T>?) public bool Equals(CircularBuffer<T>? other) Parameters other CircularBuffer<T> Returns bool Equals(CircularBuffer<T>?, EqualityComparer<T>) public bool Equals(CircularBuffer<T>? other, EqualityComparer<T> comparer) Parameters other CircularBuffer<T> comparer EqualityComparer<T> Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Fill(T) public void Fill(T value) Parameters value T FillWith(Func<T>) public void FillWith(Func<T> valueFn) Parameters valueFn Func<T> Front() public ref T Front() Returns T GetEnumerator() public CircularBuffer<T>.Enumerator GetEnumerator() Returns CircularBuffer<T>.Enumerator GetHashCode() public override int GetHashCode() Returns int GetResetSpan(int, bool) public Span<T> GetResetSpan(int size, bool clearArray = false) Parameters size int clearArray bool Returns Span<T> GetSpan(out ReadOnlySpan<T>, out ReadOnlySpan<T>) public int GetSpan(out ReadOnlySpan<T> begin, out ReadOnlySpan<T> end) Parameters begin ReadOnlySpan<T> end ReadOnlySpan<T> Returns int Next() public ref T Next() Returns T ToArray() public T[] ToArray() Returns T[] ToString() public override string ToString() Returns string TryDrop(out T?) public bool TryDrop(out T? item) Parameters item T Returns bool Operators operator ==(in CircularBuffer<T>, in CircularBuffer<T>) public static bool operator ==(in CircularBuffer<T> a, in CircularBuffer<T> b) Parameters a CircularBuffer<T> b CircularBuffer<T> Returns bool operator !=(CircularBuffer<T>, CircularBuffer<T>) public static bool operator !=(CircularBuffer<T> a, CircularBuffer<T> b) Parameters a CircularBuffer<T> b CircularBuffer<T> Returns bool"
  },
  "api/Backdash.Data.DefaultObjectPool-1.html": {
    "href": "api/Backdash.Data.DefaultObjectPool-1.html",
    "title": "Class DefaultObjectPool<T> | Backdash Netcode",
    "summary": "Class DefaultObjectPool<T> Namespace Backdash.Data Assembly Backdash.dll Default object pool for types with empty constructor public sealed class DefaultObjectPool<T> : IObjectPool<T> where T : class, new() Type Parameters T Inheritance object DefaultObjectPool<T> Implements IObjectPool<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DefaultObjectPool(int, IEqualityComparer<T>?) Instantiate new DefaultObjectPool<T> public DefaultObjectPool(int capacity = 100, IEqualityComparer<T>? comparer = null) Parameters capacity int comparer IEqualityComparer<T> Fields Instance Default object pool singleton. public static readonly IObjectPool<T> Instance Field Value IObjectPool<T> MaxCapacity Maximum number of objects allowed in the pool public readonly int MaxCapacity Field Value int Properties Count Number of instances in the object pool public int Count { get; } Property Value int Methods Clear() Clear the object pool public void Clear() Rent() Rent an instance on T from the pool public T Rent() Returns T Return(T) Return value to the pool public void Return(T value) Parameters value T"
  },
  "api/Backdash.Data.IObjectPool-1.html": {
    "href": "api/Backdash.Data.IObjectPool-1.html",
    "title": "Interface IObjectPool<T> | Backdash Netcode",
    "summary": "Interface IObjectPool<T> Namespace Backdash.Data Assembly Backdash.dll Defines an object pooling contract public interface IObjectPool<T> Type Parameters T Methods Rent() Rent an instance on T from the pool T Rent() Returns T Return(T) Return value to the pool void Return(T value) Parameters value T"
  },
  "api/Backdash.Data.html": {
    "href": "api/Backdash.Data.html",
    "title": "Namespace Backdash.Data | Backdash Netcode",
    "summary": "Namespace Backdash.Data Classes CircularBuffer<T> A collection data structure that uses a single fixed-size buffer as if it were connected end-to-end. DefaultObjectPool<T> Default object pool for types with empty constructor Structs ByteSize Represents a byte size value CircularBuffer<T>.Enumerator Interfaces IObjectPool<T> Defines an object pooling contract Enums ByteSize.Measure Unit of measure for ByteSize"
  },
  "api/Backdash.Frame.html": {
    "href": "api/Backdash.Frame.html",
    "title": "Struct Frame | Backdash Netcode",
    "summary": "Struct Frame Namespace Backdash Assembly Backdash.dll Value representation of a Frame public readonly struct Frame : IComparable<Frame>, IComparable<int>, IEquatable<int>, IUtf8SpanFormattable, IFormattable, IComparisonOperators<Frame, Frame, bool>, IEqualityOperators<Frame, Frame, bool>, IAdditionOperators<Frame, Frame, Frame>, ISubtractionOperators<Frame, Frame, Frame>, IIncrementOperators<Frame>, IDecrementOperators<Frame>, IComparisonOperators<Frame, int, bool>, IEqualityOperators<Frame, int, bool>, IModulusOperators<Frame, int, Frame>, IAdditionOperators<Frame, int, Frame>, ISubtractionOperators<Frame, int, Frame>, IAdditionOperators<Frame, FrameSpan, FrameSpan>, IEquatable<Frame> Implements IComparable<Frame> IComparable<int> IEquatable<int> IUtf8SpanFormattable IFormattable IComparisonOperators<Frame, Frame, bool> IEqualityOperators<Frame, Frame, bool> IAdditionOperators<Frame, Frame, Frame> ISubtractionOperators<Frame, Frame, Frame> IIncrementOperators<Frame> IDecrementOperators<Frame> IComparisonOperators<Frame, int, bool> IEqualityOperators<Frame, int, bool> IModulusOperators<Frame, int, Frame> IAdditionOperators<Frame, int, Frame> ISubtractionOperators<Frame, int, Frame> IAdditionOperators<Frame, FrameSpan, FrameSpan> IEquatable<Frame> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors Frame(int) Initialize new Frame for frame number. public Frame(int number) Parameters number int Fields MaxValue Returns max frame value public static readonly Frame MaxValue Field Value Frame Null Return Null frame value public static readonly Frame Null Field Value Frame Number Returns the int value for the current Frame. public readonly int Number Field Value int One Return frame value 1 public static readonly Frame One Field Value Frame Zero Return frame value 0 public static readonly Frame Zero Field Value Frame Properties IsNull Returns true if the current frame is a null frame public bool IsNull { get; } Property Value bool Methods Abs(in Frame) Returns the absolute value of a Frame. public static Frame Abs(in Frame frame) Parameters frame Frame Returns Frame Clamp(in Frame, in Frame, in Frame) Clamps frame value to a range public static Frame Clamp(in Frame frame, in Frame min, in Frame max) Parameters frame Frame min Frame max Frame Returns Frame Clamp(in Frame, int, int) Clamps frame value to a range public static Frame Clamp(in Frame frame, int min, int max) Parameters frame Frame min int max int Returns Frame CompareTo(Frame) public int CompareTo(Frame other) Parameters other Frame Returns int CompareTo(int) public int CompareTo(int other) Parameters other int Returns int Equals(Frame) public bool Equals(Frame other) Parameters other Frame Returns bool Equals(int) public bool Equals(int other) Parameters other int Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int Max(in Frame, in Frame) Returns the larger of two Frame. public static Frame Max(in Frame left, in Frame right) Parameters left Frame right Frame Returns Frame Min(in Frame, in Frame) Returns the smaller of two Frame. public static Frame Min(in Frame left, in Frame right) Parameters left Frame right Frame Returns Frame Next() Returns the next frame for the current Frame value. public Frame Next() Returns Frame Next(int) Returns the next frame after amount public Frame Next(int amount) Parameters amount int Returns Frame Previous() Returns the previous frame for the current Frame value. public Frame Previous() Returns Frame Previous(int) Returns the previous frame after amount public Frame Previous(int amount) Parameters amount int Returns Frame ToString() public override string ToString() Returns string ToString(string?, IFormatProvider?) public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string formatProvider IFormatProvider Returns string TryFormat(Span<byte>, out int, ReadOnlySpan<char>, IFormatProvider?) public bool TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider) Parameters utf8Destination Span<byte> bytesWritten int format ReadOnlySpan<char> provider IFormatProvider Returns bool Operators explicit operator Frame(int) Initialize new Frame for frame number. public static explicit operator Frame(int frame) Parameters frame int Returns Frame implicit operator int(Frame) Returns the int value for the current Frame. public static implicit operator int(Frame frame) Parameters frame Frame Returns int Explicit Interface Implementations operator +(Frame, Frame) static Frame operator +(Frame left, Frame right) Parameters left Frame right Frame Returns Frame operator +(Frame, FrameSpan) static FrameSpan operator +(Frame left, FrameSpan right) Parameters left Frame right FrameSpan Returns FrameSpan operator +(Frame, int) static Frame operator +(Frame a, int b) Parameters a Frame b int Returns Frame operator --(Frame) static Frame operator --(Frame value) Parameters value Frame Returns Frame operator ==(Frame, Frame) static bool operator ==(Frame left, Frame right) Parameters left Frame right Frame Returns bool operator ==(Frame, int) static bool operator ==(Frame left, int right) Parameters left Frame right int Returns bool operator >(Frame, Frame) static bool operator >(Frame left, Frame right) Parameters left Frame right Frame Returns bool operator >(Frame, int) static bool operator >(Frame left, int right) Parameters left Frame right int Returns bool operator >=(Frame, Frame) static bool operator >=(Frame left, Frame right) Parameters left Frame right Frame Returns bool operator >=(Frame, int) static bool operator >=(Frame left, int right) Parameters left Frame right int Returns bool operator ++(Frame) static Frame operator ++(Frame value) Parameters value Frame Returns Frame operator !=(Frame, Frame) static bool operator !=(Frame left, Frame right) Parameters left Frame right Frame Returns bool operator !=(Frame, int) static bool operator !=(Frame left, int right) Parameters left Frame right int Returns bool operator <(Frame, Frame) static bool operator <(Frame left, Frame right) Parameters left Frame right Frame Returns bool operator <(Frame, int) static bool operator <(Frame left, int right) Parameters left Frame right int Returns bool operator <=(Frame, Frame) static bool operator <=(Frame left, Frame right) Parameters left Frame right Frame Returns bool operator <=(Frame, int) static bool operator <=(Frame left, int right) Parameters left Frame right int Returns bool operator %(Frame, int) static Frame operator %(Frame left, int right) Parameters left Frame right int Returns Frame operator -(Frame, Frame) static Frame operator -(Frame left, Frame right) Parameters left Frame right Frame Returns Frame operator -(Frame, int) static Frame operator -(Frame a, int b) Parameters a Frame b int Returns Frame"
  },
  "api/Backdash.FrameSpan.html": {
    "href": "api/Backdash.FrameSpan.html",
    "title": "Struct FrameSpan | Backdash Netcode",
    "summary": "Struct FrameSpan Namespace Backdash Assembly Backdash.dll Value representation of a span of frames Uses the FPS defined in FrameTime.CurrentFrameRate public readonly struct FrameSpan : IComparable<FrameSpan>, IUtf8SpanFormattable, IFormattable, IComparisonOperators<FrameSpan, FrameSpan, bool>, IEqualityOperators<FrameSpan, FrameSpan, bool>, IAdditionOperators<FrameSpan, FrameSpan, FrameSpan>, ISubtractionOperators<FrameSpan, FrameSpan, FrameSpan>, IModulusOperators<FrameSpan, int, FrameSpan>, IAdditionOperators<FrameSpan, int, FrameSpan>, IMultiplyOperators<FrameSpan, int, FrameSpan>, ISubtractionOperators<FrameSpan, int, FrameSpan>, IAdditionOperators<FrameSpan, Frame, FrameSpan>, ISubtractionOperators<FrameSpan, Frame, FrameSpan>, IEquatable<FrameSpan> Implements IComparable<FrameSpan> IUtf8SpanFormattable IFormattable IComparisonOperators<FrameSpan, FrameSpan, bool> IEqualityOperators<FrameSpan, FrameSpan, bool> IAdditionOperators<FrameSpan, FrameSpan, FrameSpan> ISubtractionOperators<FrameSpan, FrameSpan, FrameSpan> IModulusOperators<FrameSpan, int, FrameSpan> IAdditionOperators<FrameSpan, int, FrameSpan> IMultiplyOperators<FrameSpan, int, FrameSpan> ISubtractionOperators<FrameSpan, int, FrameSpan> IAdditionOperators<FrameSpan, Frame, FrameSpan> ISubtractionOperators<FrameSpan, Frame, FrameSpan> IEquatable<FrameSpan> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors FrameSpan(int) Initialize new FrameSpan for frame frameCount. public FrameSpan(int frameCount) Parameters frameCount int Fields FrameCount Returns the int count of frames in the current frame span Frame. public readonly int FrameCount Field Value int MaxValue Returns max frame span value public static readonly FrameSpan MaxValue Field Value FrameSpan One Return frame span of 1 frame public static readonly FrameSpan One Field Value FrameSpan Zero Return frame span of 0 frames public static readonly FrameSpan Zero Field Value FrameSpan Properties FrameValue Returns the value for the current frame span as a Frame. public Frame FrameValue { get; } Property Value Frame Methods Abs(in FrameSpan) Returns the absolute value of a Frame. public static FrameSpan Abs(in FrameSpan frame) Parameters frame FrameSpan Returns FrameSpan Clamp(in FrameSpan, in Frame, in Frame) Clamps frame value to a range public static FrameSpan Clamp(in FrameSpan frame, in Frame min, in Frame max) Parameters frame FrameSpan min Frame max Frame Returns FrameSpan Clamp(in FrameSpan, in FrameSpan, in FrameSpan) Clamps frame value to a range public static FrameSpan Clamp(in FrameSpan frame, in FrameSpan min, in FrameSpan max) Parameters frame FrameSpan min FrameSpan max FrameSpan Returns FrameSpan Clamp(in FrameSpan, int, int) Clamps frame value to a range public static FrameSpan Clamp(in FrameSpan frame, int min, int max) Parameters frame FrameSpan min int max int Returns FrameSpan CompareTo(FrameSpan) public int CompareTo(FrameSpan other) Parameters other FrameSpan Returns int Duration() Returns the time value for the current frame span in TimeSpan. public TimeSpan Duration() Returns TimeSpan Duration(int) Returns the time value for the current frame span in TimeSpan. public TimeSpan Duration(int fps) Parameters fps int Returns TimeSpan Equals(FrameSpan) public bool Equals(FrameSpan other) Parameters other FrameSpan Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool FromMilliseconds(double) Returns new FrameSpan for milliseconds public static FrameSpan FromMilliseconds(double milliseconds) Parameters milliseconds double Returns FrameSpan FromMilliseconds(double, int) Returns new FrameSpan for milliseconds at specified fps. public static FrameSpan FromMilliseconds(double milliseconds, int fps) Parameters milliseconds double fps int Returns FrameSpan FromSeconds(double) Returns new FrameSpan for seconds public static FrameSpan FromSeconds(double seconds) Parameters seconds double Returns FrameSpan FromSeconds(double, int) Returns new FrameSpan for seconds at specified fps. public static FrameSpan FromSeconds(double seconds, int fps) Parameters seconds double fps int Returns FrameSpan FromTimeSpan(TimeSpan) Returns new FrameSpan for duration. public static FrameSpan FromTimeSpan(TimeSpan duration) Parameters duration TimeSpan Returns FrameSpan FromTimeSpan(TimeSpan, int) Returns new FrameSpan for duration at specified fps. public static FrameSpan FromTimeSpan(TimeSpan duration, int fps) Parameters duration TimeSpan fps int Returns FrameSpan GetFrameAt(TimeSpan) Returns frame at the timespan position public Frame GetFrameAt(TimeSpan duration) Parameters duration TimeSpan Returns Frame GetFrameAt(TimeSpan, int) Returns frame at the timespan position public Frame GetFrameAt(TimeSpan duration, int fps) Parameters duration TimeSpan fps int Returns Frame GetFrameAtMilliSecond(double) Returns frame at the time position in milliseconds public Frame GetFrameAtMilliSecond(double millis) Parameters millis double Returns Frame GetFrameAtMilliSecond(double, int) Returns frame at the time position in milliseconds public Frame GetFrameAtMilliSecond(double millis, int fps) Parameters millis double fps int Returns Frame GetFrameAtSecond(double) Returns frame at the time position in seconds public Frame GetFrameAtSecond(double seconds) Parameters seconds double Returns Frame GetFrameAtSecond(double, int) Returns frame at the time position in seconds public Frame GetFrameAtSecond(double seconds, int fps) Parameters seconds double fps int Returns Frame GetHashCode() public override int GetHashCode() Returns int Max(in FrameSpan, in FrameSpan) Returns the larger of two FrameSpan. public static FrameSpan Max(in FrameSpan left, in FrameSpan right) Parameters left FrameSpan right FrameSpan Returns FrameSpan Min(in FrameSpan, in FrameSpan) Returns the smaller of two FrameSpan. public static FrameSpan Min(in FrameSpan left, in FrameSpan right) Parameters left FrameSpan right FrameSpan Returns FrameSpan Of(int) Initialize new FrameSpan for frame frameCount. public static FrameSpan Of(int frameCount) Parameters frameCount int Returns FrameSpan Seconds() Returns the time value for the current frame span in seconds. public double Seconds() Returns double Seconds(int) Returns the time value for the current frame span in seconds. public double Seconds(int fps) Parameters fps int Returns double ToString() public override string ToString() Returns string ToString(string?, IFormatProvider?) public string ToString(string? format, IFormatProvider? formatProvider) Parameters format string formatProvider IFormatProvider Returns string TryFormat(Span<byte>, out int, ReadOnlySpan<char>, IFormatProvider?) public bool TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider) Parameters utf8Destination Span<byte> bytesWritten int format ReadOnlySpan<char> provider IFormatProvider Returns bool Operators operator *(int, FrameSpan) public static FrameSpan operator *(int left, FrameSpan right) Parameters left int right FrameSpan Returns FrameSpan Explicit Interface Implementations operator +(FrameSpan, Frame) static FrameSpan operator +(FrameSpan left, Frame right) Parameters left FrameSpan right Frame Returns FrameSpan operator +(FrameSpan, FrameSpan) static FrameSpan operator +(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns FrameSpan operator +(FrameSpan, int) static FrameSpan operator +(FrameSpan left, int right) Parameters left FrameSpan right int Returns FrameSpan operator ==(FrameSpan, FrameSpan) static bool operator ==(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns bool operator >(FrameSpan, FrameSpan) static bool operator >(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns bool operator >=(FrameSpan, FrameSpan) static bool operator >=(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns bool operator !=(FrameSpan, FrameSpan) static bool operator !=(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns bool operator <(FrameSpan, FrameSpan) static bool operator <(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns bool operator <=(FrameSpan, FrameSpan) static bool operator <=(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns bool operator %(FrameSpan, int) static FrameSpan operator %(FrameSpan left, int right) Parameters left FrameSpan right int Returns FrameSpan operator *(FrameSpan, int) static FrameSpan operator *(FrameSpan left, int right) Parameters left FrameSpan right int Returns FrameSpan operator -(FrameSpan, Frame) static FrameSpan operator -(FrameSpan left, Frame right) Parameters left FrameSpan right Frame Returns FrameSpan operator -(FrameSpan, FrameSpan) static FrameSpan operator -(FrameSpan left, FrameSpan right) Parameters left FrameSpan right FrameSpan Returns FrameSpan operator -(FrameSpan, int) static FrameSpan operator -(FrameSpan left, int right) Parameters left FrameSpan right int Returns FrameSpan See Also CurrentFrameRate.set"
  },
  "api/Backdash.FrameTime.Fixed.html": {
    "href": "api/Backdash.FrameTime.Fixed.html",
    "title": "Class FrameTime.Fixed | Backdash Netcode",
    "summary": "Class FrameTime.Fixed Namespace Backdash Assembly Backdash.dll Frame time calculator public sealed class FrameTime.Fixed Inheritance object FrameTime.Fixed Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Fixed(int) Frame time calculator public Fixed(int frameRate) Parameters frameRate int Properties FrameRate Used frame rate. public int FrameRate { get; } Property Value int One Return one frame in seconds public double One { get; } Property Value double Step Return one frame duration public TimeSpan Step { get; } Property Value TimeSpan Methods GetDuration(int) Returns TimeSpan for frameCount. public TimeSpan GetDuration(int frameCount) Parameters frameCount int Returns TimeSpan GetFrames(double) Returns the amount of frames for seconds. public int GetFrames(double seconds) Parameters seconds double Returns int GetFrames(TimeSpan) Returns the amount of frames for duration. public int GetFrames(TimeSpan duration) Parameters duration TimeSpan Returns int GetMillisecondFrames(double) Returns the amount of frames for milliseconds. public int GetMillisecondFrames(double milliseconds) Parameters milliseconds double Returns int GetMilliseconds(int) Returns double seconds for frameCount. public double GetMilliseconds(int frameCount) Parameters frameCount int Returns double GetSeconds(double) Returns double seconds for frameCount .h public double GetSeconds(double frameCount) Parameters frameCount double Returns double GetSeconds(int) Returns double seconds for frameCount .h public double GetSeconds(int frameCount) Parameters frameCount int Returns double GetTotalFrames(double) Returns the amount of frames for seconds. public double GetTotalFrames(double seconds) Parameters seconds double Returns double GetTotalFrames(TimeSpan) Returns the amount of frames for duration. public double GetTotalFrames(TimeSpan duration) Parameters duration TimeSpan Returns double GetTotalMillisecondFrames(double) Returns the amount of frames for milliseconds. public double GetTotalMillisecondFrames(double milliseconds) Parameters milliseconds double Returns double SetFrameRate(int) Sets the current FrameRate public void SetFrameRate(int newFps) Parameters newFps int"
  },
  "api/Backdash.FrameTime.html": {
    "href": "api/Backdash.FrameTime.html",
    "title": "Class FrameTime | Backdash Netcode",
    "summary": "Class FrameTime Namespace Backdash Assembly Backdash.dll Frame time helpers public static class FrameTime Inheritance object FrameTime Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields Default Default Instance for FrameTime.Fixed public static readonly FrameTime.Fixed Default Field Value FrameTime.Fixed DefaultFrameRate Default FPS(frames per second) 60 public const int DefaultFrameRate = 60 Field Value int One30Fps Return one frame in seconds for 30 FPS public const double One30Fps = 0.03333333507180214 Field Value double One30FpsF Return one frame in seconds for 30 FPS public const float One30FpsF = 0.033333335 Field Value float One60Fps Return one frame in seconds for 60 FPS public const double One60Fps = 0.01666666753590107 Field Value double One60FpsF Return one frame in seconds for 60 FPS public const float One60FpsF = 0.016666668 Field Value float Properties CurrentFrameRate Current FPS(frames per second) used in Default 60 public static int CurrentFrameRate { get; set; } Property Value int One Return one frame in seconds public static double One { get; } Property Value double Step Return one frame in seconds public static TimeSpan Step { get; } Property Value TimeSpan Methods GetDuration(int) Returns TimeSpan for frameCount. public static TimeSpan GetDuration(int frameCount) Parameters frameCount int Returns TimeSpan GetDuration(int, int) Returns TimeSpan for frameCount at specified fps. public static TimeSpan GetDuration(int frameCount, int fps) Parameters frameCount int fps int Returns TimeSpan GetFrames(double) Returns the amount of frames for seconds. public static int GetFrames(double seconds) Parameters seconds double Returns int GetFrames(double, int) Returns the amount of frames for seconds at specified fps. public static int GetFrames(double seconds, int fps) Parameters seconds double fps int Returns int GetFrames(TimeSpan) Returns the amount of frames for duration. public static int GetFrames(TimeSpan duration) Parameters duration TimeSpan Returns int GetFrames(TimeSpan, int) Returns the amount of frames for duration at specified fps. public static int GetFrames(TimeSpan duration, int fps) Parameters duration TimeSpan fps int Returns int GetMillisecondFrames(double) Returns the amount of frames for milliseconds. public static int GetMillisecondFrames(double milliseconds) Parameters milliseconds double Returns int GetMillisecondFrames(double, int) Returns the amount of frames for milliseconds at specified fps. public static int GetMillisecondFrames(double milliseconds, int fps) Parameters milliseconds double fps int Returns int GetMilliseconds(int) Returns double seconds for frameCount. public static double GetMilliseconds(int frameCount) Parameters frameCount int Returns double GetMilliseconds(int, int) Returns double seconds for frameCount at specified fps. public static double GetMilliseconds(int frameCount, int fps) Parameters frameCount int fps int Returns double GetSeconds(double) Returns double seconds for frameCount. public static double GetSeconds(double frameCount) Parameters frameCount double Returns double GetSeconds(double, int) Returns double seconds for frameCount at specified fps. public static double GetSeconds(double frameCount, int fps) Parameters frameCount double fps int Returns double GetSeconds(int) Returns double seconds for frameCount. public static double GetSeconds(int frameCount) Parameters frameCount int Returns double GetSeconds(int, int) Returns double seconds for frameCount at specified fps. public static double GetSeconds(int frameCount, int fps) Parameters frameCount int fps int Returns double GetTotalFrames(double) Returns the amount of frames for seconds. public static double GetTotalFrames(double seconds) Parameters seconds double Returns double GetTotalFrames(double, int) Returns the amount of frames for seconds at specified fps. public static double GetTotalFrames(double seconds, int fps) Parameters seconds double fps int Returns double GetTotalFrames(TimeSpan) Returns the amount of frames for duration. public static double GetTotalFrames(TimeSpan duration) Parameters duration TimeSpan Returns double GetTotalFrames(TimeSpan, int) Returns the amount of frames for duration at specified fps. public static double GetTotalFrames(TimeSpan duration, int fps) Parameters duration TimeSpan fps int Returns double GetTotalMillisecondFrames(double) Returns the amount of frames for milliseconds. public static double GetTotalMillisecondFrames(double milliseconds) Parameters milliseconds double Returns double GetTotalMillisecondFrames(double, int) Returns the amount of frames for milliseconds at specified fps. public static double GetTotalMillisecondFrames(double milliseconds, int fps) Parameters milliseconds double fps int Returns double RateStep(int) Return one frame duration public static TimeSpan RateStep(int fps) Parameters fps int Returns TimeSpan RateStepSeconds(int) Return one frame in seconds public static double RateStepSeconds(int fps) Parameters fps int Returns double"
  },
  "api/Backdash.INetcodeSession-1.html": {
    "href": "api/Backdash.INetcodeSession-1.html",
    "title": "Interface INetcodeSession<TInput> | Backdash Netcode",
    "summary": "Interface INetcodeSession<TInput> Namespace Backdash Assembly Backdash.dll Contract for managing a netcode session. public interface INetcodeSession<TInput> : INetcodeSession, INetcodeSessionInfo, IDisposable, IAsyncDisposable where TInput : unmanaged Type Parameters TInput Game input type Inherited Members INetcodeSession.GetInfo() INetcodeSession.DisconnectPlayer(NetcodePlayer) INetcodeSession.BeginFrame() INetcodeSession.AdvanceFrame() INetcodeSession.GetPlayerStatus(NetcodePlayer) INetcodeSession.UpdateNetworkStats(NetcodePlayer) INetcodeSession.SetFrameDelay(NetcodePlayer, int) INetcodeSession.LoadFrame(Frame) INetcodeSession.LoadFrame(int) INetcodeSession.GetPlayers() INetcodeSession.GetSpectators() INetcodeSession.Start(CancellationToken) INetcodeSession.WaitToStop(CancellationToken) INetcodeSession.SetHandler(INetcodeSessionHandler) INetcodeSession.IsReplay() INetcodeSession.IsRemote() INetcodeSession.IsSpectator() INetcodeSession.IsLocal() INetcodeSession.IsSyncTest() INetcodeSession.WriteLog(LogLevel, string) INetcodeSession.WriteLog(string, Exception) INetcodeSession.AddPlayer(NetcodePlayer) INetcodeSession.AddPlayers(IReadOnlyList<NetcodePlayer>) INetcodeSession.FindPlayer(Guid) INetcodeSession.TryGetPlayer(PlayerType, out NetcodePlayer) INetcodeSession.TryGetLocalPlayer(out NetcodePlayer) INetcodeSession.TryGetRemotePlayer(out NetcodePlayer) INetcodeSession.ReplayController INetcodeSessionInfo.GetCurrentSavedFrame() INetcodeSessionInfo.NumberOfPlayers INetcodeSessionInfo.NumberOfSpectators INetcodeSessionInfo.FixedFrameRate INetcodeSessionInfo.CurrentFrame INetcodeSessionInfo.Mode INetcodeSessionInfo.RollbackFrames INetcodeSessionInfo.FramesBehind INetcodeSessionInfo.LocalPort INetcodeSessionInfo.IsInRollback INetcodeSessionInfo.CurrentChecksum INetcodeSessionInfo.CurrentStateSize IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Properties CurrentInputs Return all synchronized inputs. This must be called after SynchronizeInputs() ReadOnlySpan<TInput> CurrentInputs { get; } Property Value ReadOnlySpan<TInput> CurrentSynchronizedInputs Return all synchronized inputs with connect status. This must be called after SynchronizeInputs() ReadOnlySpan<SynchronizedInput<TInput>> CurrentSynchronizedInputs { get; } Property Value ReadOnlySpan<SynchronizedInput<TInput>> Random Deterministic random value generator. Must be called after SynchronizeInputs(). INetcodeRandom Random { get; } Property Value INetcodeRandom Methods AddLocalInput(NetcodePlayer, in TInput) Used add local inputs and notify the netcode that they should be transmitted to remote players. This must be called once every frame for all players of type Local. ResultCode AddLocalInput(NetcodePlayer player, in TInput localInput) Parameters player NetcodePlayer Player owner of the inputs localInput TInput The input value Returns ResultCode GetInput(NetcodePlayer) Returns the value of a synchronized input for the requested player. This must be called after SynchronizeInputs() ref readonly SynchronizedInput<TInput> GetInput(NetcodePlayer player) Parameters player NetcodePlayer Returns SynchronizedInput<TInput> GetInput(int) Returns the value of a synchronized input for the requested player index. This must be called after SynchronizeInputs() ref readonly SynchronizedInput<TInput> GetInput(int index) Parameters index int Returns SynchronizedInput<TInput> GetInputs(Span<SynchronizedInput<TInput>>) Copy the value of all synchronized inputs into the buffer. This must be called after SynchronizeInputs() void GetInputs(Span<SynchronizedInput<TInput>> buffer) Parameters buffer Span<SynchronizedInput<TInput>> GetInputs(Span<TInput>) Copy the value of all synchronized inputs into the buffer. This must be called after SynchronizeInputs() void GetInputs(Span<TInput> buffer) Parameters buffer Span<TInput> SetRandomSeed(uint, uint) Add an extra state seed to calculate the next INetcodeRandom on Random This value state must be deterministic and be called every frame before SynchronizeInputs() void SetRandomSeed(uint seed, uint extraState = 0) Parameters seed uint extraState uint SynchronizeInputs() Synchronizes the inputs of the local and remote players into a local buffer. You should call this before every frame of execution, including those frames which happen during rollback. ResultCode SynchronizeInputs() Returns ResultCode"
  },
  "api/Backdash.INetcodeSession.html": {
    "href": "api/Backdash.INetcodeSession.html",
    "title": "Interface INetcodeSession | Backdash Netcode",
    "summary": "Interface INetcodeSession Namespace Backdash Assembly Backdash.dll Contract for managing a netcode session. public interface INetcodeSession : INetcodeSessionInfo, IDisposable, IAsyncDisposable Inherited Members INetcodeSessionInfo.GetCurrentSavedFrame() INetcodeSessionInfo.NumberOfPlayers INetcodeSessionInfo.NumberOfSpectators INetcodeSessionInfo.FixedFrameRate INetcodeSessionInfo.CurrentFrame INetcodeSessionInfo.Mode INetcodeSessionInfo.RollbackFrames INetcodeSessionInfo.FramesBehind INetcodeSessionInfo.LocalPort INetcodeSessionInfo.IsInRollback INetcodeSessionInfo.CurrentChecksum INetcodeSessionInfo.CurrentStateSize IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Properties ReplayController Try to get the session SessionReplayControl SessionReplayControl? ReplayController { get; } Property Value SessionReplayControl Methods AddPlayer(NetcodePlayer) Add the player into current session. ResultCode AddPlayer(NetcodePlayer player) Parameters player NetcodePlayer Returns ResultCode Ok if success. AddPlayers(IReadOnlyList<NetcodePlayer>) Add a list of into current session. IReadOnlyList<ResultCode> AddPlayers(IReadOnlyList<NetcodePlayer> players) Parameters players IReadOnlyList<NetcodePlayer> Returns IReadOnlyList<ResultCode> An equivalent ResultCode list. AdvanceFrame() Should be called at the end of each frame of your application and also in AdvanceFrame(). void AdvanceFrame() BeginFrame() Should be called at the start of each frame of your application. void BeginFrame() DisconnectPlayer(NetcodePlayer) Disconnects a remote player from a game. void DisconnectPlayer(NetcodePlayer player) Parameters player NetcodePlayer FindPlayer(Guid) Find player by unique ID NetcodePlayer? FindPlayer(Guid id) Parameters id Guid Returns NetcodePlayer See Also Id GetInfo() Returns session info INetcodeSessionInfo GetInfo() Returns INetcodeSessionInfo GetPlayerStatus(NetcodePlayer) Returns connection status of a player. PlayerConnectionStatus GetPlayerStatus(NetcodePlayer player) Parameters player NetcodePlayer Returns PlayerConnectionStatus GetPlayers() Returns a list of all input players in the session. IReadOnlySet<NetcodePlayer> GetPlayers() Returns IReadOnlySet<NetcodePlayer> GetSpectators() Returns a list of all spectators in the session. IReadOnlySet<NetcodePlayer> GetSpectators() Returns IReadOnlySet<NetcodePlayer> IsLocal() Return true if the session is Local bool IsLocal() Returns bool IsRemote() Return true if the session is Remote bool IsRemote() Returns bool IsReplay() Return true if the session is Replay bool IsReplay() Returns bool IsSpectator() Return true if the session is Spectator bool IsSpectator() Returns bool IsSyncTest() Return true if the session is SyncTest bool IsSyncTest() Returns bool LoadFrame(Frame) Load state for saved frame. bool LoadFrame(Frame frame) Parameters frame Frame Returns bool true if succeeded. LoadFrame(int) Load state for saved frame. bool LoadFrame(int frame) Parameters frame int Returns bool true if succeeded. SetFrameDelay(NetcodePlayer, int) Change the amount of delay frames for local input. void SetFrameDelay(NetcodePlayer player, int delayInFrames) Parameters player NetcodePlayer delayInFrames int SetHandler(INetcodeSessionHandler) Set the handler for the current session. The client must call this before Start(CancellationToken). void SetHandler(INetcodeSessionHandler handler) Parameters handler INetcodeSessionHandler Start(CancellationToken) Starts the background work for the session. (Socket receiver, input queue, peer synchronization, etc.) void Start(CancellationToken stoppingToken = default) Parameters stoppingToken CancellationToken TryGetLocalPlayer(out NetcodePlayer?) Tries to get first local player bool TryGetLocalPlayer(out NetcodePlayer? player) Parameters player NetcodePlayer Returns bool TryGetPlayer(PlayerType, out NetcodePlayer?) Tries to get first player of type playerType bool TryGetPlayer(PlayerType playerType, out NetcodePlayer? player) Parameters playerType PlayerType player NetcodePlayer Returns bool TryGetRemotePlayer(out NetcodePlayer?) Tries to get first remote player bool TryGetRemotePlayer(out NetcodePlayer? player) Parameters player NetcodePlayer Returns bool UpdateNetworkStats(NetcodePlayer) Gets statistics and information about a player in NetworkStats. Returns false if the request player is not connected or synchronized. bool UpdateNetworkStats(NetcodePlayer player) Parameters player NetcodePlayer Returns bool See Also CalculateRemotePlayerStats WithPlayerStats(bool) WaitToStop(CancellationToken) Waits the session background work to finish. Task WaitToStop(CancellationToken stoppingToken = default) Parameters stoppingToken CancellationToken Returns Task WriteLog(LogLevel, string) Writes a log message into the current session log writer void WriteLog(LogLevel level, string message) Parameters level LogLevel message string WriteLog(string, Exception?) Writes a log message into the current session log writer void WriteLog(string message, Exception? error = null) Parameters message string error Exception"
  },
  "api/Backdash.INetcodeSessionHandler.html": {
    "href": "api/Backdash.INetcodeSessionHandler.html",
    "title": "Interface INetcodeSessionHandler | Backdash Netcode",
    "summary": "Interface INetcodeSessionHandler Namespace Backdash Assembly Backdash.dll Defines the callback functions that your application must implement. Backdash will periodically call these functions during the session lifecycle. public interface INetcodeSessionHandler Methods AdvanceFrame() Called during a rollback after LoadState(in Frame, ref readonly BinaryBufferReader). You should advance your game state by exactly one frame. Before each frame, call SynchronizeInputs() to retrieve the inputs you should use for that frame. After each frame, you should call AdvanceFrame() to notify Backdash that you're finished. void AdvanceFrame() CreateState(in Frame, ref readonly BinaryBufferReader) Reads a state object of a snapshot. Used for SyncTest debug. object? CreateState(in Frame frame, ref readonly BinaryBufferReader reader) Parameters frame Frame reader BinaryBufferReader Returns object See Also ForSyncTest(Action<SyncTestOptions<TInput>>) IStateStringParser GetStateString(in Frame, ref readonly BinaryBufferReader, object) LoadState(in Frame, ref readonly BinaryBufferReader) Backdash will call this function at the beginning of a rollback. Binary reader for the state. void LoadState(in Frame frame, ref readonly BinaryBufferReader reader) Parameters frame Frame The loading frame reader BinaryBufferReader Binary state reader OnPeerEvent(NetcodePlayer, PeerEventInfo) Notification that some PeerEvent has happened for a NetcodePlayer void OnPeerEvent(NetcodePlayer player, PeerEventInfo evt) Parameters player NetcodePlayer The player owner of the event evt PeerEventInfo Event data OnSessionClose() Called at the end of a game session, before release resources. void OnSessionClose() OnSessionStart() Called at start of a game session, when all the clients have synchronized. You may begin sending inputs with. void OnSessionStart() SaveState(in Frame, ref readonly BinaryBufferWriter) The client should copy the entire contents of the current game state using writer. void SaveState(in Frame frame, ref readonly BinaryBufferWriter writer) Parameters frame Frame The frame which the save occurs. writer BinaryBufferWriter Binary state writer. TimeSync(FrameSpan) The time synchronization has determined that this client is too far ahead of the other one and should slow down to ensure fairness. void TimeSync(FrameSpan framesAhead) Parameters framesAhead FrameSpan Indicates how many frames the client is ahead"
  },
  "api/Backdash.INetcodeSessionInfo.html": {
    "href": "api/Backdash.INetcodeSessionInfo.html",
    "title": "Interface INetcodeSessionInfo | Backdash Netcode",
    "summary": "Interface INetcodeSessionInfo Namespace Backdash Assembly Backdash.dll Contract for managing a netcode session. public interface INetcodeSessionInfo Properties CurrentChecksum Returns the checksum of the current saved state. uint CurrentChecksum { get; } Property Value uint CurrentFrame Returns the current session Frame. Frame CurrentFrame { get; } Property Value Frame CurrentStateSize Returns the size of the current saved state. ByteSize CurrentStateSize { get; } Property Value ByteSize FixedFrameRate Returns the configured frame rate. int FixedFrameRate { get; } Property Value int FramesBehind Returns the number of frames the client is behind. FrameSpan FramesBehind { get; } Property Value FrameSpan See Also FrameSpan IsInRollback Returns true if the session is in rollback state bool IsInRollback { get; } Property Value bool LocalPort Returns the current TCP local port. int LocalPort { get; } Property Value int Mode Returns the current SessionMode. SessionMode Mode { get; } Property Value SessionMode NumberOfPlayers Returns the number of player in the current session. int NumberOfPlayers { get; } Property Value int NumberOfSpectators Returns the number of spectators in the current session. int NumberOfSpectators { get; } Property Value int RollbackFrames Returns the number of current rollback frames. FrameSpan RollbackFrames { get; } Property Value FrameSpan See Also FrameSpan Methods GetCurrentSavedFrame() Returns the last saved state. SavedFrame GetCurrentSavedFrame() Returns SavedFrame"
  },
  "api/Backdash.MathI.html": {
    "href": "api/Backdash.MathI.html",
    "title": "Class MathI | Backdash Netcode",
    "summary": "Class MathI Namespace Backdash Assembly Backdash.dll Int Math public static class MathI Inheritance object MathI Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Avg(int[]) Returns the average sum of a span of int public static double Avg(int[] values) Parameters values int[] Returns double Avg(ReadOnlySpan<int>) Returns the average sum of a span of int public static double Avg(ReadOnlySpan<int> span) Parameters span ReadOnlySpan<int> Returns double CeilDiv(int, int) Divide two integers ceiling the result public static int CeilDiv(int x, int y) Parameters x int y int Returns int SumRaw<T>(ReadOnlySpan<T>) Returns the sum of a span of IBinaryInteger<TSelf> public static T SumRaw<T>(ReadOnlySpan<T> span) where T : unmanaged, IBinaryInteger<T>, IAdditionOperators<T, T, T> Parameters span ReadOnlySpan<T> Returns T Type Parameters T SumRaw<T>(T[]) Returns the sum of a span of IBinaryInteger<TSelf> public static T SumRaw<T>(T[] values) where T : unmanaged, IBinaryInteger<T>, IAdditionOperators<T, T, T> Parameters values T[] Returns T Type Parameters T Sum<T>(ReadOnlySpan<T>) Returns the sum of a span of IBinaryInteger<TSelf>. Use SIMD if available. public static T Sum<T>(ReadOnlySpan<T> span) where T : unmanaged, IBinaryInteger<T>, IAdditionOperators<T, T, T> Parameters span ReadOnlySpan<T> Returns T Type Parameters T Sum<T>(T[]) Returns the sum of a span of IBinaryInteger<TSelf>. Use SIMD if available. public static T Sum<T>(T[] values) where T : unmanaged, IBinaryInteger<T>, IAdditionOperators<T, T, T> Parameters values T[] Returns T Type Parameters T"
  },
  "api/Backdash.NetcodePlayer.html": {
    "href": "api/Backdash.NetcodePlayer.html",
    "title": "Class NetcodePlayer | Backdash Netcode",
    "summary": "Class NetcodePlayer Namespace Backdash Assembly Backdash.dll Holds data of a player to be added to INetcodeSession<TInput>. public class NetcodePlayer : IUtf8SpanFormattable, IEquatable<NetcodePlayer>, IEqualityOperators<NetcodePlayer, NetcodePlayer, bool> Inheritance object NetcodePlayer Implements IUtf8SpanFormattable IEquatable<NetcodePlayer> IEqualityOperators<NetcodePlayer, NetcodePlayer, bool> Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors NetcodePlayer() Initializes a new netcode player public NetcodePlayer() NetcodePlayer(PlayerType, EndPoint?) Initializes a new netcode player public NetcodePlayer(PlayerType type, EndPoint? endPoint = null) Parameters type PlayerType endPoint EndPoint Fields NetworkStats Network stats for the peer public PeerNetworkStats NetworkStats Field Value PeerNetworkStats See Also UpdateNetworkStats(NetcodePlayer) Type Player type public readonly PlayerType Type Field Value PlayerType Properties CustomId Custom user id value public int CustomId { get; set; } Property Value int EndPoint Holds data for a player IP Endpoint public EndPoint? EndPoint { get; } Property Value EndPoint Id Player unique ID public Guid Id { get; } Property Value Guid Index public int Index { get; } Property Value int Number Player number (starting from 1) public int Number { get; } Property Value int Methods CreateLocal() Create new NetcodePlayer of type Local public static NetcodePlayer CreateLocal() Returns NetcodePlayer CreateRemote(int) Create new localhost NetcodePlayer of type Remote public static NetcodePlayer CreateRemote(int port) Parameters port int Returns NetcodePlayer CreateRemote(EndPoint) Create new NetcodePlayer of type Remote public static NetcodePlayer CreateRemote(EndPoint endPoint) Parameters endPoint EndPoint Returns NetcodePlayer CreateRemote(IPAddress, int) Create new NetcodePlayer of type Remote public static NetcodePlayer CreateRemote(IPAddress address, int port) Parameters address IPAddress port int Returns NetcodePlayer CreateSpectator(int) Create new localhost NetcodePlayer of type Spectator public static NetcodePlayer CreateSpectator(int port) Parameters port int Returns NetcodePlayer CreateSpectator(EndPoint) Create new NetcodePlayer of type Spectator public static NetcodePlayer CreateSpectator(EndPoint endPoint) Parameters endPoint EndPoint Returns NetcodePlayer CreateSpectator(IPAddress, int) Create new NetcodePlayer of type Spectator public static NetcodePlayer CreateSpectator(IPAddress address, int port) Parameters address IPAddress port int Returns NetcodePlayer Equals(NetcodePlayer?) public virtual bool Equals(NetcodePlayer? other) Parameters other NetcodePlayer Returns bool Equals(object?) public override sealed bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override sealed int GetHashCode() Returns int IsLocal() Returns true if player is Local public bool IsLocal() Returns bool IsRemote() Returns true if player is Remote public bool IsRemote() Returns bool IsSpectator() Returns true if player is Spectator public bool IsSpectator() Returns bool ToString() public override string ToString() Returns string Explicit Interface Implementations operator ==(NetcodePlayer?, NetcodePlayer?) static bool operator ==(NetcodePlayer? left, NetcodePlayer? right) Parameters left NetcodePlayer right NetcodePlayer Returns bool operator !=(NetcodePlayer?, NetcodePlayer?) static bool operator !=(NetcodePlayer? left, NetcodePlayer? right) Parameters left NetcodePlayer right NetcodePlayer Returns bool"
  },
  "api/Backdash.NetcodeSessionBuilder-1.html": {
    "href": "api/Backdash.NetcodeSessionBuilder-1.html",
    "title": "Class NetcodeSessionBuilder<TInput> | Backdash Netcode",
    "summary": "Class NetcodeSessionBuilder<TInput> Namespace Backdash Assembly Backdash.dll Builder for INetcodeSession<TInput>. public sealed class NetcodeSessionBuilder<TInput> where TInput : unmanaged Type Parameters TInput Inheritance object NetcodeSessionBuilder<TInput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods AddJob(INetcodeJob) Add new custom job public NetcodeSessionBuilder<TInput> AddJob(INetcodeJob job) Parameters job INetcodeJob Returns NetcodeSessionBuilder<TInput> AddJob<TPlugin>() Add new custom job public NetcodeSessionBuilder<TInput> AddJob<TPlugin>() where TPlugin : INetcodeJob, new() Returns NetcodeSessionBuilder<TInput> Type Parameters TPlugin See Also ServicesConfig<TInput> Build() Builds a new INetcodeSession<TInput>. public INetcodeSession<TInput> Build() Returns INetcodeSession<TInput> Configure(Action<NetcodeOptions>) Configure INetcodeSession<TInput> options public NetcodeSessionBuilder<TInput> Configure(Action<NetcodeOptions> config) Parameters config Action<NetcodeOptions> Returns NetcodeSessionBuilder<TInput> See Also NetcodeOptions ConfigureLogger(Action<LoggerOptions>) Configure session logger public NetcodeSessionBuilder<TInput> ConfigureLogger(Action<LoggerOptions> config) Parameters config Action<LoggerOptions> Returns NetcodeSessionBuilder<TInput> See Also LoggerOptions ConfigureProtocol(Action<ProtocolOptions>) Configure session protocol public NetcodeSessionBuilder<TInput> ConfigureProtocol(Action<ProtocolOptions> config) Parameters config Action<ProtocolOptions> Returns NetcodeSessionBuilder<TInput> See Also ProtocolOptions ConfigureReplay(Action<SessionReplayOptions<TInput>>?) Configure replay session options. public NetcodeSessionBuilder<TInput> ConfigureReplay(Action<SessionReplayOptions<TInput>>? config = null) Parameters config Action<SessionReplayOptions<TInput>> Returns NetcodeSessionBuilder<TInput> See Also SessionReplayOptions<TInput> ConfigureServices(Action<ServicesConfig<TInput>>) Configure custom session services public NetcodeSessionBuilder<TInput> ConfigureServices(Action<ServicesConfig<TInput>> config) Parameters config Action<ServicesConfig<TInput>> Returns NetcodeSessionBuilder<TInput> See Also ServicesConfig<TInput> ConfigureSpectator(Action<SpectatorOptions>?) Configure spectator session options. public NetcodeSessionBuilder<TInput> ConfigureSpectator(Action<SpectatorOptions>? config = null) Parameters config Action<SpectatorOptions> Returns NetcodeSessionBuilder<TInput> See Also SpectatorOptions ConfigureSyncTest(Action<SyncTestOptions<TInput>>?) Configure sync test session options. public NetcodeSessionBuilder<TInput> ConfigureSyncTest(Action<SyncTestOptions<TInput>>? config = null) Parameters config Action<SyncTestOptions<TInput>> Returns NetcodeSessionBuilder<TInput> See Also SyncTestOptions<TInput> ConfigureTimeSync(Action<TimeSyncOptions>) Configure session time synchronization public NetcodeSessionBuilder<TInput> ConfigureTimeSync(Action<TimeSyncOptions> config) Parameters config Action<TimeSyncOptions> Returns NetcodeSessionBuilder<TInput> See Also TimeSyncOptions ForLocal() Set the SessionMode as Local. public NetcodeSessionBuilder<TInput> ForLocal() Returns NetcodeSessionBuilder<TInput> ForRemote() Set the SessionMode as Remote. public NetcodeSessionBuilder<TInput> ForRemote() Returns NetcodeSessionBuilder<TInput> ForReplay(Action<SessionReplayOptions<TInput>>?) Set the SessionMode as Replay. public NetcodeSessionBuilder<TInput> ForReplay(Action<SessionReplayOptions<TInput>>? config = null) Parameters config Action<SessionReplayOptions<TInput>> Returns NetcodeSessionBuilder<TInput> ForSpectator(Action<SpectatorOptions>?) Set the SessionMode as Spectator. public NetcodeSessionBuilder<TInput> ForSpectator(Action<SpectatorOptions>? config = null) Parameters config Action<SpectatorOptions> Returns NetcodeSessionBuilder<TInput> ForSpectator(int) Set the SessionMode as Spectator at localhost. public NetcodeSessionBuilder<TInput> ForSpectator(int hostPort) Parameters hostPort int Returns NetcodeSessionBuilder<TInput> ForSpectator(EndPoint) Set the SessionMode as Spectator. public NetcodeSessionBuilder<TInput> ForSpectator(EndPoint hostEndpoint) Parameters hostEndpoint EndPoint Returns NetcodeSessionBuilder<TInput> ForSpectator(IPAddress, int) Set the SessionMode as Spectator. public NetcodeSessionBuilder<TInput> ForSpectator(IPAddress hostAddress, int hostPort) Parameters hostAddress IPAddress hostPort int Returns NetcodeSessionBuilder<TInput> ForSyncTest(Action<SyncTestOptions<TInput>>?) Set the SessionMode as SyncTest. public NetcodeSessionBuilder<TInput> ForSyncTest(Action<SyncTestOptions<TInput>>? config = null) Parameters config Action<SyncTestOptions<TInput>> Returns NetcodeSessionBuilder<TInput> UseBackgroundThread(bool) Run jobs in a separated thread. public NetcodeSessionBuilder<TInput> UseBackgroundThread(bool enabled = true) Parameters enabled bool Returns NetcodeSessionBuilder<TInput> Defaults to true UsePlugin(INetcodePlugin) Add plugin type public NetcodeSessionBuilder<TInput> UsePlugin(INetcodePlugin plugin) Parameters plugin INetcodePlugin Returns NetcodeSessionBuilder<TInput> See Also ServicesConfig<TInput> UsePlugin<TPlugin>() Use plugin type public NetcodeSessionBuilder<TInput> UsePlugin<TPlugin>() where TPlugin : INetcodePlugin, new() Returns NetcodeSessionBuilder<TInput> Type Parameters TPlugin See Also ServicesConfig<TInput> WithChecksumProvider(ChecksumDelegate) Set the ChecksumProvider public NetcodeSessionBuilder<TInput> WithChecksumProvider(ChecksumDelegate compute) Parameters compute ChecksumDelegate Returns NetcodeSessionBuilder<TInput> WithChecksumProvider(IChecksumProvider) Set the ChecksumProvider public NetcodeSessionBuilder<TInput> WithChecksumProvider(IChecksumProvider provider) Parameters provider IChecksumProvider Returns NetcodeSessionBuilder<TInput> WithChecksumProvider<T>() Set the ChecksumProvider public NetcodeSessionBuilder<TInput> WithChecksumProvider<T>() where T : IChecksumProvider, new() Returns NetcodeSessionBuilder<TInput> Type Parameters T WithComparer(EqualityComparer<TInput>) Set the TInput comparer. public NetcodeSessionBuilder<TInput> WithComparer(EqualityComparer<TInput> comparer) Parameters comparer EqualityComparer<TInput> Returns NetcodeSessionBuilder<TInput> WithComparer<T>() Set the TInput comparer. public NetcodeSessionBuilder<TInput> WithComparer<T>() where T : EqualityComparer<TInput>, new() Returns NetcodeSessionBuilder<TInput> Type Parameters T WithConsistencyCheck(bool) Sets Protocol.ConsistencyCheckEnabled option public NetcodeSessionBuilder<TInput> WithConsistencyCheck(bool enabled) Parameters enabled bool Returns NetcodeSessionBuilder<TInput> WithDeterministicRandom(IDeterministicRandom<TInput>) Set the DeterministicRandom public NetcodeSessionBuilder<TInput> WithDeterministicRandom(IDeterministicRandom<TInput> writer) Parameters writer IDeterministicRandom<TInput> Returns NetcodeSessionBuilder<TInput> WithDeterministicRandom<T>() Set the DeterministicRandom public NetcodeSessionBuilder<TInput> WithDeterministicRandom<T>() where T : IDeterministicRandom<TInput>, new() Returns NetcodeSessionBuilder<TInput> Type Parameters T See Also Logger WithEndianness(Endianness) Select the input serialization Endianness public NetcodeSessionBuilder<TInput> WithEndianness(Endianness endianness) Parameters endianness Endianness Returns NetcodeSessionBuilder<TInput> Defaults to BigEndian See Also Platform WithFileLogWriter(string?, bool) Set the logger LogWriter public NetcodeSessionBuilder<TInput> WithFileLogWriter(string? filename = null, bool append = true) Parameters filename string append bool Returns NetcodeSessionBuilder<TInput> See Also Logger FileTextLogWriter WithFrameRate(int) Base frame rate used to estimate fairness (frame advantage) over peers. Default FPS(frames per second) 60 public NetcodeSessionBuilder<TInput> WithFrameRate(int fps) Parameters fps int Returns NetcodeSessionBuilder<TInput> See Also FrameTime WithHandler(INetcodeSessionHandler) Set the session handler for the INetcodeSession<TInput> public NetcodeSessionBuilder<TInput> WithHandler(INetcodeSessionHandler handler) Parameters handler INetcodeSessionHandler Returns NetcodeSessionBuilder<TInput> See Also INetcodeSessionHandler SetHandler(INetcodeSessionHandler) WithInitialRandomSeed(int) Initial seed for DeterministicRandom public NetcodeSessionBuilder<TInput> WithInitialRandomSeed(int value) Parameters value int Returns NetcodeSessionBuilder<TInput> Defaults to 0 WithInitialRandomSeed(uint) Initial seed for DeterministicRandom public NetcodeSessionBuilder<TInput> WithInitialRandomSeed(uint value) Parameters value uint Returns NetcodeSessionBuilder<TInput> Defaults to 0 WithInputDelayFrames(int) Amount of frames to delay local input. public NetcodeSessionBuilder<TInput> WithInputDelayFrames(int frames) Parameters frames int Returns NetcodeSessionBuilder<TInput> Defaults to 2 WithInputListener(IInputListener<TInput>) Set the logger InputListener public NetcodeSessionBuilder<TInput> WithInputListener(IInputListener<TInput> listener) Parameters listener IInputListener<TInput> Returns NetcodeSessionBuilder<TInput> See Also IInputListener<TInput> WithInputListener<T>() Set the logger InputListener public NetcodeSessionBuilder<TInput> WithInputListener<T>() where T : IInputListener<TInput>, new() Returns NetcodeSessionBuilder<TInput> Type Parameters T See Also IInputListener<TInput> WithLogLevel(LogLevel, bool) Sets Logger log level public NetcodeSessionBuilder<TInput> WithLogLevel(LogLevel level, bool appendLevel = true) Parameters level LogLevel appendLevel bool Returns NetcodeSessionBuilder<TInput> See Also LogLevel WithLogWriter(ILogWriter) Set the logger LogWriter public NetcodeSessionBuilder<TInput> WithLogWriter(ILogWriter writer) Parameters writer ILogWriter Returns NetcodeSessionBuilder<TInput> See Also Logger WithLogWriter(Action<LogLevel, string>) Set the logger LogWriter public NetcodeSessionBuilder<TInput> WithLogWriter(Action<LogLevel, string> logAction) Parameters logAction Action<LogLevel, string> Returns NetcodeSessionBuilder<TInput> See Also Logger WithLogWriter<T>() Set the logger LogWriter public NetcodeSessionBuilder<TInput> WithLogWriter<T>() where T : ILogWriter, new() Returns NetcodeSessionBuilder<TInput> Type Parameters T See Also Logger WithMode(SessionMode) Set the SessionMode for the INetcodeSession<TInput> to be build. public NetcodeSessionBuilder<TInput> WithMode(SessionMode mode) Parameters mode SessionMode Returns NetcodeSessionBuilder<TInput> Defaults to Remote WithNetworkEndianness(bool) If useNetworkEndianness is true, sets the input serialization Endianness to BigEndian public NetcodeSessionBuilder<TInput> WithNetworkEndianness(bool useNetworkEndianness = true) Parameters useNetworkEndianness bool Returns NetcodeSessionBuilder<TInput> See Also Platform WithOptions(NetcodeOptions) Set INetcodeSession<TInput> options public NetcodeSessionBuilder<TInput> WithOptions(NetcodeOptions options) Parameters options NetcodeOptions Returns NetcodeSessionBuilder<TInput> See Also NetcodeOptions WithPackageStats(bool) Sets Protocol.NetworkPackageStatsEnabled option public NetcodeSessionBuilder<TInput> WithPackageStats(bool enabled = true) Parameters enabled bool Returns NetcodeSessionBuilder<TInput> WithPlayerCount(int) Sets the number of players for the INetcodeSession<TInput> public NetcodeSessionBuilder<TInput> WithPlayerCount(int count) Parameters count int Returns NetcodeSessionBuilder<TInput> Defaults to 2 WithPlayerStats(bool) Sets Protocol.CalculateRemotePlayerStats option public NetcodeSessionBuilder<TInput> WithPlayerStats(bool enabled = true) Parameters enabled bool Returns NetcodeSessionBuilder<TInput> See Also UpdateNetworkStats(NetcodePlayer) WithPlayers(params NetcodePlayer[]) Set the players for the INetcodeSession<TInput> public NetcodeSessionBuilder<TInput> WithPlayers(params NetcodePlayer[] players) Parameters players NetcodePlayer[] Returns NetcodeSessionBuilder<TInput> WithPlayers(IEnumerable<NetcodePlayer>) Set the players for the INetcodeSession<TInput> public NetcodeSessionBuilder<TInput> WithPlayers(IEnumerable<NetcodePlayer> players) Parameters players IEnumerable<NetcodePlayer> Returns NetcodeSessionBuilder<TInput> WithPort(int) Local Port for UDP connections public NetcodeSessionBuilder<TInput> WithPort(int port) Parameters port int Returns NetcodeSessionBuilder<TInput> Defaults to random port See Also UdpSocket WithReplayTestOptions(SessionReplayOptions<TInput>) Set replay session options. public NetcodeSessionBuilder<TInput> WithReplayTestOptions(SessionReplayOptions<TInput> options) Parameters options SessionReplayOptions<TInput> Returns NetcodeSessionBuilder<TInput> See Also SessionReplayOptions<TInput> WithRollbackCounterSmooth(float) Sets the update factor RollbackFramesSmoothFactor for RollbackFrames. public NetcodeSessionBuilder<TInput> WithRollbackCounterSmooth(float factor) Parameters factor float Returns NetcodeSessionBuilder<TInput> WithSaveStateCount(int) Value to override the total number of SavedFrame in state store. public NetcodeSessionBuilder<TInput> WithSaveStateCount(int count) Parameters count int Returns NetcodeSessionBuilder<TInput> Defaults to PredictionFrames + PredictionFramesOffset See Also IStateStore WithServices(ServicesConfig<TInput>) Set custom session services public NetcodeSessionBuilder<TInput> WithServices(ServicesConfig<TInput> services) Parameters services ServicesConfig<TInput> Returns NetcodeSessionBuilder<TInput> See Also ServicesConfig<TInput> WithSocketFactory(IPeerSocketFactory) Set the PeerSocketFactory public NetcodeSessionBuilder<TInput> WithSocketFactory(IPeerSocketFactory factory) Parameters factory IPeerSocketFactory Returns NetcodeSessionBuilder<TInput> WithSocketFactory(Func<int, NetcodeOptions, IPeerSocket>) Set the PeerSocketFactory public NetcodeSessionBuilder<TInput> WithSocketFactory(Func<int, NetcodeOptions, IPeerSocket> factory) Parameters factory Func<int, NetcodeOptions, IPeerSocket> Returns NetcodeSessionBuilder<TInput> WithSocketFactory<T>() Set the PeerSocketFactory public NetcodeSessionBuilder<TInput> WithSocketFactory<T>() where T : IPeerSocketFactory, new() Returns NetcodeSessionBuilder<TInput> Type Parameters T WithSpectatorOptions(SpectatorOptions) Set spectator session options. public NetcodeSessionBuilder<TInput> WithSpectatorOptions(SpectatorOptions options) Parameters options SpectatorOptions Returns NetcodeSessionBuilder<TInput> See Also SpectatorOptions WithStateSizeHint(int) Size hint in bytes for state serialization pre-allocation. public NetcodeSessionBuilder<TInput> WithStateSizeHint(int byteSize) Parameters byteSize int Returns NetcodeSessionBuilder<TInput> Defaults to 512 bytes WithStateStore(IStateStore) Set the StateStore public NetcodeSessionBuilder<TInput> WithStateStore(IStateStore writer) Parameters writer IStateStore Returns NetcodeSessionBuilder<TInput> WithStateStore<T>() Set the StateStore public NetcodeSessionBuilder<TInput> WithStateStore<T>() where T : IStateStore, new() Returns NetcodeSessionBuilder<TInput> Type Parameters T WithSyncTestOptions(SyncTestOptions<TInput>) Set sync test session options. public NetcodeSessionBuilder<TInput> WithSyncTestOptions(SyncTestOptions<TInput> options) Parameters options SyncTestOptions<TInput> Returns NetcodeSessionBuilder<TInput> See Also SyncTestOptions<TInput> See Also RollbackNetcode"
  },
  "api/Backdash.NetcodeSessionBuilder.InputTypeSelected-1.html": {
    "href": "api/Backdash.NetcodeSessionBuilder.InputTypeSelected-1.html",
    "title": "Class NetcodeSessionBuilder.InputTypeSelected<T> | Backdash Netcode",
    "summary": "Class NetcodeSessionBuilder.InputTypeSelected<T> Namespace Backdash Assembly Backdash.dll Selected input type for public sealed class NetcodeSessionBuilder.InputTypeSelected<T> where T : unmanaged Type Parameters T Inheritance object NetcodeSessionBuilder.InputTypeSelected<T> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode()"
  },
  "api/Backdash.NetcodeSessionBuilder.InputTypeSelector.html": {
    "href": "api/Backdash.NetcodeSessionBuilder.InputTypeSelector.html",
    "title": "Class NetcodeSessionBuilder.InputTypeSelector | Backdash Netcode",
    "summary": "Class NetcodeSessionBuilder.InputTypeSelector Namespace Backdash Assembly Backdash.dll Selector for INetcodeSession<TInput> input type public sealed class NetcodeSessionBuilder.InputTypeSelector Inheritance object NetcodeSessionBuilder.InputTypeSelector Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Custom<T>(IBinarySerializer<T>) Choose a custom type and serializer for the input type. public NetcodeSessionBuilder.InputTypeSelected<T> Custom<T>(IBinarySerializer<T> serializer) where T : unmanaged Parameters serializer IBinarySerializer<T> Returns NetcodeSessionBuilder.InputTypeSelected<T> Type Parameters T Enum<T>() Choose an Enum<T>() as INetcodeSession<TInput> input type public NetcodeSessionBuilder.InputTypeSelected<T> Enum<T>() where T : unmanaged, Enum Returns NetcodeSessionBuilder.InputTypeSelected<T> Type Parameters T Integer<T>() Choose an IBinaryInteger<TSelf> as INetcodeSession<TInput> input type public NetcodeSessionBuilder.InputTypeSelected<T> Integer<T>() where T : unmanaged, IBinaryInteger<T>, IMinMaxValue<T> Returns NetcodeSessionBuilder.InputTypeSelected<T> Type Parameters T Integer<T>(bool) Choose an IBinaryInteger<TSelf> as INetcodeSession<TInput> input type public NetcodeSessionBuilder.InputTypeSelected<T> Integer<T>(bool isUnsigned) where T : unmanaged, IBinaryInteger<T> Parameters isUnsigned bool Returns NetcodeSessionBuilder.InputTypeSelected<T> Type Parameters T Struct<T>() Choose a raw unmanaged value type as input type. Must not be a reference type or a value type that contains references. This DO NOT use custom Endianness for T integer fields. public NetcodeSessionBuilder.InputTypeSelected<T> Struct<T>() where T : unmanaged Returns NetcodeSessionBuilder.InputTypeSelected<T> Type Parameters T See Also IsReferenceOrContainsReferences<T>()"
  },
  "api/Backdash.NetcodeSessionBuilder.html": {
    "href": "api/Backdash.NetcodeSessionBuilder.html",
    "title": "Class NetcodeSessionBuilder | Backdash Netcode",
    "summary": "Class NetcodeSessionBuilder Namespace Backdash Assembly Backdash.dll Builder for INetcodeSession<TInput>. public sealed class NetcodeSessionBuilder Inheritance object NetcodeSessionBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors NetcodeSessionBuilder() public NetcodeSessionBuilder() Methods WithInputType<T>() Choose an Enum<T>() as INetcodeSession<TInput> input type public NetcodeSessionBuilder<T> WithInputType<T>() where T : unmanaged, Enum Returns NetcodeSessionBuilder<T> Type Parameters T WithInputType<T>(Func<InputTypeSelector, InputTypeSelected<T>>) Selector for INetcodeSession<TInput> input type public NetcodeSessionBuilder<T> WithInputType<T>(Func<NetcodeSessionBuilder.InputTypeSelector, NetcodeSessionBuilder.InputTypeSelected<T>> selector) where T : unmanaged Parameters selector Func<NetcodeSessionBuilder.InputTypeSelector, NetcodeSessionBuilder.InputTypeSelected<T>> Returns NetcodeSessionBuilder<T> Type Parameters T See Also RollbackNetcode"
  },
  "api/Backdash.Network.Client.IMessageHandler-1.html": {
    "href": "api/Backdash.Network.Client.IMessageHandler-1.html",
    "title": "Interface IMessageHandler<T> | Backdash Netcode",
    "summary": "Interface IMessageHandler<T> Namespace Backdash.Network.Client Assembly Backdash.dll Message sent handler. public interface IMessageHandler<T> where T : struct Type Parameters T Methods AfterSendMessage(int) Handles sent message. void AfterSendMessage(int bytesSent) Parameters bytesSent int BeforeSendMessage(ref T) Prepare message to be sent. void BeforeSendMessage(ref T message) Parameters message T"
  },
  "api/Backdash.Network.Client.IPeerSocket.html": {
    "href": "api/Backdash.Network.Client.IPeerSocket.html",
    "title": "Interface IPeerSocket | Backdash Netcode",
    "summary": "Interface IPeerSocket Namespace Backdash.Network.Client Assembly Backdash.dll Socket abstraction over peers public interface IPeerSocket : IDisposable Inherited Members IDisposable.Dispose() Properties AddressFamily AddressFamily AddressFamily { get; } Property Value AddressFamily Port Binding port int Port { get; } Property Value int Methods Close() void Close() ReceiveAsync(Memory<byte>, CancellationToken) Receives data and returns the endpoint of the sending host. ValueTask<SocketReceiveFromResult> ReceiveAsync(Memory<byte> buffer, CancellationToken cancellationToken) Parameters buffer Memory<byte> cancellationToken CancellationToken Returns ValueTask<SocketReceiveFromResult> ReceiveFromAsync(Memory<byte>, SocketAddress, CancellationToken) Receive bytes from specified remote host ValueTask<int> ReceiveFromAsync(Memory<byte> buffer, SocketAddress address, CancellationToken cancellationToken) Parameters buffer Memory<byte> address SocketAddress cancellationToken CancellationToken Returns ValueTask<int> SendToAsync(ReadOnlyMemory<byte>, EndPoint, CancellationToken) Sends data to the specified remote host. ValueTask<int> SendToAsync(ReadOnlyMemory<byte> buffer, EndPoint remoteEndPoint, CancellationToken cancellationToken) Parameters buffer ReadOnlyMemory<byte> remoteEndPoint EndPoint cancellationToken CancellationToken Returns ValueTask<int> SendToAsync(ReadOnlyMemory<byte>, SocketAddress, CancellationToken) Sends data to the specified remote host. ValueTask<int> SendToAsync(ReadOnlyMemory<byte> buffer, SocketAddress socketAddress, CancellationToken cancellationToken) Parameters buffer ReadOnlyMemory<byte> socketAddress SocketAddress cancellationToken CancellationToken Returns ValueTask<int> Update() Run synchronous update void Update()"
  },
  "api/Backdash.Network.Client.IPeerSocketFactory.html": {
    "href": "api/Backdash.Network.Client.IPeerSocketFactory.html",
    "title": "Interface IPeerSocketFactory | Backdash Netcode",
    "summary": "Interface IPeerSocketFactory Namespace Backdash.Network.Client Assembly Backdash.dll Factory for peer sockets public interface IPeerSocketFactory Methods Create(int, NetcodeOptions) Creates instance of IPeerSocket IPeerSocket Create(int port, NetcodeOptions options) Parameters port int options NetcodeOptions Returns IPeerSocket"
  },
  "api/Backdash.Network.Client.UdpSocket.html": {
    "href": "api/Backdash.Network.Client.UdpSocket.html",
    "title": "Class UdpSocket | Backdash Netcode",
    "summary": "Class UdpSocket Namespace Backdash.Network.Client Assembly Backdash.dll UDP specialized socket interface. public sealed class UdpSocket : IPeerSocket, IDisposable Inheritance object UdpSocket Implements IPeerSocket IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors UdpSocket(int, bool) public UdpSocket(int port, bool useIPv6 = false) Parameters port int useIPv6 bool UdpSocket(IPAddress, int) public UdpSocket(IPAddress bindAddress, int port) Parameters bindAddress IPAddress port int UdpSocket(IPEndPoint) Initialize and bind a new UdpSocket. public UdpSocket(IPEndPoint bindEndpoint) Parameters bindEndpoint IPEndPoint Local socket binding. Exceptions NetcodeException Throws if the AddressFamily of IPAddress in bindEndpoint is not InterNetwork or InterNetworkV6> UdpSocket(string, int, AddressFamily) public UdpSocket(string bindHost, int port, AddressFamily addressFamily = AddressFamily.InterNetwork) Parameters bindHost string port int addressFamily AddressFamily Fields IpAddressHeaderSize Size of the IP address header public const int IpAddressHeaderSize = 20 Field Value int UdpHeaderSize Size of the UDP package header public const int UdpHeaderSize = 8 Field Value int Properties AddressFamily public AddressFamily AddressFamily { get; } Property Value AddressFamily Port Gets the main bind port of the Socket. public int Port { get; } Property Value int Methods Close() public void Close() Dispose() public void Dispose() GetDnsIpAddress(string, AddressFamily) Returns the Internet Protocol (IP) addresses for the specified host and AddressFamily. public static IPAddress GetDnsIpAddress(string host, AddressFamily addressFamily = AddressFamily.InterNetwork) Parameters host string addressFamily AddressFamily Returns IPAddress Exceptions NetcodeException ReceiveAsync(Memory<byte>, CancellationToken) Receives data and returns the endpoint of the sending host. public ValueTask<SocketReceiveFromResult> ReceiveAsync(Memory<byte> buffer, CancellationToken cancellationToken) Parameters buffer Memory<byte> The buffer for the received data. cancellationToken CancellationToken A cancellation token that can be used to signal the asynchronous operation should be canceled. Returns ValueTask<SocketReceiveFromResult> An asynchronous task that completes with a SocketReceiveFromResult containing the number of bytes received and the endpoint of the sending host. ReceiveFromAsync(Memory<byte>, SocketAddress, CancellationToken) Receives a datagram into the data buffer, using the specified SocketFlags, and stores the endpoint. public ValueTask<int> ReceiveFromAsync(Memory<byte> buffer, SocketAddress address, CancellationToken cancellationToken) Parameters buffer Memory<byte> The buffer for the received data. address SocketAddress A SocketAddress instance that gets updated with the value of the remote peer when this method returns. cancellationToken CancellationToken A cancellation token that can be used to signal the asynchronous operation should be canceled. Returns ValueTask<int> An asynchronous task that completes with a SocketReceiveFromResult containing the number of bytes received and the endpoint of the sending host. SendToAsync(ReadOnlyMemory<byte>, EndPoint, CancellationToken) Sends data to the specified remote host. public ValueTask<int> SendToAsync(ReadOnlyMemory<byte> buffer, EndPoint remoteEndPoint, CancellationToken cancellationToken) Parameters buffer ReadOnlyMemory<byte> The buffer for the data to send. remoteEndPoint EndPoint The remote host to which to send the data. cancellationToken CancellationToken A cancellation token that can be used to cancel the asynchronous operation. Returns ValueTask<int> An asynchronous task that completes with the number of bytes sent. SendToAsync(ReadOnlyMemory<byte>, SocketAddress, CancellationToken) Sends data to the specified remote host. public ValueTask<int> SendToAsync(ReadOnlyMemory<byte> buffer, SocketAddress socketAddress, CancellationToken cancellationToken) Parameters buffer ReadOnlyMemory<byte> The buffer for the data to send. socketAddress SocketAddress The remote host to which to send the data. cancellationToken CancellationToken A cancellation token that can be used to cancel the asynchronous operation. Returns ValueTask<int> An asynchronous task that completes with the number of bytes sent."
  },
  "api/Backdash.Network.Client.html": {
    "href": "api/Backdash.Network.Client.html",
    "title": "Namespace Backdash.Network.Client | Backdash Netcode",
    "summary": "Namespace Backdash.Network.Client Classes UdpSocket UDP specialized socket interface. Interfaces IMessageHandler<T> Message sent handler. IPeerSocket Socket abstraction over peers IPeerSocketFactory Factory for peer sockets"
  },
  "api/Backdash.Network.DelayStrategy.html": {
    "href": "api/Backdash.Network.DelayStrategy.html",
    "title": "Enum DelayStrategy | Backdash Netcode",
    "summary": "Enum DelayStrategy Namespace Backdash.Network Assembly Backdash.dll Jitter delay strategy public enum DelayStrategy Fields Constant = 0 Constant delay ContinuousUniform = 2 Random continuous delay Gaussian = 1 Random gaussian delay"
  },
  "api/Backdash.Network.Endianness.html": {
    "href": "api/Backdash.Network.Endianness.html",
    "title": "Enum Endianness | Backdash Netcode",
    "summary": "Enum Endianness Namespace Backdash.Network Assembly Backdash.dll Defines a endianness value public enum Endianness : byte Fields BigEndian = 1 Big endian byte order LittleEndian = 0 Little endian byte order"
  },
  "api/Backdash.Network.NetUtils.html": {
    "href": "api/Backdash.Network.NetUtils.html",
    "title": "Class NetUtils | Backdash Netcode",
    "summary": "Class NetUtils Namespace Backdash.Network Assembly Backdash.dll Network utilities public static class NetUtils Inheritance object NetUtils Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods FindFreePort() Finds a free TCP port. public static int FindFreePort() Returns int"
  },
  "api/Backdash.Network.Platform.html": {
    "href": "api/Backdash.Network.Platform.html",
    "title": "Class Platform | Backdash Netcode",
    "summary": "Class Platform Namespace Backdash.Network Assembly Backdash.dll Platform Info public static class Platform Inheritance object Platform Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Fields Endianness Current Endianness public static readonly Endianness Endianness Field Value Endianness Methods GetNetworkEndianness(bool) Get Endianness for Network. If network is True, returns BigEndian. Otherwise, returns the current platform endianness, same as Platform. Endianness public static Endianness GetNetworkEndianness(bool network) Parameters network bool Returns Endianness"
  },
  "api/Backdash.Network.PlayerConnectionStatus.html": {
    "href": "api/Backdash.Network.PlayerConnectionStatus.html",
    "title": "Enum PlayerConnectionStatus | Backdash Netcode",
    "summary": "Enum PlayerConnectionStatus Namespace Backdash.Network Assembly Backdash.dll Player Connection Status public enum PlayerConnectionStatus : sbyte Fields Connected = 2 Connected remote player Disconnected = 3 Disconnected remote player Local = 0 Local player Syncing = 1 Syncing remote player Unknown = -1 Unknown or invalid player status"
  },
  "api/Backdash.Network.html": {
    "href": "api/Backdash.Network.html",
    "title": "Namespace Backdash.Network | Backdash Netcode",
    "summary": "Namespace Backdash.Network Classes NetUtils Network utilities Platform Platform Info Enums DelayStrategy Jitter delay strategy Endianness Defines a endianness value PlayerConnectionStatus Player Connection Status"
  },
  "api/Backdash.Options.INetcodePlugin.html": {
    "href": "api/Backdash.Options.INetcodePlugin.html",
    "title": "Interface INetcodePlugin | Backdash Netcode",
    "summary": "Interface INetcodePlugin Namespace Backdash.Options Assembly Backdash.dll Netcode plugin to hook into the session lifetime public interface INetcodePlugin : IDisposable Inherited Members IDisposable.Dispose() Methods OnEndpointAdded(INetcodeSession, EndPoint, NetcodePlayer) Start endpoint hook void OnEndpointAdded(INetcodeSession session, EndPoint endpoint, NetcodePlayer player) Parameters session INetcodeSession endpoint EndPoint player NetcodePlayer OnEndpointClosed(INetcodeSession, EndPoint, NetcodePlayer) Close endpoint hook void OnEndpointClosed(INetcodeSession session, EndPoint endpoint, NetcodePlayer player) Parameters session INetcodeSession endpoint EndPoint player NetcodePlayer OnFrameBegin(INetcodeSession, bool) Beginning of a frame hook void OnFrameBegin(INetcodeSession session, bool isSynchronizing) Parameters session INetcodeSession isSynchronizing bool OnSessionClose(INetcodeSession) Session close hook void OnSessionClose(INetcodeSession session) Parameters session INetcodeSession OnSessionStart(INetcodeSession) Session start hook void OnSessionStart(INetcodeSession session) Parameters session INetcodeSession"
  },
  "api/Backdash.Options.LoggerOptions.html": {
    "href": "api/Backdash.Options.LoggerOptions.html",
    "title": "Class LoggerOptions | Backdash Netcode",
    "summary": "Class LoggerOptions Namespace Backdash.Options Assembly Backdash.dll Specifies options common to logging. public sealed record LoggerOptions : IEquatable<LoggerOptions> Inheritance object LoggerOptions Implements IEquatable<LoggerOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors LoggerOptions(LogLevel) Specifies options common to logging. public LoggerOptions(LogLevel level = LogLevel.Warning) Parameters level LogLevel EnabledLevel value Properties AppendLevel Gets or sets a value indicating whether level name should be prepended to logs. Defaults to true public bool AppendLevel { get; set; } Property Value bool AppendThreadId Gets or sets a value indicating whether thread id should be prepended to logs. Defaults to false public bool AppendThreadId { get; set; } Property Value bool AppendTimestamps Gets or sets a value indicating whether timestamps should be prepended to logs. Defaults to true public bool AppendTimestamps { get; set; } Property Value bool EnabledLevel Gets or sets the enabled LogLevel. public LogLevel EnabledLevel { get; set; } Property Value LogLevel TimestampFormat Gets or sets a value indicating whether the format for log timestamps. Defaults to \"mm:ss.fff\" public string TimestampFormat { get; set; } Property Value string Methods Equals(LoggerOptions?) public bool Equals(LoggerOptions? other) Parameters other LoggerOptions Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int RawLogs() Output text logs only public LoggerOptions RawLogs() Returns LoggerOptions ToString() public override string ToString() Returns string Operators operator ==(LoggerOptions?, LoggerOptions?) public static bool operator ==(LoggerOptions? left, LoggerOptions? right) Parameters left LoggerOptions right LoggerOptions Returns bool operator !=(LoggerOptions?, LoggerOptions?) public static bool operator !=(LoggerOptions? left, LoggerOptions? right) Parameters left LoggerOptions right LoggerOptions Returns bool"
  },
  "api/Backdash.Options.NetcodeOptions.html": {
    "href": "api/Backdash.Options.NetcodeOptions.html",
    "title": "Class NetcodeOptions | Backdash Netcode",
    "summary": "Class NetcodeOptions Namespace Backdash.Options Assembly Backdash.dll Configurations for sessions. public sealed record NetcodeOptions : IEquatable<NetcodeOptions> Inheritance object NetcodeOptions Implements IEquatable<NetcodeOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors NetcodeOptions() public NetcodeOptions() Properties DeterministicRandomInitialSeed Initial seed for DeterministicRandom public uint DeterministicRandomInitialSeed { get; set; } Property Value uint Defaults to 0 FrameRate Base frame rate used to estimate fairness (frame advantage) over peers. Default FPS(frames per second) 60 public int FrameRate { get; set; } Property Value int See Also FrameTime InputDelayFrames Amount of frames to delay local input. public int InputDelayFrames { get; set; } Property Value int Defaults to 2 InputQueueLength Max length for player input queues. public int InputQueueLength { get; set; } Property Value int Defaults to 128 LocalPort Local Port for UDP connections public int LocalPort { get; set; } Property Value int Defaults to random port See Also UdpSocket Logger Logging options. public LoggerOptions Logger { get; set; } Property Value LoggerOptions See Also LoggerOptions Meta Custom meta data Useful for INetcodePlugin implementations public Dictionary<string, object> Meta { get; } Property Value Dictionary<string, object> NumberOfPlayers Number of players Can not be greater than Backdash.Core.Max.NumberOfPlayers public int NumberOfPlayers { get; set; } Property Value int Defaults to 2 PredictionFrames Max allowed prediction frames. public int PredictionFrames { get; set; } Property Value int Defaults to 16 See Also PredictionThreshold PredictionFramesOffset Value to be incremented on PredictionFrames in state store. public int PredictionFramesOffset { get; set; } Property Value int Defaults to 2 See Also Initialize(int) IStateStore Protocol Networking Protocol options. public ProtocolOptions Protocol { get; set; } Property Value ProtocolOptions See Also ProtocolOptions RecommendationInterval Interval for time synchronization notifications. public int RecommendationInterval { get; set; } Property Value int Defaults to 240 milliseconds See Also TimeSync TimeSyncOptions RollbackFramesSmoothFactor Smooth factor for session rollback frames counter. public float RollbackFramesSmoothFactor { get; set; } Property Value float Defaults to 0.2f See Also RollbackFrames SaveStateCount Value to override the total number of SavedFrame in state store. public int SaveStateCount { get; set; } Property Value int Defaults to PredictionFrames + PredictionFramesOffset See Also IStateStore SpectatorInputBufferLength Max length for spectators input queues. public int SpectatorInputBufferLength { get; set; } Property Value int Defaults to InputQueueLength StateSerializationEndianness Sets the Endianness used for state serialization. If null, use the same endianness as ProtocolOptions. SerializationEndianness will be used. public Endianness? StateSerializationEndianness { get; set; } Property Value Endianness? Defaults to LittleEndian See Also Platform StateSizeHint Size hint in bytes for state serialization pre-allocation. public int StateSizeHint { get; set; } Property Value int Defaults to 512 bytes TimeSync Time synchronization options. public TimeSyncOptions TimeSync { get; set; } Property Value TimeSyncOptions See Also TimeSyncOptions UseBackgroundThread Run jobs in a separated thread. public bool UseBackgroundThread { get; set; } Property Value bool Defaults to true UseIPv6 Config UdpSocket to use IPv6. public bool UseIPv6 { get; set; } Property Value bool Defaults to false Methods Equals(NetcodeOptions?) public bool Equals(NetcodeOptions? other) Parameters other NetcodeOptions Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(NetcodeOptions?, NetcodeOptions?) public static bool operator ==(NetcodeOptions? left, NetcodeOptions? right) Parameters left NetcodeOptions right NetcodeOptions Returns bool operator !=(NetcodeOptions?, NetcodeOptions?) public static bool operator !=(NetcodeOptions? left, NetcodeOptions? right) Parameters left NetcodeOptions right NetcodeOptions Returns bool See Also RollbackNetcode INetcodeSession<TInput>"
  },
  "api/Backdash.Options.ProtocolOptions.html": {
    "href": "api/Backdash.Options.ProtocolOptions.html",
    "title": "Class ProtocolOptions | Backdash Netcode",
    "summary": "Class ProtocolOptions Namespace Backdash.Options Assembly Backdash.dll Network protocol configuration. public sealed record ProtocolOptions : IEquatable<ProtocolOptions> Inheritance object ProtocolOptions Implements IEquatable<ProtocolOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ProtocolOptions() public ProtocolOptions() Properties CalculateRemotePlayerStats When true, the session will calculate the remote player stats on each frame. public bool CalculateRemotePlayerStats { get; set; } Property Value bool Defaults to See Also NetworkStats NetworkPackageStatsEnabled UpdateNetworkStats(NetcodePlayer) ConsistencyCheckDistance Offset to be applied to frame on checksum consistency check. The frame sent is (LastReceivedFrame - ConsistencyCheckOffset). public int ConsistencyCheckDistance { get; set; } Property Value int Defaults to 8 See Also ConsistencyCheckTimeout ConsistencyCheckInterval ConsistencyCheckEnabled Enable/Disable consistency check. public bool ConsistencyCheckEnabled { get; set; } Property Value bool See Also ConsistencyCheckDistance ConsistencyCheckTimeout ConsistencyCheckInterval The time to wait before send next consistency check (0 to disable). On each interval one peer requests a frame to other peer which must respond with the state checksum of that frame. public TimeSpan ConsistencyCheckInterval { get; set; } Property Value TimeSpan Defaults to 3_000 milliseconds See Also ConsistencyCheckDistance ConsistencyCheckTimeout ConsistencyCheckTimeout Max wait time for non-success consistency checks (0 to disable). public TimeSpan ConsistencyCheckTimeout { get; set; } Property Value TimeSpan Defaults to 10_000 milliseconds See Also ConsistencyCheckDistance ConsistencyCheckInterval DelayStrategy Strategy for applying delay to sending packages, forcing latency. When NetworkLatency is Zero this is ignored. public DelayStrategy DelayStrategy { get; set; } Property Value DelayStrategy Defaults to Gaussian See Also NetworkLatency DelayStrategy DisconnectNotifyStart The time to wait before the first ConnectionInterrupted timeout will be sent. public TimeSpan DisconnectNotifyStart { get; set; } Property Value TimeSpan Defaults to 750 milliseconds DisconnectTimeout The session will automatically disconnect from a remote peer if it has not received a packet in the timeout window. You will be notified of the disconnect via Disconnected event. public TimeSpan DisconnectTimeout { get; set; } Property Value TimeSpan Defaults to 5_000 milliseconds DisconnectTimeoutEnabled Enable or disable the disconnect timeout check DisconnectTimeout public bool DisconnectTimeoutEnabled { get; set; } Property Value bool Defaults to true KeepAliveInterval When the time from the last send package until now is greater than this, sends a keep alive packets. public TimeSpan KeepAliveInterval { get; set; } Property Value TimeSpan Defaults to 200 milliseconds MaxPackageQueue Max allowed pending UDP output messages. When reached removes and ignores the oldest package in the queue in order to make room for the new package. public int MaxPackageQueue { get; set; } Property Value int Defaults to 64 MaxPendingInputs Max allowed pending inputs in sending queue. When reached AddLocalInput(NetcodePlayer, in TInput) will return InputDropped. public int MaxPendingInputs { get; set; } Property Value int Defaults to 64 MaxSequenceDistance Distance to check out-of-order packets. public int MaxSequenceDistance { get; set; } Property Value int Defaults to 32_768 MaxSyncRetries Total number of synchronization request retries. When reached, session will dispatch the SynchronizationFailure event. public int MaxSyncRetries { get; set; } Property Value int Defaults to 64 NetworkLatency Forced network packet sending latency for the current peer. This value is processed using DelayStrategy. public TimeSpan NetworkLatency { get; set; } Property Value TimeSpan Defaults to Zero See Also DelayStrategy NetworkPackageStatsEnabled When true, session will use calculate packages stats. public bool NetworkPackageStatsEnabled { get; set; } Property Value bool Defaults to See Also NetworkPackageStatsInterval PeerNetworkStats.PackagesInfo Send Received NetworkPackageStatsInterval The time to wait before recalculate network statistics. public TimeSpan NetworkPackageStatsInterval { get; set; } Property Value TimeSpan Defaults to 1000 milliseconds See Also PeerNetworkStats NetworkPackageStatsEnabled NumberOfSyncRoundTrips Number of synchronization roundtrips to consider two clients synchronized. public int NumberOfSyncRoundTrips { get; set; } Property Value int Defaults to 10 QualityReportInterval The time to wait before send the next quality report package (determines ping). public TimeSpan QualityReportInterval { get; set; } Property Value TimeSpan Defaults to 1000 milliseconds ReceiveSocketAddressSize Custom receive socket address size public int ReceiveSocketAddressSize { get; set; } Property Value int ResendInputInterval When the time from the last send input until now is greater than this, resends pending inputs. public TimeSpan ResendInputInterval { get; set; } Property Value TimeSpan Defaults to 200 milliseconds SerializationEndianness Sets the Endianness used for network communication. public Endianness SerializationEndianness { get; set; } Property Value Endianness Defaults to BigEndian See Also Platform ShutdownTime The time to wait before end the session. public TimeSpan ShutdownTime { get; set; } Property Value TimeSpan Defaults to 100 milliseconds SyncFirstRetryInterval The time to wait before resend the first synchronization request retry. public TimeSpan SyncFirstRetryInterval { get; set; } Property Value TimeSpan Defaults to 500 milliseconds See Also SyncRetryInterval SyncRetryInterval The time to wait before resend synchronization retries after the first. public TimeSpan SyncRetryInterval { get; set; } Property Value TimeSpan Defaults to 1000 milliseconds See Also SyncFirstRetryInterval UdpPacketBufferSize Number of bytes used on the UdpSocket message buffer. public int UdpPacketBufferSize { get; set; } Property Value int Defaults to (NumberOfPlayers * Backdash.Core.Max.CompressedBytes * 2) Methods Equals(ProtocolOptions?) public bool Equals(ProtocolOptions? other) Parameters other ProtocolOptions Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(ProtocolOptions?, ProtocolOptions?) public static bool operator ==(ProtocolOptions? left, ProtocolOptions? right) Parameters left ProtocolOptions right ProtocolOptions Returns bool operator !=(ProtocolOptions?, ProtocolOptions?) public static bool operator !=(ProtocolOptions? left, ProtocolOptions? right) Parameters left ProtocolOptions right ProtocolOptions Returns bool"
  },
  "api/Backdash.Options.ServicesConfig-1.html": {
    "href": "api/Backdash.Options.ServicesConfig-1.html",
    "title": "Class ServicesConfig<TInput> | Backdash Netcode",
    "summary": "Class ServicesConfig<TInput> Namespace Backdash.Options Assembly Backdash.dll Session dependencies. public sealed class ServicesConfig<TInput> where TInput : unmanaged Type Parameters TInput Input type Inheritance object ServicesConfig<TInput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ServicesConfig() public ServicesConfig() Properties ChecksumProvider Checksum provider service for session state. Defaults to: Fletcher32 Fletcher32ChecksumProvider public IChecksumProvider? ChecksumProvider { get; set; } Property Value IChecksumProvider DeterministicRandom Service for in-game random value generation in session Defaults to XorShiftRandom<TInput> public IDeterministicRandom<TInput>? DeterministicRandom { get; set; } Property Value IDeterministicRandom<TInput> InputComparer Comparer to be used with TInput public EqualityComparer<TInput>? InputComparer { get; set; } Property Value EqualityComparer<TInput> InputListener Service to listen for confirmed inputs public IInputListener<TInput>? InputListener { get; set; } Property Value IInputListener<TInput> Jobs Custom netcode background jobs public HashSet<INetcodeJob> Jobs { get; set; } Property Value HashSet<INetcodeJob> LogWriter Log writer service for session. public ILogWriter? LogWriter { get; set; } Property Value ILogWriter PeerSocketFactory State store service for session. public IPeerSocketFactory? PeerSocketFactory { get; set; } Property Value IPeerSocketFactory Plugin Custom netcode plugin public INetcodePlugin? Plugin { get; set; } Property Value INetcodePlugin Random Default internal random instance public Random? Random { get; set; } Property Value Random SessionHandler Defines the callback functions that your application must implement. Backdash will periodically call these functions during the session lifecycle. public INetcodeSessionHandler? SessionHandler { get; set; } Property Value INetcodeSessionHandler StateStore State store service for session. public IStateStore? StateStore { get; set; } Property Value IStateStore"
  },
  "api/Backdash.Options.SessionReplayOptions-1.html": {
    "href": "api/Backdash.Options.SessionReplayOptions-1.html",
    "title": "Class SessionReplayOptions<TInput> | Backdash Netcode",
    "summary": "Class SessionReplayOptions<TInput> Namespace Backdash.Options Assembly Backdash.dll Configurations for INetcodeSession<TInput> in Replay mode. public sealed record SessionReplayOptions<TInput> : IEquatable<SessionReplayOptions<TInput>> where TInput : unmanaged Type Parameters TInput Inheritance object SessionReplayOptions<TInput> Implements IEquatable<SessionReplayOptions<TInput>> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors SessionReplayOptions() public SessionReplayOptions() Properties InputList Inputs to be replayed public IReadOnlyList<ConfirmedInputs<TInput>> InputList { get; set; } Property Value IReadOnlyList<ConfirmedInputs<TInput>> ReplayController Controller for replay session. public SessionReplayControl? ReplayController { get; set; } Property Value SessionReplayControl Methods Equals(SessionReplayOptions<TInput>?) public bool Equals(SessionReplayOptions<TInput>? other) Parameters other SessionReplayOptions<TInput> Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(SessionReplayOptions<TInput>?, SessionReplayOptions<TInput>?) public static bool operator ==(SessionReplayOptions<TInput>? left, SessionReplayOptions<TInput>? right) Parameters left SessionReplayOptions<TInput> right SessionReplayOptions<TInput> Returns bool operator !=(SessionReplayOptions<TInput>?, SessionReplayOptions<TInput>?) public static bool operator !=(SessionReplayOptions<TInput>? left, SessionReplayOptions<TInput>? right) Parameters left SessionReplayOptions<TInput> right SessionReplayOptions<TInput> Returns bool"
  },
  "api/Backdash.Options.SpectatorOptions.html": {
    "href": "api/Backdash.Options.SpectatorOptions.html",
    "title": "Class SpectatorOptions | Backdash Netcode",
    "summary": "Class SpectatorOptions Namespace Backdash.Options Assembly Backdash.dll Configurations for INetcodeSession<TInput> in Spectator mode. public sealed record SpectatorOptions : IEquatable<SpectatorOptions> Inheritance object SpectatorOptions Implements IEquatable<SpectatorOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors SpectatorOptions() public SpectatorOptions() Properties HostAddress Host endpoint IP Address public IPAddress HostAddress { get; set; } Property Value IPAddress Defaults to Loopback HostEndPoint Host endpoint public EndPoint? HostEndPoint { get; set; } Property Value EndPoint Defaults to IPEndPoint using HostAddress and HostPort HostPort Host endpoint port public int HostPort { get; set; } Property Value int Defaults to 9000 Methods Equals(SpectatorOptions?) public bool Equals(SpectatorOptions? other) Parameters other SpectatorOptions Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(SpectatorOptions?, SpectatorOptions?) public static bool operator ==(SpectatorOptions? left, SpectatorOptions? right) Parameters left SpectatorOptions right SpectatorOptions Returns bool operator !=(SpectatorOptions?, SpectatorOptions?) public static bool operator !=(SpectatorOptions? left, SpectatorOptions? right) Parameters left SpectatorOptions right SpectatorOptions Returns bool"
  },
  "api/Backdash.Options.SyncTestOptions-1.html": {
    "href": "api/Backdash.Options.SyncTestOptions-1.html",
    "title": "Class SyncTestOptions<TInput> | Backdash Netcode",
    "summary": "Class SyncTestOptions<TInput> Namespace Backdash.Options Assembly Backdash.dll Configurations for INetcodeSession<TInput> in SyncTest mode. public sealed record SyncTestOptions<TInput> : IEquatable<SyncTestOptions<TInput>> where TInput : unmanaged Type Parameters TInput Inheritance object SyncTestOptions<TInput> Implements IEquatable<SyncTestOptions<TInput>> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors SyncTestOptions() public SyncTestOptions() Properties CheckDistanceFrames Total forced rollback frames. public int CheckDistanceFrames { get; set; } Property Value int Defaults to 1 DesyncHandler Sets desync handler for SyncTest sessions. Useful for showing smart state diff. public IStateDesyncHandler? DesyncHandler { get; set; } Property Value IStateDesyncHandler InputProvider Input generator service for session. public IInputProvider<TInput>? InputProvider { get; set; } Property Value IInputProvider<TInput> LogStateOnDesync If true, log state string on desync public bool LogStateOnDesync { get; set; } Property Value bool StateStringParser Sets desync handler for SyncTest sessions. Useful for showing smart state diff. public IStateStringParser? StateStringParser { get; set; } Property Value IStateStringParser ThrowOnDesync If true, throws on state de-synchronization. public bool ThrowOnDesync { get; set; } Property Value bool Methods CheckDistance(int) Total forced rollback frames. public SyncTestOptions<TInput> CheckDistance(int frames) Parameters frames int Returns SyncTestOptions<TInput> Defaults to 1 Equals(SyncTestOptions<TInput>?) public bool Equals(SyncTestOptions<TInput>? other) Parameters other SyncTestOptions<TInput> Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int LogState(bool) If true, log state string on desync public SyncTestOptions<TInput> LogState(bool enabled = true) Parameters enabled bool Returns SyncTestOptions<TInput> ThrowError(bool) If true, throws on state de-synchronization. public SyncTestOptions<TInput> ThrowError(bool enabled = true) Parameters enabled bool Returns SyncTestOptions<TInput> ToString() public override string ToString() Returns string UseDesyncHandler<T>() Sets desync handler for SyncTest sessions. Useful for showing smart state diff. public SyncTestOptions<TInput> UseDesyncHandler<T>() where T : IStateDesyncHandler, new() Returns SyncTestOptions<TInput> Type Parameters T UseInputProvider<T>() Input generator service for session. public SyncTestOptions<TInput> UseInputProvider<T>() where T : IInputProvider<TInput>, new() Returns SyncTestOptions<TInput> Type Parameters T UseJsonStateParser(JsonSerializerOptions?) Use JsonStateStringParser as state viewer. public SyncTestOptions<TInput> UseJsonStateParser(JsonSerializerOptions? options = null) Parameters options JsonSerializerOptions Returns SyncTestOptions<TInput> UseRandomInputProvider() Use RandomInputProvider<TInput> as input provider. public SyncTestOptions<TInput> UseRandomInputProvider() Returns SyncTestOptions<TInput> See Also InputProvider UseStateStringParser<T>() Sets desync handler for SyncTest sessions. Useful for showing smart state diff. public SyncTestOptions<TInput> UseStateStringParser<T>() where T : IStateStringParser, new() Returns SyncTestOptions<TInput> Type Parameters T Operators operator ==(SyncTestOptions<TInput>?, SyncTestOptions<TInput>?) public static bool operator ==(SyncTestOptions<TInput>? left, SyncTestOptions<TInput>? right) Parameters left SyncTestOptions<TInput> right SyncTestOptions<TInput> Returns bool operator !=(SyncTestOptions<TInput>?, SyncTestOptions<TInput>?) public static bool operator !=(SyncTestOptions<TInput>? left, SyncTestOptions<TInput>? right) Parameters left SyncTestOptions<TInput> right SyncTestOptions<TInput> Returns bool"
  },
  "api/Backdash.Options.TimeSyncOptions.html": {
    "href": "api/Backdash.Options.TimeSyncOptions.html",
    "title": "Class TimeSyncOptions | Backdash Netcode",
    "summary": "Class TimeSyncOptions Namespace Backdash.Options Assembly Backdash.dll Time Synchronization options. public sealed record TimeSyncOptions : IEquatable<TimeSyncOptions> Inheritance object TimeSyncOptions Implements IEquatable<TimeSyncOptions> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors TimeSyncOptions() public TimeSyncOptions() Properties FrameWindowSize Number of frames used for time synchronization. public int FrameWindowSize { get; set; } Property Value int Defaults to 40 MaxFrameAdvantage Max sync recommendation frames. public int MaxFrameAdvantage { get; set; } Property Value int Defaults to 9 MinFrameAdvantage Minimum required advantage to recommend synchronization. Some things just aren't worth correcting for, make sure the difference is relevant before proceeding. public int MinFrameAdvantage { get; set; } Property Value int Defaults to 3 MinUniqueFrames Number of unique frames. public int MinUniqueFrames { get; set; } Property Value int Defaults to 10 RequireIdleInput Make sure our input had been \"idle enough\" before recommending a sleep. This tries to make the emulator sleep while the user's input isn't sweeping in arcs (e.g. fireball motions in Street Fighter), which could cause the player to miss moves. public bool RequireIdleInput { get; set; } Property Value bool Defaults to false Methods Equals(TimeSyncOptions?) public bool Equals(TimeSyncOptions? other) Parameters other TimeSyncOptions Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(TimeSyncOptions?, TimeSyncOptions?) public static bool operator ==(TimeSyncOptions? left, TimeSyncOptions? right) Parameters left TimeSyncOptions right TimeSyncOptions Returns bool operator !=(TimeSyncOptions?, TimeSyncOptions?) public static bool operator !=(TimeSyncOptions? left, TimeSyncOptions? right) Parameters left TimeSyncOptions right TimeSyncOptions Returns bool"
  },
  "api/Backdash.Options.html": {
    "href": "api/Backdash.Options.html",
    "title": "Namespace Backdash.Options | Backdash Netcode",
    "summary": "Namespace Backdash.Options Classes LoggerOptions Specifies options common to logging. NetcodeOptions Configurations for sessions. ProtocolOptions Network protocol configuration. ServicesConfig<TInput> Session dependencies. SessionReplayOptions<TInput> Configurations for INetcodeSession<TInput> in Replay mode. SpectatorOptions Configurations for INetcodeSession<TInput> in Spectator mode. SyncTestOptions<TInput> Configurations for INetcodeSession<TInput> in SyncTest mode. TimeSyncOptions Time Synchronization options. Interfaces INetcodePlugin Netcode plugin to hook into the session lifetime"
  },
  "api/Backdash.PeerEvent.html": {
    "href": "api/Backdash.PeerEvent.html",
    "title": "Enum PeerEvent | Backdash Netcode",
    "summary": "Enum PeerEvent Namespace Backdash Assembly Backdash.dll Peer event type public enum PeerEvent : sbyte Fields Connected = 0 Handshake with the game running on the other side of the network has been completed. ConnectionInterrupted = 5 The network connection on the other end is not responding for DisconnectNotifyStart. The DisconnectTimeout field in the SynchronizingEventInfo struct of the ConnectionInterrupted object contains the current connection timeout which is the difference between DisconnectTimeout and DisconnectNotifyStart. ConnectionResumed = 6 The network connection on the other end of the network not responding for DisconnectNotifyStart. Disconnected = 4 The network connection on the other end of the network has closed. SynchronizationFailure = 3 The synchronization with this peer has fail. Synchronized = 2 The synchronization with this peer has finished. Synchronizing = 1 Beginning the synchronization process with the client on the other end of the networking. The TotalSteps and CurrentStep fields in the SynchronizingEventInfo struct of the Synchronizing object indicate the progress."
  },
  "api/Backdash.PeerEventInfo.html": {
    "href": "api/Backdash.PeerEventInfo.html",
    "title": "Struct PeerEventInfo | Backdash Netcode",
    "summary": "Struct PeerEventInfo Namespace Backdash Assembly Backdash.dll Data structure for PeerEventInfo notifications. OnPeerEvent(NetcodePlayer, PeerEventInfo) public readonly struct PeerEventInfo : IUtf8SpanFormattable Implements IUtf8SpanFormattable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors PeerEventInfo(PeerEvent) Data structure for PeerEventInfo notifications. OnPeerEvent(NetcodePlayer, PeerEventInfo) public PeerEventInfo(PeerEvent type) Parameters type PeerEvent Event notification type Properties ConnectionInterrupted Data for ConnectionInterrupted event. public ConnectionInterruptedEventInfo ConnectionInterrupted { get; init; } Property Value ConnectionInterruptedEventInfo Synchronized Data for Synchronized event. public SynchronizedEventInfo Synchronized { get; init; } Property Value SynchronizedEventInfo Synchronizing Data for Synchronizing event. public SynchronizingEventInfo Synchronizing { get; init; } Property Value SynchronizingEventInfo Type Event type. public PeerEvent Type { get; } Property Value PeerEvent Methods ToString() public override string ToString() Returns string TryFormat(Span<byte>, out int, ReadOnlySpan<char>, IFormatProvider?) public bool TryFormat(Span<byte> utf8Destination, out int bytesWritten, ReadOnlySpan<char> format, IFormatProvider? provider) Parameters utf8Destination Span<byte> bytesWritten int format ReadOnlySpan<char> provider IFormatProvider Returns bool"
  },
  "api/Backdash.PeerNetworkStats.PackagesInfo.html": {
    "href": "api/Backdash.PeerNetworkStats.PackagesInfo.html",
    "title": "Class PeerNetworkStats.PackagesInfo | Backdash Netcode",
    "summary": "Class PeerNetworkStats.PackagesInfo Namespace Backdash Assembly Backdash.dll Hold package traffic data public sealed class PeerNetworkStats.PackagesInfo Inheritance object PeerNetworkStats.PackagesInfo Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PackagesInfo() public PackagesInfo() Properties Bandwidth Total used bandwidth public ByteSize Bandwidth { get; } Property Value ByteSize Count Number of packages public int Count { get; } Property Value int LastFrame Last package frame public Frame LastFrame { get; } Property Value Frame LastTime Last package time public TimeSpan LastTime { get; } Property Value TimeSpan PackagesPerSecond Packages per second public float PackagesPerSecond { get; } Property Value float TotalBytes Total transferred bytes public ByteSize TotalBytes { get; } Property Value ByteSize Methods Reset() Reset all values to default public void Reset()"
  },
  "api/Backdash.PeerNetworkStats.html": {
    "href": "api/Backdash.PeerNetworkStats.html",
    "title": "Class PeerNetworkStats | Backdash Netcode",
    "summary": "Class PeerNetworkStats Namespace Backdash Assembly Backdash.dll Holds current session network stats. Calculated in intervals of NetworkPackageStatsInterval. public sealed class PeerNetworkStats Inheritance object PeerNetworkStats Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors PeerNetworkStats() public PeerNetworkStats() Properties LastAckedFrame Last acknowledged frame public Frame LastAckedFrame { get; } Property Value Frame LocalFramesBehind Remote frame advantage public FrameSpan LocalFramesBehind { get; } Property Value FrameSpan PendingInputCount Number of pending queued inputs public int PendingInputCount { get; } Property Value int Ping Current roundtrip ping time public TimeSpan Ping { get; } Property Value TimeSpan Received Packages received info public PeerNetworkStats.PackagesInfo Received { get; } Property Value PeerNetworkStats.PackagesInfo RemoteFramesBehind Local frame advantage public FrameSpan RemoteFramesBehind { get; } Property Value FrameSpan Send Packages sent info public PeerNetworkStats.PackagesInfo Send { get; } Property Value PeerNetworkStats.PackagesInfo Valid Returns true if the last read stats call was successful. public bool Valid { get; } Property Value bool Methods Reset() Reset all values to default public void Reset()"
  },
  "api/Backdash.PlayerType.html": {
    "href": "api/Backdash.PlayerType.html",
    "title": "Enum PlayerType | Backdash Netcode",
    "summary": "Enum PlayerType Namespace Backdash Assembly Backdash.dll Defines player type. public enum PlayerType : byte Fields Local = 0 Local player Remote = 1 Remote player Spectator = 2 Spectator"
  },
  "api/Backdash.ResultCode.html": {
    "href": "api/Backdash.ResultCode.html",
    "title": "Enum ResultCode | Backdash Netcode",
    "summary": "Enum ResultCode Namespace Backdash Assembly Backdash.dll Results for INetcodeSession<TInput> operations. public enum ResultCode : short Fields AlreadySynchronized = 9 The operations need to requested before synchronization starts. DuplicatedPlayer = 10 The NetcodePlayer is already added to the session. InRollback = 5 Session is in rollback state. InputDropped = 6 Unable to send input. InvalidNetcodePlayer = 1 When NetcodePlayer was not valid for session. NotSupported = 11 The current session type not support the requested operation. NotSynchronized = 4 The synchronization with peer was not finished. Ok = 0 Operation succeed. PlayerOutOfRange = 2 When Index was not known by session. PredictionThreshold = 3 When emulator reached prediction barrier. TooManyPlayers = 8 Max number of players reached. NetcodeOptions TooManySpectators = 7 Max number of spectators reached."
  },
  "api/Backdash.RollbackNetcode.html": {
    "href": "api/Backdash.RollbackNetcode.html",
    "title": "Class RollbackNetcode | Backdash Netcode",
    "summary": "Class RollbackNetcode Namespace Backdash Assembly Backdash.dll The session builder entrypoint. used to create new netcode sessions. public static class RollbackNetcode Inheritance object RollbackNetcode Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods WithInputType<T>() Choose an Enum<T>() as INetcodeSession<TInput> input type public static NetcodeSessionBuilder<T> WithInputType<T>() where T : unmanaged, Enum Returns NetcodeSessionBuilder<T> Type Parameters T WithInputType<T>(Func<InputTypeSelector, InputTypeSelected<T>>) Selector for INetcodeSession<TInput> input type public static NetcodeSessionBuilder<T> WithInputType<T>(Func<NetcodeSessionBuilder.InputTypeSelector, NetcodeSessionBuilder.InputTypeSelected<T>> selector) where T : unmanaged Parameters selector Func<NetcodeSessionBuilder.InputTypeSelector, NetcodeSessionBuilder.InputTypeSelected<T>> Returns NetcodeSessionBuilder<T> Type Parameters T See Also INetcodeSession<TInput> NetcodeSessionBuilder<TInput>"
  },
  "api/Backdash.Serialization.BinaryBufferReader.html": {
    "href": "api/Backdash.Serialization.BinaryBufferReader.html",
    "title": "Struct BinaryBufferReader | Backdash Netcode",
    "summary": "Struct BinaryBufferReader Namespace Backdash.Serialization Assembly Backdash.dll Binary span reader. public readonly ref struct BinaryBufferReader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods NumericsExtensions.Read(in BinaryBufferReader, ref Quaternion?) NumericsExtensions.Read(in BinaryBufferReader, ref Vector2?) NumericsExtensions.Read(in BinaryBufferReader, ref Vector3?) NumericsExtensions.Read(in BinaryBufferReader, ref Vector4?) NumericsExtensions.Read(in BinaryBufferReader, ref Quaternion) NumericsExtensions.Read(in BinaryBufferReader, ref Vector2) NumericsExtensions.Read(in BinaryBufferReader, ref Vector3) NumericsExtensions.Read(in BinaryBufferReader, ref Vector4) NumericsExtensions.ReadNullableQuaternion(in BinaryBufferReader) NumericsExtensions.ReadNullableVector2(in BinaryBufferReader) NumericsExtensions.ReadNullableVector3(in BinaryBufferReader) NumericsExtensions.ReadNullableVector4(in BinaryBufferReader) NumericsExtensions.ReadQuaternion(in BinaryBufferReader) NumericsExtensions.ReadVector2(in BinaryBufferReader) NumericsExtensions.ReadVector3(in BinaryBufferReader) NumericsExtensions.ReadVector4(in BinaryBufferReader) Constructors BinaryBufferReader(ReadOnlySpan<byte>, ref int, Endianness?) Initialize a new BinaryBufferReader for buffer public BinaryBufferReader(ReadOnlySpan<byte> buffer, ref int offset, Endianness? endianness = null) Parameters buffer ReadOnlySpan<byte> Byte buffer to be read offset int Read offset reference endianness Endianness? Deserialization endianness Fields Endianness Gets or init the value to define which endianness should be used for serialization. public readonly Endianness Endianness Field Value Endianness Properties Buffer Return full buffer public ReadOnlySpan<byte> Buffer { get; } Property Value ReadOnlySpan<byte> Capacity Total buffer capacity in bytes. public int Capacity { get; } Property Value int CurrentBuffer Returns a Span<T> for the current available buffer. public ReadOnlySpan<byte> CurrentBuffer { get; } Property Value ReadOnlySpan<byte> FreeCapacity Available buffer space in bytes public int FreeCapacity { get; } Property Value int ReadCount Total read byte count. public int ReadCount { get; } Property Value int Methods Advance(int) Advance read pointer by count. public void Advance(int count) Parameters count int AllocSpan<T>(int) Advance and allocates a Span of size size for type T> in the buffer. public ReadOnlySpan<T> AllocSpan<T>(int size) where T : struct Parameters size int Returns ReadOnlySpan<T> Type Parameters T Read(ref Frame) Reads single Frame from buffer. public void Read(ref Frame value) Parameters value Frame Read(ref bool) Reads single bool from buffer. public void Read(ref bool value) Parameters value bool Read(ref byte) Reads single byte from buffer. public void Read(ref byte value) Parameters value byte Read(ref char) Reads single char from buffer. public void Read(ref char value) Parameters value char Read(in List<Frame>) Reads a list of Frame from buffer into values. public void Read(in List<Frame> values) Parameters values List<Frame> Read(in List<bool>) Reads a list of bool from buffer into values. public void Read(in List<bool> values) Parameters values List<bool> Read(in List<byte>) Reads a list of byte from buffer into values. public void Read(in List<byte> values) Parameters values List<byte> Read(in List<char>) Reads a list of char from buffer into values. public void Read(in List<char> values) Parameters values List<char> Read(in List<DateOnly>) Reads a list of DateOnly from buffer into values. public void Read(in List<DateOnly> values) Parameters values List<DateOnly> Read(in List<DateTimeOffset>) Reads a list of DateTimeOffset from buffer into values. public void Read(in List<DateTimeOffset> values) Parameters values List<DateTimeOffset> Read(in List<DateTime>) Reads a list of DateTime from buffer into values. public void Read(in List<DateTime> values) Parameters values List<DateTime> Read(in List<double>) Reads a list of double from buffer into values. public void Read(in List<double> values) Parameters values List<double> Read(in List<Guid>) Reads a list of Guid from buffer into values. public void Read(in List<Guid> values) Parameters values List<Guid> Read(in List<Half>) Reads a list of Half from buffer into values. public void Read(in List<Half> values) Parameters values List<Half> Read(in List<Int128>) Reads a list of Int128 from buffer into values. public void Read(in List<Int128> values) Parameters values List<Int128> Read(in List<short>) Reads a list of short from buffer into values. public void Read(in List<short> values) Parameters values List<short> Read(in List<int>) Reads a list of int from buffer into values. public void Read(in List<int> values) Parameters values List<int> Read(in List<long>) Reads a list of long from buffer into values. public void Read(in List<long> values) Parameters values List<long> Read(in List<sbyte>) Reads a list of sbyte from buffer into values. public void Read(in List<sbyte> values) Parameters values List<sbyte> Read(in List<float>) Reads a list of float from buffer into values. public void Read(in List<float> values) Parameters values List<float> Read(in List<TimeOnly>) Reads a list of TimeOnly from buffer into values. public void Read(in List<TimeOnly> values) Parameters values List<TimeOnly> Read(in List<TimeSpan>) Reads a list of TimeSpan from buffer into values. public void Read(in List<TimeSpan> values) Parameters values List<TimeSpan> Read(in List<UInt128>) Reads a list of UInt128 from buffer into values. public void Read(in List<UInt128> values) Parameters values List<UInt128> Read(in List<ushort>) Reads a list of ushort from buffer into values. public void Read(in List<ushort> values) Parameters values List<ushort> Read(in List<uint>) Reads a list of uint from buffer into values. public void Read(in List<uint> values) Parameters values List<uint> Read(in List<ulong>) Reads a list of ulong from buffer into values. public void Read(in List<ulong> values) Parameters values List<ulong> Read(ref DateOnly) Reads single DateOnly from buffer. public void Read(ref DateOnly value) Parameters value DateOnly Read(ref DateTime) Reads single DateTime from buffer. public void Read(ref DateTime value) Parameters value DateTime Read(ref DateTimeOffset) Reads single DateTimeOffset from buffer. public void Read(ref DateTimeOffset value) Parameters value DateTimeOffset Read(ref double) Reads single double from buffer. public void Read(ref double value) Parameters value double Read(ref Guid) Reads single Guid from buffer. public void Read(ref Guid value) Parameters value Guid Read(ref Half) Reads single Half from buffer. public void Read(ref Half value) Parameters value Half Read(ref Int128) Reads single Int128 from buffer. public void Read(ref Int128 value) Parameters value Int128 Read(ref short) Reads single short from buffer. public void Read(ref short value) Parameters value short Read(ref int) Reads single int from buffer. public void Read(ref int value) Parameters value int Read(ref long) Reads single long from buffer. public void Read(ref long value) Parameters value long Read(ref Frame?) Reads single TimeOnly from buffer. public void Read(ref Frame? value) Parameters value Frame? Read(ref bool?) Reads single bool from buffer. public void Read(ref bool? value) Parameters value bool? Read(ref byte?) Reads single byte from buffer. public void Read(ref byte? value) Parameters value byte? Read(ref char?) Reads single char from buffer. public void Read(ref char? value) Parameters value char? Read(ref DateOnly?) Reads single TimeOnly from buffer. public void Read(ref DateOnly? value) Parameters value DateOnly? Read(ref DateTimeOffset?) Reads single DateTimeOffset from buffer. public void Read(ref DateTimeOffset? value) Parameters value DateTimeOffset? Read(ref DateTime?) Reads single DateTime from buffer. public void Read(ref DateTime? value) Parameters value DateTime? Read(ref double?) Reads single double from buffer. public void Read(ref double? value) Parameters value double? Read(ref Guid?) Reads single double from buffer. public void Read(ref Guid? value) Parameters value Guid? Read(ref Half?) Reads single Half from buffer. public void Read(ref Half? value) Parameters value Half? Read(ref Int128?) Reads single Int128 from buffer. public void Read(ref Int128? value) Parameters value Int128? Read(ref short?) Reads single short from buffer. public void Read(ref short? value) Parameters value short? Read(ref int?) Reads single int from buffer. public void Read(ref int? value) Parameters value int? Read(ref long?) Reads single long from buffer. public void Read(ref long? value) Parameters value long? Read(ref sbyte?) Reads single sbyte from buffer. public void Read(ref sbyte? value) Parameters value sbyte? Read(ref float?) Reads float 32 float from buffer. public void Read(ref float? value) Parameters value float? Read(ref TimeOnly?) Reads single TimeOnly from buffer. public void Read(ref TimeOnly? value) Parameters value TimeOnly? Read(ref TimeSpan?) Reads single TimeSpan from buffer. public void Read(ref TimeSpan? value) Parameters value TimeSpan? Read(ref UInt128?) Reads single UInt128 from buffer. public void Read(ref UInt128? value) Parameters value UInt128? Read(ref ushort?) Reads single short from buffer. public void Read(ref ushort? value) Parameters value ushort? Read(ref uint?) Reads single uint from buffer. public void Read(ref uint? value) Parameters value uint? Read(ref ulong?) Reads single ulong from buffer. public void Read(ref ulong? value) Parameters value ulong? Read(ref sbyte) Reads single sbyte from buffer. public void Read(ref sbyte value) Parameters value sbyte Read(ref float) Reads float 32 float from buffer. public void Read(ref float value) Parameters value float Read(in Span<Frame>) Reads a span of Frame from buffer into values. public void Read(in Span<Frame> values) Parameters values Span<Frame> Read(in Span<bool>) Reads a span of bool from buffer into values. public void Read(in Span<bool> values) Parameters values Span<bool> Read(in Span<byte>) Reads a span of byte from buffer into values. public void Read(in Span<byte> values) Parameters values Span<byte> Read(in Span<char>) Reads a span of char from buffer into values. public void Read(in Span<char> values) Parameters values Span<char> Read(in Span<DateOnly>) Reads a span of DateOnly from buffer into values. public void Read(in Span<DateOnly> values) Parameters values Span<DateOnly> Read(in Span<DateTimeOffset>) Reads a span of DateTimeOffset from buffer into values. public void Read(in Span<DateTimeOffset> values) Parameters values Span<DateTimeOffset> Read(in Span<DateTime>) Reads a span of DateTime from buffer into values. public void Read(in Span<DateTime> values) Parameters values Span<DateTime> Read(in Span<double>) Reads span of double 32 double from buffer. public void Read(in Span<double> values) Parameters values Span<double> Read(in Span<Guid>) Reads a span of Guid from buffer into values. public void Read(in Span<Guid> values) Parameters values Span<Guid> Read(in Span<Half>) Reads span of Half 32 Half from buffer. public void Read(in Span<Half> values) Parameters values Span<Half> Read(in Span<Int128>) Reads a span of Int128 from buffer into values. public void Read(in Span<Int128> values) Parameters values Span<Int128> Read(in Span<short>) Reads a span of short from buffer into values. public void Read(in Span<short> values) Parameters values Span<short> Read(in Span<int>) Reads a span of int from buffer into values. public void Read(in Span<int> values) Parameters values Span<int> Read(in Span<long>) Reads a span of long from buffer into values. public void Read(in Span<long> values) Parameters values Span<long> Read(in Span<sbyte>) Reads a span of sbyte from buffer into values. public void Read(in Span<sbyte> values) Parameters values Span<sbyte> Read(in Span<float>) Reads span of float 32 float from buffer. public void Read(in Span<float> values) Parameters values Span<float> Read(in Span<TimeOnly>) Reads a span of TimeOnly from buffer into values. public void Read(in Span<TimeOnly> values) Parameters values Span<TimeOnly> Read(in Span<TimeSpan>) Reads a span of TimeSpan from buffer into values. public void Read(in Span<TimeSpan> values) Parameters values Span<TimeSpan> Read(in Span<UInt128>) Reads a span of UInt128 from buffer into values. public void Read(in Span<UInt128> values) Parameters values Span<UInt128> Read(in Span<ushort>) Reads a span of ushort from buffer into values. public void Read(in Span<ushort> values) Parameters values Span<ushort> Read(in Span<uint>) Reads a span of uint from buffer into values. public void Read(in Span<uint> values) Parameters values Span<uint> Read(in Span<ulong>) Reads a span of ulong from buffer into values. public void Read(in Span<ulong> values) Parameters values Span<ulong> Read(in StringBuilder) Reads a StringBuilder into values from buffer. public void Read(in StringBuilder values) Parameters values StringBuilder Read(ref TimeOnly) Reads single TimeOnly from buffer. public void Read(ref TimeOnly value) Parameters value TimeOnly Read(ref TimeSpan) Reads single TimeSpan from buffer. public void Read(ref TimeSpan value) Parameters value TimeSpan Read(ref UInt128) Reads single UInt128 from buffer. public void Read(ref UInt128 value) Parameters value UInt128 Read(ref ushort) Reads single short from buffer. public void Read(ref ushort value) Parameters value ushort Read(ref uint) Reads single uint from buffer. public void Read(ref uint value) Parameters value uint Read(ref ulong) Reads single ulong from buffer. public void Read(ref ulong value) Parameters value ulong ReadAsByte<T>() Reads a byte from buffer and reinterprets it as T. public T ReadAsByte<T>() where T : unmanaged Returns T Type Parameters T ReadAsByte<T>(in List<T>) Reads a byte from buffer and reinterprets it as T. public void ReadAsByte<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsByte<T>(ref T?) Reads a byte from buffer and reinterprets it as T. public void ReadAsByte<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsByte<T>(in Span<T>) Reads a byte from buffer and reinterprets it as T. public void ReadAsByte<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsByte<T>(ref T) Reads a byte from buffer and reinterprets it as T. public void ReadAsByte<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsInt128<T>() Reads a Int128 from buffer and reinterpret it as T. public T ReadAsInt128<T>() where T : unmanaged Returns T Type Parameters T ReadAsInt128<T>(in List<T>) Reads a Int128 from buffer and reinterpret it as T. public void ReadAsInt128<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsInt128<T>(ref T?) Reads a Int128 from buffer and reinterpret it as T. public void ReadAsInt128<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsInt128<T>(in Span<T>) Reads a Int128 from buffer and reinterpret it as T. public void ReadAsInt128<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsInt128<T>(ref T) Reads a Int128 from buffer and reinterpret it as T. public void ReadAsInt128<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsInt16<T>() Reads a short from buffer and reinterprets it as T. public T ReadAsInt16<T>() where T : unmanaged Returns T Type Parameters T ReadAsInt16<T>(in List<T>) Reads a short from buffer and reinterprets it as T. public void ReadAsInt16<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsInt16<T>(ref T?) Reads a short from buffer and reinterprets it as T. public void ReadAsInt16<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsInt16<T>(in Span<T>) Reads a short from buffer and reinterprets it as T. public void ReadAsInt16<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsInt16<T>(ref T) Reads a short from buffer and reinterprets it as T. public void ReadAsInt16<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsInt32<T>() Reads a int from buffer and reinterprets it as T. public T ReadAsInt32<T>() where T : unmanaged Returns T Type Parameters T ReadAsInt32<T>(in List<T>) Reads a int from buffer and reinterprets it as T. public void ReadAsInt32<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsInt32<T>(ref T?) Reads a int from buffer and reinterprets it as T. public void ReadAsInt32<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsInt32<T>(in Span<T>) Reads a int from buffer and reinterprets it as T. public void ReadAsInt32<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsInt32<T>(ref T) Reads a int from buffer and reinterprets it as T. public void ReadAsInt32<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsInt64<T>() Reads a long from buffer and reinterpret it as T. public T ReadAsInt64<T>() where T : unmanaged Returns T Type Parameters T ReadAsInt64<T>(in List<T>) Reads a long from buffer and reinterpret it as T. public void ReadAsInt64<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsInt64<T>(ref T?) Reads a long from buffer and reinterpret it as T. public void ReadAsInt64<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsInt64<T>(in Span<T>) Reads a long from buffer and reinterpret it as T. public void ReadAsInt64<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsInt64<T>(ref T) Reads a long from buffer and reinterpret it as T. public void ReadAsInt64<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsNullableByte<T>() Reads a byte from buffer and reinterprets it as T. public T? ReadAsNullableByte<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableInt128<T>() Reads a Int128 from buffer and reinterpret it as T. public T? ReadAsNullableInt128<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableInt16<T>() Reads a short from buffer and reinterprets it as T. public T? ReadAsNullableInt16<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableInt32<T>() Reads a int from buffer and reinterprets it as T. public T? ReadAsNullableInt32<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableInt64<T>() Reads a long from buffer and reinterpret it as T. public T? ReadAsNullableInt64<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableSByte<T>() Reads a sbyte from buffer and reinterprets it as T. public T? ReadAsNullableSByte<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableUInt128<T>() Reads a UInt128 from buffer and reinterprets it as T. public T? ReadAsNullableUInt128<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableUInt16<T>() Reads a ushort from buffer and reinterprets it as T. public T? ReadAsNullableUInt16<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableUInt32<T>() Reads a uint from buffer and reinterprets it as T. public T? ReadAsNullableUInt32<T>() where T : unmanaged Returns T? Type Parameters T ReadAsNullableUInt64<T>() Reads a ulong from buffer and reinterprets it as T. public T? ReadAsNullableUInt64<T>() where T : unmanaged Returns T? Type Parameters T ReadAsSByte<T>() Reads a sbyte from buffer and reinterprets it as T. public T ReadAsSByte<T>() where T : unmanaged Returns T Type Parameters T ReadAsSByte<T>(in List<T>) Reads a sbyte from buffer and reinterprets it as T. public void ReadAsSByte<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsSByte<T>(ref T?) Reads a sbyte from buffer and reinterprets it as T. public void ReadAsSByte<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsSByte<T>(in Span<T>) Reads a sbyte from buffer and reinterprets it as T. public void ReadAsSByte<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsSByte<T>(ref T) Reads a sbyte from buffer and reinterprets it as T. public void ReadAsSByte<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsUInt128<T>() Reads a UInt128 from buffer and reinterprets it as T. public T ReadAsUInt128<T>() where T : unmanaged Returns T Type Parameters T ReadAsUInt128<T>(in List<T>) Reads a UInt128 from buffer and reinterprets it as T. public void ReadAsUInt128<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsUInt128<T>(ref T?) Reads a UInt128 from buffer and reinterprets it as T. public void ReadAsUInt128<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsUInt128<T>(in Span<T>) Reads a UInt128 from buffer and reinterprets it as T. public void ReadAsUInt128<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsUInt128<T>(ref T) Reads a UInt128 from buffer and reinterprets it as T. public void ReadAsUInt128<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsUInt16<T>() Reads a ushort from buffer and reinterprets it as T. public T ReadAsUInt16<T>() where T : unmanaged Returns T Type Parameters T ReadAsUInt16<T>(in List<T>) Reads a ushort from buffer and reinterprets it as T. public void ReadAsUInt16<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsUInt16<T>(ref T?) Reads a ushort from buffer and reinterprets it as T. public void ReadAsUInt16<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsUInt16<T>(in Span<T>) Reads a ushort from buffer and reinterprets it as T. public void ReadAsUInt16<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsUInt16<T>(ref T) Reads a ushort from buffer and reinterprets it as T. public void ReadAsUInt16<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsUInt32<T>() Reads a uint from buffer and reinterprets it as T. public T ReadAsUInt32<T>() where T : unmanaged Returns T Type Parameters T ReadAsUInt32<T>(in List<T>) Reads a uint from buffer and reinterprets it as T. public void ReadAsUInt32<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsUInt32<T>(ref T?) Reads a uint from buffer and reinterprets it as T. public void ReadAsUInt32<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsUInt32<T>(in Span<T>) Reads a uint from buffer and reinterprets it as T. public void ReadAsUInt32<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsUInt32<T>(ref T) Reads a uint from buffer and reinterprets it as T. public void ReadAsUInt32<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadAsUInt64<T>() Reads a ulong from buffer and reinterprets it as T. public T ReadAsUInt64<T>() where T : unmanaged Returns T Type Parameters T ReadAsUInt64<T>(in List<T>) Reads a ulong from buffer and reinterprets it as T. public void ReadAsUInt64<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadAsUInt64<T>(ref T?) Reads a ulong from buffer and reinterprets it as T. public void ReadAsUInt64<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadAsUInt64<T>(in Span<T>) Reads a ulong from buffer and reinterprets it as T. public void ReadAsUInt64<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadAsUInt64<T>(ref T) Reads a ulong from buffer and reinterprets it as T. public void ReadAsUInt64<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadBoolean() Reads single bool from buffer. public bool ReadBoolean() Returns bool ReadByte() Reads single byte from buffer. public byte ReadByte() Returns byte ReadChar() Reads single char from buffer. public char ReadChar() Returns char ReadDateOnly() Reads single DateOnly from buffer. public DateOnly ReadDateOnly() Returns DateOnly ReadDateTime() Reads single DateTime from buffer. public DateTime ReadDateTime() Returns DateTime ReadDateTimeOffset() Reads single DateTimeOffset from buffer. public DateTimeOffset ReadDateTimeOffset() Returns DateTimeOffset ReadDouble() Reads single double from buffer. public double ReadDouble() Returns double ReadFloat() Reads float 32 float from buffer. public float ReadFloat() Returns float ReadFrame() Reads single Frame from buffer. public Frame ReadFrame() Returns Frame ReadGuid() Reads single Guid from buffer. public Guid ReadGuid() Returns Guid ReadHalf() Reads single Half from buffer. public Half ReadHalf() Returns Half ReadInt128() Reads single Int128 from buffer. public Int128 ReadInt128() Returns Int128 ReadInt16() Reads single short from buffer. public short ReadInt16() Returns short ReadInt32() Reads single int from buffer. public int ReadInt32() Returns int ReadInt64() Reads single long from buffer. public long ReadInt64() Returns long ReadNullableBoolean() Reads single bool from buffer. public bool? ReadNullableBoolean() Returns bool? ReadNullableByte() Reads single byte from buffer. public byte? ReadNullableByte() Returns byte? ReadNullableChar() Reads single char from buffer. public char? ReadNullableChar() Returns char? ReadNullableDateOnly() Reads single DateOnly from buffer. public DateOnly? ReadNullableDateOnly() Returns DateOnly? ReadNullableDateTime() Reads single DateTime from buffer. public DateTime? ReadNullableDateTime() Returns DateTime? ReadNullableDateTimeOffset() Reads single DateTimeOffset from buffer. public DateTimeOffset? ReadNullableDateTimeOffset() Returns DateTimeOffset? ReadNullableDouble() Reads single double from buffer. public double? ReadNullableDouble() Returns double? ReadNullableFloat() Reads float 32 float from buffer. public float? ReadNullableFloat() Returns float? ReadNullableFrame() Reads single Frame from buffer. public Frame? ReadNullableFrame() Returns Frame? ReadNullableGuid() Reads single Guid from buffer. public Guid? ReadNullableGuid() Returns Guid? ReadNullableHalf() Reads single Half from buffer. public Half? ReadNullableHalf() Returns Half? ReadNullableInt128() Reads single Int128 from buffer. public Int128? ReadNullableInt128() Returns Int128? ReadNullableInt16() Reads single short from buffer. public short? ReadNullableInt16() Returns short? ReadNullableInt32() Reads single int from buffer. public int? ReadNullableInt32() Returns int? ReadNullableInt64() Reads single long from buffer. public long? ReadNullableInt64() Returns long? ReadNullableNumber<T>() Reads single IBinaryInteger<TSelf> from buffer. public T? ReadNullableNumber<T>() where T : unmanaged, IBinaryInteger<T>, IMinMaxValue<T> Returns T? Type Parameters T A numeric type that implements IBinaryInteger<TSelf> and IMinMaxValue<TSelf>. ReadNullableNumber<T>(bool) Reads single IBinaryInteger<TSelf> from buffer. public T? ReadNullableNumber<T>(bool isUnsigned) where T : unmanaged, IBinaryInteger<T> Parameters isUnsigned bool true if source represents an unsigned two's complement number; otherwise, false to indicate it represents a signed two's complement number Returns T? Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. ReadNullableSByte() Reads single sbyte from buffer. public sbyte? ReadNullableSByte() Returns sbyte? ReadNullableSingle() Reads float 32 float from buffer. public float? ReadNullableSingle() Returns float? See Also ReadNullableFloat() ReadNullableStruct<T>() Reads an unmanaged struct from buffer. public T? ReadNullableStruct<T>() where T : unmanaged Returns T? Type Parameters T ReadNullableTimeOnly() Reads single TimeOnly from buffer. public TimeOnly? ReadNullableTimeOnly() Returns TimeOnly? ReadNullableTimeSpan() Reads single TimeSpan from buffer. public TimeSpan? ReadNullableTimeSpan() Returns TimeSpan? ReadNullableUInt128() Reads single UInt128 from buffer. public UInt128? ReadNullableUInt128() Returns UInt128? ReadNullableUInt16() Reads single ushort from buffer. public ushort? ReadNullableUInt16() Returns ushort? ReadNullableUInt32() Reads single uint from buffer. public uint? ReadNullableUInt32() Returns uint? ReadNullableUInt64() Reads single ulong from buffer. public ulong? ReadNullableUInt64() Returns ulong? ReadNullable<T>() Reads a IBinarySerializable T from buffer. public T? ReadNullable<T>() where T : struct, IBinarySerializable Returns T? Type Parameters T A value type that implements IBinarySerializable. ReadNullable<T>(ref T?, IObjectPool<T>, bool) Reads a nullable IBinarySerializable value from buffer. public void ReadNullable<T>(ref T? value, IObjectPool<T> pool, bool forceReturn = true) where T : class, IBinarySerializable Parameters value T pool IObjectPool<T> forceReturn bool Type Parameters T A nullable reference type that implements IBinarySerializable. ReadNullable<T>(ref T?, bool) Reads a nullable IBinarySerializable value from buffer. public void ReadNullable<T>(ref T? value, bool forceReturn = true) where T : class, IBinarySerializable, new() Parameters value T forceReturn bool Type Parameters T A nullable reference type that implements IBinarySerializable. ReadNumber<T>() Reads single IBinaryInteger<TSelf> from buffer. public T ReadNumber<T>() where T : unmanaged, IBinaryInteger<T>, IMinMaxValue<T> Returns T Type Parameters T A numeric type that implements IBinaryInteger<TSelf> and IMinMaxValue<TSelf>. ReadNumber<T>(bool) Reads single IBinaryInteger<TSelf> from buffer. public T ReadNumber<T>(bool isUnsigned) where T : unmanaged, IBinaryInteger<T> Parameters isUnsigned bool true if source represents an unsigned two's complement number; otherwise, false to indicate it represents a signed two's complement number Returns T Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. ReadNumber<T>(ref T?) Reads single IBinaryInteger<TSelf> from buffer. public void ReadNumber<T>(ref T? value) where T : unmanaged, IBinaryInteger<T>, IMinMaxValue<T> Parameters value T? Type Parameters T A numeric type that implements IBinaryInteger<TSelf> and IMinMaxValue<TSelf>. ReadNumber<T>(ref T?, bool) Reads single IBinaryInteger<TSelf> from buffer. public void ReadNumber<T>(ref T? value, bool isUnsigned) where T : unmanaged, IBinaryInteger<T> Parameters value T? isUnsigned bool true if source represents an unsigned two's complement number; otherwise, false to indicate it represents a signed two's complement number Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. ReadNumber<T>(ref T) Reads single IBinaryInteger<TSelf> from buffer. public void ReadNumber<T>(ref T value) where T : unmanaged, IBinaryInteger<T>, IMinMaxValue<T> Parameters value T Type Parameters T A numeric type that implements IBinaryInteger<TSelf> and IMinMaxValue<TSelf>. ReadNumber<T>(ref T, bool) Reads single IBinaryInteger<TSelf> from buffer. public void ReadNumber<T>(ref T value, bool isUnsigned) where T : unmanaged, IBinaryInteger<T> Parameters value T isUnsigned bool true if source represents an unsigned two's complement number; otherwise, false to indicate it represents a signed two's complement number Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. ReadSByte() Reads single sbyte from buffer. public sbyte ReadSByte() Returns sbyte ReadSingle() Reads float 32 float from buffer. public float ReadSingle() Returns float See Also ReadFloat() ReadString(int) Reads and allocates an string from buffer. public string ReadString(int size) Parameters size int Returns string ReadStruct<T>() Reads an unmanaged struct from buffer. public T ReadStruct<T>() where T : unmanaged Returns T Type Parameters T ReadStruct<T>(in List<T>) Reads an unmanaged struct list from buffer. public void ReadStruct<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T ReadStruct<T>(ref T?) Reads an unmanaged struct from buffer. public void ReadStruct<T>(ref T? value) where T : unmanaged Parameters value T? Type Parameters T ReadStruct<T>(in Span<T>) Reads an unmanaged struct span from buffer. public void ReadStruct<T>(in Span<T> values) where T : unmanaged Parameters values Span<T> Type Parameters T ReadStruct<T>(ref T) Reads an unmanaged struct from buffer. public void ReadStruct<T>(ref T value) where T : unmanaged Parameters value T Type Parameters T ReadStruct<T>(in T[]) Reads an unmanaged struct from buffer. public void ReadStruct<T>(in T[] values) where T : unmanaged Parameters values T[] Type Parameters T ReadTimeOnly() Reads single TimeOnly from buffer. public TimeOnly ReadTimeOnly() Returns TimeOnly ReadTimeSpan() Reads single TimeSpan from buffer. public TimeSpan ReadTimeSpan() Returns TimeSpan ReadUInt128() Reads single UInt128 from buffer. public UInt128 ReadUInt128() Returns UInt128 ReadUInt16() Reads single ushort from buffer. public ushort ReadUInt16() Returns ushort ReadUInt32() Reads single uint from buffer. public uint ReadUInt32() Returns uint ReadUInt64() Reads single ulong from buffer. public ulong ReadUInt64() Returns ulong ReadUtf8String(in List<char>) Reads a list of UTF8 char from buffer into values. public void ReadUtf8String(in List<char> values) Parameters values List<char> ReadUtf8String(in Span<char>) Reads a span of UTF8 char from buffer into values. public void ReadUtf8String(in Span<char> values) Parameters values Span<char> Read<T>() Reads a IBinarySerializable T from buffer. public T Read<T>() where T : struct, IBinarySerializable Returns T Type Parameters T A value type that implements IBinarySerializable. Read<T>(in CircularBuffer<T>) Reads a circular buffer of unmanaged IBinarySerializable values from buffer. public void Read<T>(in CircularBuffer<T> values) where T : IBinarySerializable Parameters values CircularBuffer<T> Type Parameters T A value type that implements IBinarySerializable. Read<T>(List<T>) Reads a list of IBinarySerializable values from buffer. public void Read<T>(List<T> values) where T : class, IBinarySerializable, new() Parameters values List<T> Type Parameters T A reference that implements IBinarySerializable. See Also Read<T>(in List<T>, IObjectPool<T>) Read<T>(in List<T>) Reads an array of unmanaged IBinarySerializable values from buffer. public void Read<T>(in List<T> values) where T : struct, IBinarySerializable Parameters values List<T> Type Parameters T A value type that implements IBinarySerializable. Read<T>(in List<T>, IObjectPool<T>) Reads an array of IBinarySerializable values into buffer. public void Read<T>(in List<T> values, IObjectPool<T> pool) where T : class, IBinarySerializable Parameters values List<T> pool IObjectPool<T> Type Parameters T A reference that implements IBinarySerializable. Read<T>(ref T?) Reads a IBinarySerializable value from buffer. public void Read<T>(ref T? value) where T : struct, IBinarySerializable Parameters value T? Type Parameters T A value type that implements IBinarySerializable. Read<T>(Span<T>) Reads a span of IBinarySerializable values from buffer. public void Read<T>(Span<T> values) where T : class, IBinarySerializable, new() Parameters values Span<T> Type Parameters T A reference that implements IBinarySerializable. See Also Read<T>(in Span<T>, in IObjectPool<T>) Read<T>(in Span<T>) Reads a span of IBinarySerializable values into buffer. public void Read<T>(in Span<T> values) where T : IBinarySerializable Parameters values Span<T> Type Parameters T A list of a value type that implements IBinarySerializable. Read<T>(in Span<T>, in IObjectPool<T>) Reads a span of IBinarySerializable values into buffer. public void Read<T>(in Span<T> values, in IObjectPool<T> pool) where T : class, IBinarySerializable Parameters values Span<T> pool IObjectPool<T> Type Parameters T A list of a reference type that implements IBinarySerializable. Read<T>(T) Reads a IBinarySerializable value from buffer. public void Read<T>(T value) where T : class, IBinarySerializable Parameters value T Type Parameters T A reference type that implements IBinarySerializable. Read<T>(ref T) Reads a IBinarySerializable value from buffer. public void Read<T>(ref T value) where T : struct, IBinarySerializable Parameters value T Type Parameters T A value type that implements IBinarySerializable. Read<T>(ref T?, bool, bool) Reads a IBinarySerializable value from buffer. public void Read<T>(ref T? value, bool nullable, bool forceReturn = true) where T : class, IBinarySerializable, new() Parameters value T nullable bool forceReturn bool Type Parameters T A reference type that implements IBinarySerializable. Read<T>(T[]) Reads an array of IBinarySerializable values from buffer. public void Read<T>(T[] values) where T : class, IBinarySerializable, new() Parameters values T[] Type Parameters T A reference that implements IBinarySerializable. See Also Read<T>(in T[], in IObjectPool<T>) Read<T>(in T[]) Reads an array of IBinarySerializable values from buffer. public void Read<T>(in T[] values) where T : struct, IBinarySerializable Parameters values T[] Type Parameters T A type that implements IBinarySerializable. Read<T>(in T[], in IObjectPool<T>) Reads an array of IBinarySerializable values into buffer. public void Read<T>(in T[] values, in IObjectPool<T> pool) where T : class, IBinarySerializable Parameters values T[] pool IObjectPool<T> Type Parameters T A reference type that implements IBinarySerializable."
  },
  "api/Backdash.Serialization.BinaryBufferWriter.html": {
    "href": "api/Backdash.Serialization.BinaryBufferWriter.html",
    "title": "Struct BinaryBufferWriter | Backdash Netcode",
    "summary": "Struct BinaryBufferWriter Namespace Backdash.Serialization Assembly Backdash.dll Binary span writer. public readonly struct BinaryBufferWriter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods NumericsExtensions.Write(in BinaryBufferWriter, in Quaternion?) NumericsExtensions.Write(in BinaryBufferWriter, in Vector2?) NumericsExtensions.Write(in BinaryBufferWriter, in Vector3?) NumericsExtensions.Write(in BinaryBufferWriter, in Vector4?) NumericsExtensions.Write(in BinaryBufferWriter, in Quaternion) NumericsExtensions.Write(in BinaryBufferWriter, in Vector2) NumericsExtensions.Write(in BinaryBufferWriter, in Vector3) NumericsExtensions.Write(in BinaryBufferWriter, in Vector4) Remarks Initialize a new BinarySpanWriter for buffer Constructors BinaryBufferWriter(ArrayBufferWriter<byte>, Endianness?) Binary span writer. public BinaryBufferWriter(ArrayBufferWriter<byte> buffer, Endianness? endianness = null) Parameters buffer ArrayBufferWriter<byte> Byte buffer to be written endianness Endianness? Serialization endianness Remarks Initialize a new BinarySpanWriter for buffer Fields Endianness Gets or init the value to define which endianness should be used for serialization. public readonly Endianness Endianness Field Value Endianness Properties Buffer Backing IBufferWriter IBufferWriter<T> public IBufferWriter<byte> Buffer { get; } Property Value IBufferWriter<byte> WrittenCount Total written byte count. public int WrittenCount { get; } Property Value int WrittenSpan Written span. public ReadOnlySpan<byte> WrittenSpan { get; } Property Value ReadOnlySpan<byte> Methods Advance(int) Advance write pointer by count. public void Advance(int count) Parameters count int AllocSpan<T>(int) Advance and allocates a Span of size size for type T> in the buffer. public Span<T> AllocSpan<T>(int size) where T : unmanaged Parameters size int Returns Span<T> Type Parameters T Write(in Frame) Writes single Frame value into buffer. public void Write(in Frame value) Parameters value Frame Write(in bool) Writes single bool value into buffer. public void Write(in bool value) Parameters value bool Write(in byte) Writes single byte value into buffer. public void Write(in byte value) Parameters value byte Write(in char) Writes single char value into buffer. public void Write(in char value) Parameters value char Write(in List<Frame>) Writes a list Frame values into buffer. public void Write(in List<Frame> values) Parameters values List<Frame> Write(in List<bool>) Writes a list of bool values into buffer. public void Write(in List<bool> values) Parameters values List<bool> Write(in List<byte>) Writes a list of byte values into buffer. public void Write(in List<byte> values) Parameters values List<byte> Write(in List<char>) Writes a list of char values into buffer. public void Write(in List<char> values) Parameters values List<char> Write(in List<DateOnly>) Writes a list DateOnly values into buffer. public void Write(in List<DateOnly> values) Parameters values List<DateOnly> Write(in List<DateTimeOffset>) Writes a list of DateTimeOffset values into buffer. public void Write(in List<DateTimeOffset> values) Parameters values List<DateTimeOffset> Write(in List<DateTime>) Writes a list of DateTime values into buffer. public void Write(in List<DateTime> values) Parameters values List<DateTime> Write(in List<double>) Writes a list of double values into buffer. public void Write(in List<double> values) Parameters values List<double> Write(in List<Guid>) Writes a list of Guid values into buffer. public void Write(in List<Guid> values) Parameters values List<Guid> Write(in List<Half>) Writes a list of Half values into buffer. public void Write(in List<Half> values) Parameters values List<Half> Write(in List<Int128>) Writes a list of Int128 values into buffer. public void Write(in List<Int128> values) Parameters values List<Int128> Write(in List<short>) Writes a list of short values into buffer. public void Write(in List<short> values) Parameters values List<short> Write(in List<int>) Writes a list of int values into buffer. public void Write(in List<int> values) Parameters values List<int> Write(in List<long>) Writes a list of long values into buffer. public void Write(in List<long> values) Parameters values List<long> Write(in List<sbyte>) Writes a list of sbyte values into buffer. public void Write(in List<sbyte> values) Parameters values List<sbyte> Write(in List<float>) Writes a list of float values into buffer. public void Write(in List<float> values) Parameters values List<float> Write(in List<TimeOnly>) Writes a list of TimeOnly values into buffer. public void Write(in List<TimeOnly> values) Parameters values List<TimeOnly> Write(in List<TimeSpan>) Writes a list of TimeSpan values into buffer. public void Write(in List<TimeSpan> values) Parameters values List<TimeSpan> Write(in List<UInt128>) Writes a list of UInt128 values into buffer. public void Write(in List<UInt128> values) Parameters values List<UInt128> Write(in List<ushort>) Writes a list of ushort values into buffer. public void Write(in List<ushort> values) Parameters values List<ushort> Write(in List<uint>) Writes a list of uint values into buffer. public void Write(in List<uint> values) Parameters values List<uint> Write(in List<ulong>) Writes a list of ulong values into buffer. public void Write(in List<ulong> values) Parameters values List<ulong> Write(in DateOnly) Writes single DateOnly value into buffer. public void Write(in DateOnly value) Parameters value DateOnly Write(in DateTime) Writes single DateTime value into buffer. public void Write(in DateTime value) Parameters value DateTime Write(in DateTimeOffset) Writes single DateTimeOffset value into buffer. public void Write(in DateTimeOffset value) Parameters value DateTimeOffset Write(in double) Writes single double value into buffer. public void Write(in double value) Parameters value double Write(in Guid) Writes single Guid value into buffer. public void Write(in Guid value) Parameters value Guid Write(in Half) Writes single Half value into buffer. public void Write(in Half value) Parameters value Half Write(in Int128) Writes single Int128 value into buffer. public void Write(in Int128 value) Parameters value Int128 Write(in short) Writes single short value into buffer. public void Write(in short value) Parameters value short Write(in int) Writes single int value into buffer. public void Write(in int value) Parameters value int Write(in long) Writes single long value into buffer. public void Write(in long value) Parameters value long Write(in Frame?) Writes single Frame value into buffer. public void Write(in Frame? value) Parameters value Frame? Write(in bool?) Writes single bool value into buffer. public void Write(in bool? value) Parameters value bool? Write(in byte?) Writes single byte value into buffer. public void Write(in byte? value) Parameters value byte? Write(in char?) Writes single char value into buffer. public void Write(in char? value) Parameters value char? Write(in DateOnly?) Writes single DateOnly value into buffer. public void Write(in DateOnly? value) Parameters value DateOnly? Write(in DateTimeOffset?) Writes single DateTimeOffset value into buffer. public void Write(in DateTimeOffset? value) Parameters value DateTimeOffset? Write(in DateTime?) Writes single DateTime value into buffer. public void Write(in DateTime? value) Parameters value DateTime? Write(in double?) Writes single double value into buffer. public void Write(in double? value) Parameters value double? Write(in Guid?) Writes single Guid value into buffer. public void Write(in Guid? value) Parameters value Guid? Write(in Half?) Writes single Half value into buffer. public void Write(in Half? value) Parameters value Half? Write(in Int128?) Writes single Int128 value into buffer. public void Write(in Int128? value) Parameters value Int128? Write(in short?) Writes single short value into buffer. public void Write(in short? value) Parameters value short? Write(in int?) Writes single int value into buffer. public void Write(in int? value) Parameters value int? Write(in long?) Writes single long value into buffer. public void Write(in long? value) Parameters value long? Write(in sbyte?) Writes single sbyte value into buffer. public void Write(in sbyte? value) Parameters value sbyte? Write(in float?) Writes single float value into buffer. public void Write(in float? value) Parameters value float? Write(in TimeOnly?) Writes single TimeOnly value into buffer. public void Write(in TimeOnly? value) Parameters value TimeOnly? Write(in TimeSpan?) Writes single TimeSpan value into buffer. public void Write(in TimeSpan? value) Parameters value TimeSpan? Write(in UInt128?) Writes single UInt128 value into buffer. public void Write(in UInt128? value) Parameters value UInt128? Write(in ushort?) Writes single ushort value into buffer. public void Write(in ushort? value) Parameters value ushort? Write(in uint?) Writes single uint value into buffer. public void Write(in uint? value) Parameters value uint? Write(in ulong?) Writes single ulong value into buffer. public void Write(in ulong? value) Parameters value ulong? Write(in ReadOnlySpan<Frame>) Writes a span of Frame values into buffer. public void Write(in ReadOnlySpan<Frame> values) Parameters values ReadOnlySpan<Frame> Write(in ReadOnlySpan<bool>) Writes a span of bool value into buffer. public void Write(in ReadOnlySpan<bool> value) Parameters value ReadOnlySpan<bool> Write(in ReadOnlySpan<byte>) Writes a span bytes of byte value into buffer. public void Write(in ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> Write(in ReadOnlySpan<char>) Writes a span of char value into buffer. public void Write(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> Write(in ReadOnlySpan<DateOnly>) Writes a span of DateOnly values into buffer. public void Write(in ReadOnlySpan<DateOnly> values) Parameters values ReadOnlySpan<DateOnly> Write(in ReadOnlySpan<DateTimeOffset>) Writes a span of DateTimeOffset values into buffer. public void Write(in ReadOnlySpan<DateTimeOffset> values) Parameters values ReadOnlySpan<DateTimeOffset> Write(in ReadOnlySpan<DateTime>) Writes a span of DateTime values into buffer. public void Write(in ReadOnlySpan<DateTime> values) Parameters values ReadOnlySpan<DateTime> Write(in ReadOnlySpan<double>) Writes a span of double values into buffer. public void Write(in ReadOnlySpan<double> values) Parameters values ReadOnlySpan<double> Write(in ReadOnlySpan<Guid>) Writes a span of Guid values into buffer. public void Write(in ReadOnlySpan<Guid> values) Parameters values ReadOnlySpan<Guid> Write(in ReadOnlySpan<Half>) Writes a span of Half values into buffer. public void Write(in ReadOnlySpan<Half> values) Parameters values ReadOnlySpan<Half> Write(in ReadOnlySpan<Int128>) Writes a span of Int128 value into buffer. public void Write(in ReadOnlySpan<Int128> value) Parameters value ReadOnlySpan<Int128> Write(in ReadOnlySpan<short>) Writes a span of short value into buffer. public void Write(in ReadOnlySpan<short> value) Parameters value ReadOnlySpan<short> Write(in ReadOnlySpan<int>) Writes a span of int value into buffer. public void Write(in ReadOnlySpan<int> value) Parameters value ReadOnlySpan<int> Write(in ReadOnlySpan<long>) Writes a span of long value into buffer. public void Write(in ReadOnlySpan<long> value) Parameters value ReadOnlySpan<long> Write(in ReadOnlySpan<sbyte>) Writes a span of sbyte value into buffer. public void Write(in ReadOnlySpan<sbyte> value) Parameters value ReadOnlySpan<sbyte> Write(in ReadOnlySpan<float>) Writes a span of float values into buffer. public void Write(in ReadOnlySpan<float> values) Parameters values ReadOnlySpan<float> Write(in ReadOnlySpan<TimeOnly>) Writes a span of TimeOnly values into buffer. public void Write(in ReadOnlySpan<TimeOnly> values) Parameters values ReadOnlySpan<TimeOnly> Write(in ReadOnlySpan<TimeSpan>) Writes a span of TimeSpan values into buffer. public void Write(in ReadOnlySpan<TimeSpan> values) Parameters values ReadOnlySpan<TimeSpan> Write(in ReadOnlySpan<UInt128>) Writes a span of UInt128 values into buffer. public void Write(in ReadOnlySpan<UInt128> values) Parameters values ReadOnlySpan<UInt128> Write(in ReadOnlySpan<ushort>) Writes a span of ushort value into buffer. public void Write(in ReadOnlySpan<ushort> value) Parameters value ReadOnlySpan<ushort> Write(in ReadOnlySpan<uint>) Writes a span of uint value into buffer. public void Write(in ReadOnlySpan<uint> value) Parameters value ReadOnlySpan<uint> Write(in ReadOnlySpan<ulong>) Writes a span of ulong value into buffer. public void Write(in ReadOnlySpan<ulong> value) Parameters value ReadOnlySpan<ulong> Write(in sbyte) Writes single sbyte value into buffer. public void Write(in sbyte value) Parameters value sbyte Write(in float) Writes single float value into buffer. public void Write(in float value) Parameters value float Write(in StringBuilder) Writes an StringBuilder value into buffer. public void Write(in StringBuilder value) Parameters value StringBuilder Write(in TimeOnly) Writes single TimeOnly value into buffer. public void Write(in TimeOnly value) Parameters value TimeOnly Write(in TimeSpan) Writes single TimeSpan value into buffer. public void Write(in TimeSpan value) Parameters value TimeSpan Write(in UInt128) Writes single UInt128 value into buffer. public void Write(in UInt128 value) Parameters value UInt128 Write(in ushort) Writes single ushort value into buffer. public void Write(in ushort value) Parameters value ushort Write(in uint) Writes single uint value into buffer. public void Write(in uint value) Parameters value uint Write(in ulong) Writes single ulong value into buffer. public void Write(in ulong value) Parameters value ulong WriteAsByte<T>(in List<T>) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsByte<T>(in T?) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsByte<T>(in ReadOnlySpan<T>) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsByte<T>(in T) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsByte<T>(in T[]) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt128<T>(in List<T>) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt128<T>(in T?) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt128<T>(in ReadOnlySpan<T>) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt128<T>(in T) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt128<T>(in T[]) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt16<T>(in List<T>) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt16<T>(in T?) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt16<T>(in ReadOnlySpan<T>) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt16<T>(in T) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt16<T>(in T[]) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt32<T>(in List<T>) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt32<T>(in T?) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt32<T>(in ReadOnlySpan<T>) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt32<T>(in T) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt32<T>(in T[]) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt64<T>(in List<T>) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt64<T>(in T?) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt64<T>(in ReadOnlySpan<T>) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt64<T>(in T) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt64<T>(in T[]) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsSByte<T>(in List<T>) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsSByte<T>(in T?) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsSByte<T>(in ReadOnlySpan<T>) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsSByte<T>(in T) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsSByte<T>(in T[]) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt128<T>(in List<T>) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt128<T>(in T?) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt128<T>(in ReadOnlySpan<T>) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt128<T>(in T) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt128<T>(in T[]) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt16<T>(in List<T>) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt16<T>(in T?) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt16<T>(in ReadOnlySpan<T>) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt16<T>(in T) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt16<T>(in T[]) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt32<T>(in List<T>) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt32<T>(in T?) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt32<T>(in ReadOnlySpan<T>) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt32<T>(in T) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt32<T>(in T[]) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt64<T>(in List<T>) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt64<T>(in T?) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt64<T>(in ReadOnlySpan<T>) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt64<T>(in T) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt64<T>(in T[]) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteNullable<T>(T?) Writes a maybe null IBinarySerializable value into buffer. public void WriteNullable<T>(T? value) where T : class, IBinarySerializable Parameters value T Type Parameters T A nullable reference type that implements IBinarySerializable. WriteNumber<T>(in T?) Writes a IBinaryInteger<TSelf> value into buffer. public void WriteNumber<T>(in T? value) where T : unmanaged, IBinaryInteger<T> Parameters value T? Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. WriteNumber<T>(in T) Writes a IBinaryInteger<TSelf> value into buffer. public void WriteNumber<T>(in T value) where T : unmanaged, IBinaryInteger<T> Parameters value T Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. WriteString(in string, int) Writes an string value into buffer. public void WriteString(in string value, int size) Parameters value string size int WriteStruct<T>(in List<T>) Writes an unmanaged struct list into buffer. public void WriteStruct<T>(in List<T> values) where T : unmanaged Parameters values List<T> Type Parameters T WriteStruct<T>(in T?) Writes an unmanaged struct into buffer. public void WriteStruct<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteStruct<T>(in ReadOnlySpan<T>) Writes an unmanaged struct span into buffer. public void WriteStruct<T>(in ReadOnlySpan<T> values) where T : unmanaged Parameters values ReadOnlySpan<T> Type Parameters T WriteStruct<T>(in T) Writes an unmanaged struct into buffer. public void WriteStruct<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteStruct<T>(in T[]) Writes an unmanaged struct span into buffer. public void WriteStruct<T>(in T[] values) where T : unmanaged Parameters values T[] Type Parameters T WriteUtf8String(in List<char>) Writes a list of bytes of UTF char values into buffer. public void WriteUtf8String(in List<char> values) Parameters values List<char> WriteUtf8String(in ReadOnlySpan<char>) Writes an string value into buffer as UTF8. public void WriteUtf8String(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> Write<T>(in CircularBuffer<T>) Writes the buffer of IBinarySerializable values into buffer. public void Write<T>(in CircularBuffer<T> values) where T : IBinarySerializable Parameters values CircularBuffer<T> Type Parameters T A type that implements IBinarySerializable. Write<T>(in List<T>) Writes list of IBinarySerializable values into buffer. public void Write<T>(in List<T> values) where T : IBinarySerializable Parameters values List<T> Type Parameters T A type that implements IBinarySerializable. Write<T>(ref readonly T?) Writes a IBinarySerializable value into buffer. public void Write<T>(ref readonly T? value) where T : struct, IBinarySerializable Parameters value T? Type Parameters T A type that implements IBinarySerializable. Write<T>(in ReadOnlySpan<T>) Writes span of IBinarySerializable values into buffer. public void Write<T>(in ReadOnlySpan<T> values) where T : IBinarySerializable Parameters values ReadOnlySpan<T> Type Parameters T A type that implements IBinarySerializable. Write<T>(T) Writes a IBinarySerializable value into buffer. public void Write<T>(T value) where T : class, IBinarySerializable Parameters value T Type Parameters T A type that implements IBinarySerializable. Write<T>(T?, bool) Writes a IBinarySerializable value into buffer. public void Write<T>(T? value, bool nullable) where T : class, IBinarySerializable Parameters value T Value to be written nullable bool If true write as nullable reference type. Type Parameters T A type that implements IBinarySerializable. Write<T>(ref readonly T) Writes a IBinarySerializable value into buffer. public void Write<T>(ref readonly T value) where T : struct, IBinarySerializable Parameters value T Type Parameters T A type that implements IBinarySerializable. Write<T>(in T[]) Writes array of IBinarySerializable values into buffer. public void Write<T>(in T[] values) where T : IBinarySerializable Parameters values T[] Type Parameters T A type that implements IBinarySerializable."
  },
  "api/Backdash.Serialization.BinarySerializerAttribute-1.html": {
    "href": "api/Backdash.Serialization.BinarySerializerAttribute-1.html",
    "title": "Class BinarySerializerAttribute<TState> | Backdash Netcode",
    "summary": "Class BinarySerializerAttribute<TState> Namespace Backdash.Serialization Assembly Backdash.dll Enable game state serializer source generator for TState. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)] public sealed class BinarySerializerAttribute<TState> : Attribute Type Parameters TState Game State Type Inheritance object Attribute BinarySerializerAttribute<TState> Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.GetType() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors BinarySerializerAttribute() public BinarySerializerAttribute()"
  },
  "api/Backdash.Serialization.BinarySpanWriter.html": {
    "href": "api/Backdash.Serialization.BinarySpanWriter.html",
    "title": "Struct BinarySpanWriter | Backdash Netcode",
    "summary": "Struct BinarySpanWriter Namespace Backdash.Serialization Assembly Backdash.dll Binary span writer. public readonly ref struct BinarySpanWriter Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Extension Methods NumericsExtensions.Write(in BinarySpanWriter, in Quaternion) NumericsExtensions.Write(in BinarySpanWriter, in Vector2) NumericsExtensions.Write(in BinarySpanWriter, in Vector3) NumericsExtensions.Write(in BinarySpanWriter, in Vector4) Constructors BinarySpanWriter(scoped in Span<byte>, ref int, Endianness?) Initialize a new BinarySpanWriter for buffer public BinarySpanWriter(scoped in Span<byte> buffer, ref int offset, Endianness? endianness = null) Parameters buffer Span<byte> Byte buffer to be written offset int Write offset reference endianness Endianness? Serialization endianness Fields Endianness Gets or init the value to define which endianness should be used for serialization. public readonly Endianness Endianness Field Value Endianness Properties Capacity Total buffer capacity in bytes. public int Capacity { get; } Property Value int CurrentBuffer Returns a Span<T> for the current available buffer. public Span<byte> CurrentBuffer { get; } Property Value Span<byte> FreeCapacity Available buffer space in bytes public int FreeCapacity { get; } Property Value int WrittenCount Total written byte count. public int WrittenCount { get; } Property Value int Methods Advance(int) Advance write pointer by count. public void Advance(int count) Parameters count int Write(in Frame) Writes single Frame value into buffer. public void Write(in Frame value) Parameters value Frame Write(in bool) Writes single bool value into buffer. public void Write(in bool value) Parameters value bool Write(in byte) Writes single byte value into buffer. public void Write(in byte value) Parameters value byte Write(in char) Writes single char value into buffer. public void Write(in char value) Parameters value char Write(in List<Frame>) Writes a list Frame values into buffer. public void Write(in List<Frame> values) Parameters values List<Frame> Write(in List<bool>) Writes a list of bool values into buffer. public void Write(in List<bool> values) Parameters values List<bool> Write(in List<byte>) Writes a list of byte values into buffer. public void Write(in List<byte> values) Parameters values List<byte> Write(in List<char>) Writes a list of char values into buffer. public void Write(in List<char> values) Parameters values List<char> Write(in List<DateOnly>) Writes a list DateOnly values into buffer. public void Write(in List<DateOnly> values) Parameters values List<DateOnly> Write(in List<DateTimeOffset>) Writes a list of DateTimeOffset values into buffer. public void Write(in List<DateTimeOffset> values) Parameters values List<DateTimeOffset> Write(in List<DateTime>) Writes a list of DateTime values into buffer. public void Write(in List<DateTime> values) Parameters values List<DateTime> Write(in List<double>) Writes a list of double values into buffer. public void Write(in List<double> values) Parameters values List<double> Write(in List<Guid>) Writes a list of Guid values into buffer. public void Write(in List<Guid> values) Parameters values List<Guid> Write(in List<Half>) Writes a list of Half values into buffer. public void Write(in List<Half> values) Parameters values List<Half> Write(in List<Int128>) Writes a list of Int128 values into buffer. public void Write(in List<Int128> values) Parameters values List<Int128> Write(in List<short>) Writes a list of short values into buffer. public void Write(in List<short> values) Parameters values List<short> Write(in List<int>) Writes a list of int values into buffer. public void Write(in List<int> values) Parameters values List<int> Write(in List<long>) Writes a list of long values into buffer. public void Write(in List<long> values) Parameters values List<long> Write(in List<sbyte>) Writes a list of sbyte values into buffer. public void Write(in List<sbyte> values) Parameters values List<sbyte> Write(in List<float>) Writes a list of float values into buffer. public void Write(in List<float> values) Parameters values List<float> Write(in List<TimeOnly>) Writes a list of TimeOnly values into buffer. public void Write(in List<TimeOnly> values) Parameters values List<TimeOnly> Write(in List<TimeSpan>) Writes a list of TimeSpan values into buffer. public void Write(in List<TimeSpan> values) Parameters values List<TimeSpan> Write(in List<UInt128>) Writes a list of UInt128 values into buffer. public void Write(in List<UInt128> values) Parameters values List<UInt128> Write(in List<ushort>) Writes a list of ushort values into buffer. public void Write(in List<ushort> values) Parameters values List<ushort> Write(in List<uint>) Writes a list of uint values into buffer. public void Write(in List<uint> values) Parameters values List<uint> Write(in List<ulong>) Writes a list of ulong values into buffer. public void Write(in List<ulong> values) Parameters values List<ulong> Write(in DateOnly) Writes single DateOnly value into buffer. public void Write(in DateOnly value) Parameters value DateOnly Write(in DateTime) Writes single DateTime value into buffer. public void Write(in DateTime value) Parameters value DateTime Write(in DateTimeOffset) Writes single DateTimeOffset value into buffer. public void Write(in DateTimeOffset value) Parameters value DateTimeOffset Write(in double) Writes single double value into buffer. public void Write(in double value) Parameters value double Write(in Guid) Writes single Guid value into buffer. public void Write(in Guid value) Parameters value Guid Write(in Half) Writes single Half value into buffer. public void Write(in Half value) Parameters value Half Write(in Int128) Writes single Int128 value into buffer. public void Write(in Int128 value) Parameters value Int128 Write(in short) Writes single short value into buffer. public void Write(in short value) Parameters value short Write(in int) Writes single int value into buffer. public void Write(in int value) Parameters value int Write(in long) Writes single long value into buffer. public void Write(in long value) Parameters value long Write(in Frame?) Writes single Frame value into buffer. public void Write(in Frame? value) Parameters value Frame? Write(in bool?) Writes single bool value into buffer. public void Write(in bool? value) Parameters value bool? Write(in byte?) Writes single byte value into buffer. public void Write(in byte? value) Parameters value byte? Write(in char?) Writes single char value into buffer. public void Write(in char? value) Parameters value char? Write(in DateOnly?) Writes single DateOnly value into buffer. public void Write(in DateOnly? value) Parameters value DateOnly? Write(in DateTimeOffset?) Writes single DateTimeOffset value into buffer. public void Write(in DateTimeOffset? value) Parameters value DateTimeOffset? Write(in DateTime?) Writes single DateTime value into buffer. public void Write(in DateTime? value) Parameters value DateTime? Write(in double?) Writes single double value into buffer. public void Write(in double? value) Parameters value double? Write(in Guid?) Writes single Guid value into buffer. public void Write(in Guid? value) Parameters value Guid? Write(in Half?) Writes single Half value into buffer. public void Write(in Half? value) Parameters value Half? Write(in Int128?) Writes single Int128 value into buffer. public void Write(in Int128? value) Parameters value Int128? Write(in short?) Writes single short value into buffer. public void Write(in short? value) Parameters value short? Write(in int?) Writes single int value into buffer. public void Write(in int? value) Parameters value int? Write(in long?) Writes single long value into buffer. public void Write(in long? value) Parameters value long? Write(in sbyte?) Writes single sbyte value into buffer. public void Write(in sbyte? value) Parameters value sbyte? Write(in float?) Writes single float value into buffer. public void Write(in float? value) Parameters value float? Write(in TimeOnly?) Writes single TimeOnly value into buffer. public void Write(in TimeOnly? value) Parameters value TimeOnly? Write(in TimeSpan?) Writes single TimeSpan value into buffer. public void Write(in TimeSpan? value) Parameters value TimeSpan? Write(in UInt128?) Writes single UInt128 value into buffer. public void Write(in UInt128? value) Parameters value UInt128? Write(in ushort?) Writes single ushort value into buffer. public void Write(in ushort? value) Parameters value ushort? Write(in uint?) Writes single uint value into buffer. public void Write(in uint? value) Parameters value uint? Write(in ulong?) Writes single ulong value into buffer. public void Write(in ulong? value) Parameters value ulong? Write(in ReadOnlySpan<Frame>) Writes a span of Frame values into buffer. public void Write(in ReadOnlySpan<Frame> values) Parameters values ReadOnlySpan<Frame> Write(in ReadOnlySpan<bool>) Writes a span of bool value into buffer. public void Write(in ReadOnlySpan<bool> value) Parameters value ReadOnlySpan<bool> Write(in ReadOnlySpan<byte>) Writes a span of byte value into buffer. public void Write(in ReadOnlySpan<byte> value) Parameters value ReadOnlySpan<byte> Write(in ReadOnlySpan<char>) Writes a span of char value into buffer. public void Write(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> Write(in ReadOnlySpan<DateOnly>) Writes a span of DateOnly values into buffer. public void Write(in ReadOnlySpan<DateOnly> values) Parameters values ReadOnlySpan<DateOnly> Write(in ReadOnlySpan<DateTimeOffset>) Writes a span of DateTimeOffset values into buffer. public void Write(in ReadOnlySpan<DateTimeOffset> values) Parameters values ReadOnlySpan<DateTimeOffset> Write(in ReadOnlySpan<DateTime>) Writes a span of DateTime values into buffer. public void Write(in ReadOnlySpan<DateTime> values) Parameters values ReadOnlySpan<DateTime> Write(in ReadOnlySpan<double>) Writes a span of double values into buffer. public void Write(in ReadOnlySpan<double> values) Parameters values ReadOnlySpan<double> Write(in ReadOnlySpan<Guid>) Writes a span of Guid values into buffer. public void Write(in ReadOnlySpan<Guid> values) Parameters values ReadOnlySpan<Guid> Write(in ReadOnlySpan<Half>) Writes a span of Half values into buffer. public void Write(in ReadOnlySpan<Half> values) Parameters values ReadOnlySpan<Half> Write(in ReadOnlySpan<Int128>) Writes a span of Int128 value into buffer. public void Write(in ReadOnlySpan<Int128> value) Parameters value ReadOnlySpan<Int128> Write(in ReadOnlySpan<short>) Writes a span of short value into buffer. public void Write(in ReadOnlySpan<short> value) Parameters value ReadOnlySpan<short> Write(in ReadOnlySpan<int>) Writes a span of int value into buffer. public void Write(in ReadOnlySpan<int> value) Parameters value ReadOnlySpan<int> Write(in ReadOnlySpan<long>) Writes a span of long value into buffer. public void Write(in ReadOnlySpan<long> value) Parameters value ReadOnlySpan<long> Write(in ReadOnlySpan<sbyte>) Writes a span of sbyte value into buffer. public void Write(in ReadOnlySpan<sbyte> value) Parameters value ReadOnlySpan<sbyte> Write(in ReadOnlySpan<float>) Writes a span of float values into buffer. public void Write(in ReadOnlySpan<float> values) Parameters values ReadOnlySpan<float> Write(in ReadOnlySpan<TimeOnly>) Writes a span of TimeOnly values into buffer. public void Write(in ReadOnlySpan<TimeOnly> values) Parameters values ReadOnlySpan<TimeOnly> Write(in ReadOnlySpan<TimeSpan>) Writes a span of TimeSpan values into buffer. public void Write(in ReadOnlySpan<TimeSpan> values) Parameters values ReadOnlySpan<TimeSpan> Write(in ReadOnlySpan<UInt128>) Writes a span of UInt128 value into buffer. public void Write(in ReadOnlySpan<UInt128> value) Parameters value ReadOnlySpan<UInt128> Write(in ReadOnlySpan<ushort>) Writes a span of ushort value into buffer. public void Write(in ReadOnlySpan<ushort> value) Parameters value ReadOnlySpan<ushort> Write(in ReadOnlySpan<uint>) Writes a span of uint value into buffer. public void Write(in ReadOnlySpan<uint> value) Parameters value ReadOnlySpan<uint> Write(in ReadOnlySpan<ulong>) Writes a span of ulong value into buffer. public void Write(in ReadOnlySpan<ulong> value) Parameters value ReadOnlySpan<ulong> Write(in sbyte) Writes single sbyte value into buffer. public void Write(in sbyte value) Parameters value sbyte Write(in float) Writes single float value into buffer. public void Write(in float value) Parameters value float Write(in TimeOnly) Writes single TimeOnly value into buffer. public void Write(in TimeOnly value) Parameters value TimeOnly Write(in TimeSpan) Writes single TimeSpan value into buffer. public void Write(in TimeSpan value) Parameters value TimeSpan Write(in UInt128) Writes single UInt128 value into buffer. public void Write(in UInt128 value) Parameters value UInt128 Write(in ushort) Writes single ushort value into buffer. public void Write(in ushort value) Parameters value ushort Write(in uint) Writes single uint value into buffer. public void Write(in uint value) Parameters value uint Write(in ulong) Writes single ulong value into buffer. public void Write(in ulong value) Parameters value ulong WriteAsByte<T>(in List<T>) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsByte<T>(in T?) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsByte<T>(in ReadOnlySpan<T>) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsByte<T>(in T) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsByte<T>(in T[]) Reinterprets the value as byte and writes it into buffer. public void WriteAsByte<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt128<T>(in List<T>) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt128<T>(in T?) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt128<T>(in ReadOnlySpan<T>) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt128<T>(in T) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt128<T>(in T[]) Reinterprets the value as Int128 and writes it into buffer. public void WriteAsInt128<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt16<T>(in List<T>) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt16<T>(in T?) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt16<T>(in ReadOnlySpan<T>) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt16<T>(in T) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt16<T>(in T[]) Reinterprets the value as short and writes it into buffer. public void WriteAsInt16<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt32<T>(in List<T>) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt32<T>(in T?) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt32<T>(in ReadOnlySpan<T>) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt32<T>(in T) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt32<T>(in T[]) Reinterprets the value as int and writes it into buffer. public void WriteAsInt32<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsInt64<T>(in List<T>) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsInt64<T>(in T?) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsInt64<T>(in ReadOnlySpan<T>) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsInt64<T>(in T) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsInt64<T>(in T[]) Reinterprets the value as long and writes it into buffer. public void WriteAsInt64<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsSByte<T>(in List<T>) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsSByte<T>(in T?) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsSByte<T>(in ReadOnlySpan<T>) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsSByte<T>(in T) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsSByte<T>(in T[]) Reinterprets the value as sbyte and writes it into buffer. public void WriteAsSByte<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt128<T>(in List<T>) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt128<T>(in T?) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt128<T>(in ReadOnlySpan<T>) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt128<T>(in T) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt128<T>(in T[]) Reinterprets the value as UInt128 and writes it into buffer. public void WriteAsUInt128<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt16<T>(in List<T>) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt16<T>(in T?) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt16<T>(in ReadOnlySpan<T>) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt16<T>(in T) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt16<T>(in T[]) Reinterprets the value as ushort and writes it into buffer. public void WriteAsUInt16<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt32<T>(in List<T>) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt32<T>(in T?) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt32<T>(in ReadOnlySpan<T>) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt32<T>(in T) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt32<T>(in T[]) Reinterprets the value as uint and writes it into buffer. public void WriteAsUInt32<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteAsUInt64<T>(in List<T>) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in List<T> value) where T : unmanaged Parameters value List<T> Type Parameters T WriteAsUInt64<T>(in T?) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in T? value) where T : unmanaged Parameters value T? Type Parameters T WriteAsUInt64<T>(in ReadOnlySpan<T>) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in ReadOnlySpan<T> value) where T : unmanaged Parameters value ReadOnlySpan<T> Type Parameters T WriteAsUInt64<T>(in T) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteAsUInt64<T>(in T[]) Reinterprets the value as ulong and writes it into buffer. public void WriteAsUInt64<T>(in T[] value) where T : unmanaged Parameters value T[] Type Parameters T WriteNumber<T>(in T?) Writes a IBinaryInteger<TSelf> value into buffer. public void WriteNumber<T>(in T? value) where T : unmanaged, IBinaryInteger<T> Parameters value T? Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. WriteNumber<T>(in T) Writes a IBinaryInteger<TSelf> value into buffer. public void WriteNumber<T>(in T value) where T : unmanaged, IBinaryInteger<T> Parameters value T Type Parameters T A numeric type that implements IBinaryInteger<TSelf>. WriteStruct<T>(ReadOnlySpan<T>) Writes an unmanaged struct span into buffer. public void WriteStruct<T>(ReadOnlySpan<T> values) where T : unmanaged Parameters values ReadOnlySpan<T> Type Parameters T WriteStruct<T>(in T) Writes an unmanaged struct into buffer. public void WriteStruct<T>(in T value) where T : unmanaged Parameters value T Type Parameters T WriteStruct<T>(in T[]) Writes an unmanaged struct span into buffer. public void WriteStruct<T>(in T[] values) where T : unmanaged Parameters values T[] Type Parameters T WriteUtf8String(in ReadOnlySpan<char>) Writes an string value into buffer as UTF8. public void WriteUtf8String(in ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char>"
  },
  "api/Backdash.Serialization.IBinarySerializable.html": {
    "href": "api/Backdash.Serialization.IBinarySerializable.html",
    "title": "Interface IBinarySerializable | Backdash Netcode",
    "summary": "Interface IBinarySerializable Namespace Backdash.Serialization Assembly Backdash.dll Make the type Binary Serializable public interface IBinarySerializable Methods Deserialize(ref readonly BinaryBufferReader) Deserialize the current instance using BinaryBufferReader void Deserialize(ref readonly BinaryBufferReader reader) Parameters reader BinaryBufferReader Binary reader Serialize(ref readonly BinaryBufferWriter) Serialize the current instance using BinarySpanWriter void Serialize(ref readonly BinaryBufferWriter writer) Parameters writer BinaryBufferWriter Binary writer"
  },
  "api/Backdash.Serialization.IBinarySerializer-1.html": {
    "href": "api/Backdash.Serialization.IBinarySerializer-1.html",
    "title": "Interface IBinarySerializer<T> | Backdash Netcode",
    "summary": "Interface IBinarySerializer<T> Namespace Backdash.Serialization Assembly Backdash.dll Binary serializer for T public interface IBinarySerializer<T> Type Parameters T Type to be serialized. Properties Endianness Get the Endianness used for serialization Endianness Endianness { get; } Property Value Endianness Methods Deserialize(ReadOnlySpan<byte>, ref T) Deserialize data into value int Deserialize(ReadOnlySpan<byte> data, ref T value) Parameters data ReadOnlySpan<byte> value T Returns int Serialize(in T, Span<byte>) Serialize data into buffer int Serialize(in T data, Span<byte> buffer) Parameters data T buffer Span<byte> Returns int"
  },
  "api/Backdash.Serialization.Numerics.NumericsExtensions.html": {
    "href": "api/Backdash.Serialization.Numerics.NumericsExtensions.html",
    "title": "Class NumericsExtensions | Backdash Netcode",
    "summary": "Class NumericsExtensions Namespace Backdash.Serialization.Numerics Assembly Backdash.dll Serialization extensions for System System.Numerics public static class NumericsExtensions Inheritance object NumericsExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Read(in BinaryBufferReader, ref Quaternion?) Reads single Quaternion from buffer. public static void Read(this in BinaryBufferReader reader, ref Quaternion? value) Parameters reader BinaryBufferReader value Quaternion? Read(in BinaryBufferReader, ref Vector2?) Reads single Vector2 from buffer. public static void Read(this in BinaryBufferReader reader, ref Vector2? value) Parameters reader BinaryBufferReader value Vector2? Read(in BinaryBufferReader, ref Vector3?) Reads single Vector3 from buffer. public static void Read(this in BinaryBufferReader reader, ref Vector3? value) Parameters reader BinaryBufferReader value Vector3? Read(in BinaryBufferReader, ref Vector4?) Reads single Vector4 from buffer. public static void Read(this in BinaryBufferReader reader, ref Vector4? value) Parameters reader BinaryBufferReader value Vector4? Read(in BinaryBufferReader, ref Quaternion) Reads single Quaternion from buffer. public static void Read(this in BinaryBufferReader reader, ref Quaternion value) Parameters reader BinaryBufferReader value Quaternion Read(in BinaryBufferReader, ref Vector2) Reads single Vector2 from buffer. public static void Read(this in BinaryBufferReader reader, ref Vector2 value) Parameters reader BinaryBufferReader value Vector2 Read(in BinaryBufferReader, ref Vector3) Reads single Vector3 from buffer. public static void Read(this in BinaryBufferReader reader, ref Vector3 value) Parameters reader BinaryBufferReader value Vector3 Read(in BinaryBufferReader, ref Vector4) Reads single Vector4 from buffer. public static void Read(this in BinaryBufferReader reader, ref Vector4 value) Parameters reader BinaryBufferReader value Vector4 ReadNullableQuaternion(in BinaryBufferReader) Reads single Quaternion from buffer. public static Quaternion? ReadNullableQuaternion(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Quaternion? ReadNullableVector2(in BinaryBufferReader) Reads single Vector2 from buffer. public static Vector2? ReadNullableVector2(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Vector2? ReadNullableVector3(in BinaryBufferReader) Reads single Vector3 from buffer. public static Vector3? ReadNullableVector3(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Vector3? ReadNullableVector4(in BinaryBufferReader) Reads single Vector4 from buffer. public static Vector4? ReadNullableVector4(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Vector4? ReadQuaternion(in BinaryBufferReader) Reads single Quaternion from buffer. public static Quaternion ReadQuaternion(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Quaternion ReadVector2(in BinaryBufferReader) Reads single Vector2 from buffer. public static Vector2 ReadVector2(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Vector2 ReadVector3(in BinaryBufferReader) Reads single Vector3 from buffer. public static Vector3 ReadVector3(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Vector3 ReadVector4(in BinaryBufferReader) Reads single Vector4 from buffer. public static Vector4 ReadVector4(this in BinaryBufferReader reader) Parameters reader BinaryBufferReader Returns Vector4 Write(in BinaryBufferWriter, in Quaternion?) Writes single Quaternion value into buffer. public static void Write(this in BinaryBufferWriter writer, in Quaternion? value) Parameters writer BinaryBufferWriter value Quaternion? Write(in BinaryBufferWriter, in Vector2?) Writes single Vector2 value into buffer. public static void Write(this in BinaryBufferWriter writer, in Vector2? value) Parameters writer BinaryBufferWriter value Vector2? Write(in BinaryBufferWriter, in Vector3?) Writes single Vector3 value into buffer. public static void Write(this in BinaryBufferWriter writer, in Vector3? value) Parameters writer BinaryBufferWriter value Vector3? Write(in BinaryBufferWriter, in Vector4?) Writes single Vector4 value into buffer. public static void Write(this in BinaryBufferWriter writer, in Vector4? value) Parameters writer BinaryBufferWriter value Vector4? Write(in BinaryBufferWriter, in Quaternion) Writes single Quaternion value into buffer. public static void Write(this in BinaryBufferWriter writer, in Quaternion value) Parameters writer BinaryBufferWriter value Quaternion Write(in BinaryBufferWriter, in Vector2) Writes single Vector2 value into buffer. public static void Write(this in BinaryBufferWriter writer, in Vector2 value) Parameters writer BinaryBufferWriter value Vector2 Write(in BinaryBufferWriter, in Vector3) Writes single Vector3 value into buffer. public static void Write(this in BinaryBufferWriter writer, in Vector3 value) Parameters writer BinaryBufferWriter value Vector3 Write(in BinaryBufferWriter, in Vector4) Writes single Vector4 value into buffer. public static void Write(this in BinaryBufferWriter writer, in Vector4 value) Parameters writer BinaryBufferWriter value Vector4 Write(in BinarySpanWriter, in Quaternion) Writes single Quaternion value into buffer. public static void Write(this in BinarySpanWriter writer, in Quaternion value) Parameters writer BinarySpanWriter value Quaternion Write(in BinarySpanWriter, in Vector2) Writes single Vector2 value into buffer. public static void Write(this in BinarySpanWriter writer, in Vector2 value) Parameters writer BinarySpanWriter value Vector2 Write(in BinarySpanWriter, in Vector3) Writes single Vector3 value into buffer. public static void Write(this in BinarySpanWriter writer, in Vector3 value) Parameters writer BinarySpanWriter value Vector3 Write(in BinarySpanWriter, in Vector4) Writes single Vector4 value into buffer. public static void Write(this in BinarySpanWriter writer, in Vector4 value) Parameters writer BinarySpanWriter value Vector4"
  },
  "api/Backdash.Serialization.Numerics.html": {
    "href": "api/Backdash.Serialization.Numerics.html",
    "title": "Namespace Backdash.Serialization.Numerics | Backdash Netcode",
    "summary": "Namespace Backdash.Serialization.Numerics Classes NumericsExtensions Serialization extensions for System System.Numerics"
  },
  "api/Backdash.Serialization.html": {
    "href": "api/Backdash.Serialization.html",
    "title": "Namespace Backdash.Serialization | Backdash Netcode",
    "summary": "Namespace Backdash.Serialization Classes BinarySerializerAttribute<TState> Enable game state serializer source generator for TState. Structs BinaryBufferReader Binary span reader. BinaryBufferWriter Binary span writer. BinarySpanWriter Binary span writer. Interfaces IBinarySerializable Make the type Binary Serializable IBinarySerializer<T> Binary serializer for T"
  },
  "api/Backdash.SessionMode.html": {
    "href": "api/Backdash.SessionMode.html",
    "title": "Enum SessionMode | Backdash Netcode",
    "summary": "Enum SessionMode Namespace Backdash Assembly Backdash.dll Defines the mode of INetcodeSession<TInput>> public enum SessionMode : byte Fields Local = 1 Local only session Remote = 0 Normal P2P match session Replay = 3 Replay session Spectator = 2 Spectator session SyncTest = 4 Special sync test session"
  },
  "api/Backdash.SynchronizedEventInfo.html": {
    "href": "api/Backdash.SynchronizedEventInfo.html",
    "title": "Struct SynchronizedEventInfo | Backdash Netcode",
    "summary": "Struct SynchronizedEventInfo Namespace Backdash Assembly Backdash.dll Data for Synchronized event. public readonly struct SynchronizedEventInfo : IEquatable<SynchronizedEventInfo> Implements IEquatable<SynchronizedEventInfo> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors SynchronizedEventInfo(TimeSpan) Data for Synchronized event. public SynchronizedEventInfo(TimeSpan Ping) Parameters Ping TimeSpan Current ping Properties Ping Current ping public TimeSpan Ping { get; init; } Property Value TimeSpan Methods Deconstruct(out TimeSpan) public void Deconstruct(out TimeSpan Ping) Parameters Ping TimeSpan Equals(SynchronizedEventInfo) public bool Equals(SynchronizedEventInfo other) Parameters other SynchronizedEventInfo Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(SynchronizedEventInfo, SynchronizedEventInfo) public static bool operator ==(SynchronizedEventInfo left, SynchronizedEventInfo right) Parameters left SynchronizedEventInfo right SynchronizedEventInfo Returns bool operator !=(SynchronizedEventInfo, SynchronizedEventInfo) public static bool operator !=(SynchronizedEventInfo left, SynchronizedEventInfo right) Parameters left SynchronizedEventInfo right SynchronizedEventInfo Returns bool"
  },
  "api/Backdash.SynchronizedInput-1.html": {
    "href": "api/Backdash.SynchronizedInput-1.html",
    "title": "Struct SynchronizedInput<T> | Backdash Netcode",
    "summary": "Struct SynchronizedInput<T> Namespace Backdash Assembly Backdash.dll Synchronized input result public readonly struct SynchronizedInput<T> : IEquatable<SynchronizedInput<T>> where T : unmanaged Type Parameters T Type of the Input Implements IEquatable<SynchronizedInput<T>> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors SynchronizedInput(T, bool) Synchronized input result public SynchronizedInput(T Input, bool Disconnected) Parameters Input T The input value Disconnected bool Is true if input owner is disconnected Fields Disconnected Is true if input owner is disconnected public readonly bool Disconnected Field Value bool Input The input value public readonly T Input Field Value T Methods Deconstruct(out T, out bool) public void Deconstruct(out T Input, out bool Disconnected) Parameters Input T Disconnected bool Equals(SynchronizedInput<T>) public bool Equals(SynchronizedInput<T> other) Parameters other SynchronizedInput<T> Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(SynchronizedInput<T>, SynchronizedInput<T>) public static bool operator ==(SynchronizedInput<T> left, SynchronizedInput<T> right) Parameters left SynchronizedInput<T> right SynchronizedInput<T> Returns bool implicit operator T(SynchronizedInput<T>) Returns the input associated with this type public static implicit operator T(SynchronizedInput<T> input) Parameters input SynchronizedInput<T> Returns T implicit operator SynchronizedInput<T>(T) Returns non-disconnected input associated with this type public static implicit operator SynchronizedInput<T>(T input) Parameters input T Returns SynchronizedInput<T> operator !=(SynchronizedInput<T>, SynchronizedInput<T>) public static bool operator !=(SynchronizedInput<T> left, SynchronizedInput<T> right) Parameters left SynchronizedInput<T> right SynchronizedInput<T> Returns bool"
  },
  "api/Backdash.Synchronizing.Input.Confirmed.ConfirmedInputs-1.html": {
    "href": "api/Backdash.Synchronizing.Input.Confirmed.ConfirmedInputs-1.html",
    "title": "Struct ConfirmedInputs<TInput> | Backdash Netcode",
    "summary": "Struct ConfirmedInputs<TInput> Namespace Backdash.Synchronizing.Input.Confirmed Assembly Backdash.dll All confirmed inputs for all players public struct ConfirmedInputs<TInput> : IEquatable<ConfirmedInputs<TInput>> where TInput : unmanaged Type Parameters TInput Implements IEquatable<ConfirmedInputs<TInput>> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors ConfirmedInputs() Initialized ConfirmedInputs<TInput> with full size public ConfirmedInputs() ConfirmedInputs(ReadOnlySpan<TInput>) Initialized ConfirmedInputs<TInput> from span public ConfirmedInputs(ReadOnlySpan<TInput> inputs) Parameters inputs ReadOnlySpan<TInput> Fields Count Number of inputs public byte Count Field Value byte Inputs Input array public InputArray<TInput> Inputs Field Value InputArray<TInput> Methods CopyTo(Span<TInput>) Copy inputs to buffer public readonly void CopyTo(Span<TInput> output) Parameters output Span<TInput> Equals(in ConfirmedInputs<TInput>) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(in ConfirmedInputs<TInput> other) Parameters other ConfirmedInputs<TInput> Returns bool Equals(object?) public override readonly bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int Operators operator ==(in ConfirmedInputs<TInput>, in ConfirmedInputs<TInput>) public static bool operator ==(in ConfirmedInputs<TInput> left, in ConfirmedInputs<TInput> right) Parameters left ConfirmedInputs<TInput> right ConfirmedInputs<TInput> Returns bool operator !=(in ConfirmedInputs<TInput>, in ConfirmedInputs<TInput>) public static bool operator !=(in ConfirmedInputs<TInput> left, in ConfirmedInputs<TInput> right) Parameters left ConfirmedInputs<TInput> right ConfirmedInputs<TInput> Returns bool"
  },
  "api/Backdash.Synchronizing.Input.Confirmed.IInputListener-1.html": {
    "href": "api/Backdash.Synchronizing.Input.Confirmed.IInputListener-1.html",
    "title": "Interface IInputListener<TInput> | Backdash Netcode",
    "summary": "Interface IInputListener<TInput> Namespace Backdash.Synchronizing.Input.Confirmed Assembly Backdash.dll Listen for confirmed input public interface IInputListener<TInput> : IDisposable where TInput : unmanaged Type Parameters TInput Inherited Members IDisposable.Dispose() Methods OnConfirmed(in Frame, ReadOnlySpan<TInput>) New confirmed input event handler void OnConfirmed(in Frame frame, ReadOnlySpan<TInput> inputs) Parameters frame Frame inputs ReadOnlySpan<TInput> OnSessionClose() Session End void OnSessionClose() OnSessionStart(in IBinarySerializer<TInput>) Session Started void OnSessionStart(in IBinarySerializer<TInput> serializer) Parameters serializer IBinarySerializer<TInput>"
  },
  "api/Backdash.Synchronizing.Input.Confirmed.InputArray-1.html": {
    "href": "api/Backdash.Synchronizing.Input.Confirmed.InputArray-1.html",
    "title": "Struct InputArray<TInput> | Backdash Netcode",
    "summary": "Struct InputArray<TInput> Namespace Backdash.Synchronizing.Input.Confirmed Assembly Backdash.dll Array of inputs for all players public struct InputArray<TInput> : IEquatable<InputArray<TInput>> where TInput : unmanaged Type Parameters TInput Implements IEquatable<InputArray<TInput>> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Fields Capacity Max size of InputArray<TInput> public const int Capacity = 4 Field Value int 4 Methods Equals(in InputArray<TInput>) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(in InputArray<TInput> other) Parameters other InputArray<TInput> Returns bool Equals(object?) public override readonly bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override readonly int GetHashCode() Returns int Operators operator ==(in InputArray<TInput>, in InputArray<TInput>) public static bool operator ==(in InputArray<TInput> a, in InputArray<TInput> b) Parameters a InputArray<TInput> b InputArray<TInput> Returns bool operator !=(in InputArray<TInput>, in InputArray<TInput>) public static bool operator !=(in InputArray<TInput> a, in InputArray<TInput> b) Parameters a InputArray<TInput> b InputArray<TInput> Returns bool"
  },
  "api/Backdash.Synchronizing.Input.Confirmed.html": {
    "href": "api/Backdash.Synchronizing.Input.Confirmed.html",
    "title": "Namespace Backdash.Synchronizing.Input.Confirmed | Backdash Netcode",
    "summary": "Namespace Backdash.Synchronizing.Input.Confirmed Structs ConfirmedInputs<TInput> All confirmed inputs for all players InputArray<TInput> Array of inputs for all players Interfaces IInputListener<TInput> Listen for confirmed input"
  },
  "api/Backdash.Synchronizing.Input.IInputProvider-1.html": {
    "href": "api/Backdash.Synchronizing.Input.IInputProvider-1.html",
    "title": "Interface IInputProvider<TInput> | Backdash Netcode",
    "summary": "Interface IInputProvider<TInput> Namespace Backdash.Synchronizing.Input Assembly Backdash.dll Input value provider public interface IInputProvider<out TInput> where TInput : unmanaged Type Parameters TInput Methods Next() Returns the next input TInput Next() Returns TInput"
  },
  "api/Backdash.Synchronizing.Input.RandomInputProvider-1.html": {
    "href": "api/Backdash.Synchronizing.Input.RandomInputProvider-1.html",
    "title": "Class RandomInputProvider<TInput> | Backdash Netcode",
    "summary": "Class RandomInputProvider<TInput> Namespace Backdash.Synchronizing.Input Assembly Backdash.dll Random input value provider public sealed class RandomInputProvider<TInput> : IInputProvider<TInput> where TInput : unmanaged Type Parameters TInput Inheritance object RandomInputProvider<TInput> Implements IInputProvider<TInput> Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Remarks Initializes new RandomInputProvider<TInput> Constructors RandomInputProvider(Random?) Random input value provider public RandomInputProvider(Random? random = null) Parameters random Random Remarks Initializes new RandomInputProvider<TInput> Methods Next() Returns the next input public TInput Next() Returns TInput"
  },
  "api/Backdash.Synchronizing.Input.html": {
    "href": "api/Backdash.Synchronizing.Input.html",
    "title": "Namespace Backdash.Synchronizing.Input | Backdash Netcode",
    "summary": "Namespace Backdash.Synchronizing.Input Classes RandomInputProvider<TInput> Random input value provider Interfaces IInputProvider<TInput> Input value provider"
  },
  "api/Backdash.Synchronizing.Random.IDeterministicRandom-1.html": {
    "href": "api/Backdash.Synchronizing.Random.IDeterministicRandom-1.html",
    "title": "Interface IDeterministicRandom<TInput> | Backdash Netcode",
    "summary": "Interface IDeterministicRandom<TInput> Namespace Backdash.Synchronizing.Random Assembly Backdash.dll Defines a deterministic random number generator public interface IDeterministicRandom<TInput> : INetcodeRandom where TInput : unmanaged Type Parameters TInput Inherited Members INetcodeRandom.Next() INetcodeRandom.NextInt() INetcodeRandom.NextInt(int, int) INetcodeRandom.NextInt(int) INetcodeRandom.NextFloat() INetcodeRandom.InitialSeed INetcodeRandom.CurrentSeed INetcodeRandom.CurrentState Methods SetInitialSeed(uint) Sets the initial state seed void SetInitialSeed(uint value) Parameters value uint UpdateSeed(in Frame, ReadOnlySpan<TInput>, uint) Updates the seed for the current random instance void UpdateSeed(in Frame currentFrame, ReadOnlySpan<TInput> inputs, uint extraState = 0) Parameters currentFrame Frame inputs ReadOnlySpan<TInput> extraState uint"
  },
  "api/Backdash.Synchronizing.Random.INetcodeRandom.html": {
    "href": "api/Backdash.Synchronizing.Random.INetcodeRandom.html",
    "title": "Interface INetcodeRandom | Backdash Netcode",
    "summary": "Interface INetcodeRandom Namespace Backdash.Synchronizing.Random Assembly Backdash.dll Defines a random number generator public interface INetcodeRandom Properties CurrentSeed Returns the current seed uint CurrentSeed { get; } Property Value uint CurrentState Returns the rng state uint CurrentState { get; } Property Value uint InitialSeed Returns the initial seed uint InitialSeed { get; } Property Value uint Methods Next() Returns a random unsigned integer. uint Next() Returns uint NextFloat() Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0. float NextFloat() Returns float NextInt() Returns a random non-negative integer. int NextInt() Returns int NextInt(int) Returns a random integer that is between 0 and maxValue int NextInt(int maxValue) Parameters maxValue int Returns int NextInt(int, int) Returns a random integer that is within a specified range. int NextInt(int minValue, int maxValue) Parameters minValue int maxValue int Returns int"
  },
  "api/Backdash.Synchronizing.Random.XorShiftRandom-1.html": {
    "href": "api/Backdash.Synchronizing.Random.XorShiftRandom-1.html",
    "title": "Class XorShiftRandom<TInput> | Backdash Netcode",
    "summary": "Class XorShiftRandom<TInput> Namespace Backdash.Synchronizing.Random Assembly Backdash.dll XOR Shift random number generators (shift-register generators) implementation IDeterministicRandom<TInput> public sealed class XorShiftRandom<TInput> : IDeterministicRandom<TInput>, INetcodeRandom where TInput : unmanaged Type Parameters TInput Inheritance object XorShiftRandom<TInput> Implements IDeterministicRandom<TInput> INetcodeRandom Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors XorShiftRandom() public XorShiftRandom() Properties CurrentSeed Returns the current seed public uint CurrentSeed { get; } Property Value uint CurrentState Returns the rng state public uint CurrentState { get; } Property Value uint InitialSeed Returns the initial seed public uint InitialSeed { get; } Property Value uint Methods Next() Returns a random unsigned integer. public uint Next() Returns uint SetInitialSeed(uint) Sets the initial state seed public void SetInitialSeed(uint value) Parameters value uint UpdateSeed(in Frame, ReadOnlySpan<TInput>, uint) public void UpdateSeed(in Frame currentFrame, ReadOnlySpan<TInput> inputs, uint extraState = 0) Parameters currentFrame Frame inputs ReadOnlySpan<TInput> extraState uint"
  },
  "api/Backdash.Synchronizing.Random.html": {
    "href": "api/Backdash.Synchronizing.Random.html",
    "title": "Namespace Backdash.Synchronizing.Random | Backdash Netcode",
    "summary": "Namespace Backdash.Synchronizing.Random Classes XorShiftRandom<TInput> XOR Shift random number generators (shift-register generators) implementation IDeterministicRandom<TInput> Interfaces IDeterministicRandom<TInput> Defines a deterministic random number generator INetcodeRandom Defines a random number generator"
  },
  "api/Backdash.Synchronizing.SessionReplayControl.html": {
    "href": "api/Backdash.Synchronizing.SessionReplayControl.html",
    "title": "Class SessionReplayControl | Backdash Netcode",
    "summary": "Class SessionReplayControl Namespace Backdash.Synchronizing Assembly Backdash.dll Control flow of a Replay session. ForReplay(Action<SessionReplayOptions<TInput>>?) public class SessionReplayControl Inheritance object SessionReplayControl Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors SessionReplayControl() public SessionReplayControl() Properties IsBackward true if replay will flow backwards public bool IsBackward { get; set; } Property Value bool IsPaused true if replay is paused public bool IsPaused { get; } Property Value bool MaxBackwardFrames Maximum number of frames for backward play on Replays Defaults to 300 (5 seconds in 60 fps) public int MaxBackwardFrames { get; init; } Property Value int Methods Pause() Pause replay. IsPaused public void Pause() Play(bool) Unpause state IsPaused public void Play(bool isBackwards = false) Parameters isBackwards bool ToggleBackwards() Toggle replay backward. IsBackward public void ToggleBackwards() TogglePause() Toggle replay pause. IsPaused public void TogglePause()"
  },
  "api/Backdash.Synchronizing.State.ChecksumDelegate.html": {
    "href": "api/Backdash.Synchronizing.State.ChecksumDelegate.html",
    "title": "Delegate ChecksumDelegate | Backdash Netcode",
    "summary": "Delegate ChecksumDelegate Namespace Backdash.Synchronizing.State Assembly Backdash.dll Provider of checksum values public delegate uint ChecksumDelegate(ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Provider of checksum values Returns uint Provider of checksum values Constructors ChecksumDelegate(object, nint) public ChecksumDelegate(object @object, nint method) Parameters object object method nint Methods BeginInvoke(ReadOnlySpan<byte>, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(ReadOnlySpan<byte> data, AsyncCallback callback, object @object) Parameters data ReadOnlySpan<byte> callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual uint EndInvoke(IAsyncResult result) Parameters result IAsyncResult Returns uint Invoke(ReadOnlySpan<byte>) public virtual uint Invoke(ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns uint"
  },
  "api/Backdash.Synchronizing.State.DefaultStateStore.html": {
    "href": "api/Backdash.Synchronizing.State.DefaultStateStore.html",
    "title": "Class DefaultStateStore | Backdash Netcode",
    "summary": "Class DefaultStateStore Namespace Backdash.Synchronizing.State Assembly Backdash.dll Binary store for temporary save and restore game states using IBinarySerializer<T>. public sealed class DefaultStateStore : IStateStore Inheritance object DefaultStateStore Implements IStateStore Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DefaultStateStore(int) Binary store for temporary save and restore game states using IBinarySerializer<T>. public DefaultStateStore(int hintSize) Parameters hintSize int initial memory used for infer the state size Methods Advance() Advance the store pointer public void Advance() GetChecksum(in Frame) public uint GetChecksum(in Frame frame) Parameters frame Frame Returns uint Initialize(int) Initialize the state buffer with capacity of saveCount public void Initialize(int saveCount) Parameters saveCount int Last() Returns last SavedFrame. public SavedFrame Last() Returns SavedFrame Next() Returns next writable SavedFrame. public ref SavedFrame Next() Returns SavedFrame TryLoad(in Frame, out SavedFrame) public bool TryLoad(in Frame frame, out SavedFrame savedFrame) Parameters frame Frame savedFrame SavedFrame Returns bool"
  },
  "api/Backdash.Synchronizing.State.EmptyChecksumProvider.html": {
    "href": "api/Backdash.Synchronizing.State.EmptyChecksumProvider.html",
    "title": "Class EmptyChecksumProvider | Backdash Netcode",
    "summary": "Class EmptyChecksumProvider Namespace Backdash.Synchronizing.State Assembly Backdash.dll Provider always zero checksum public class EmptyChecksumProvider : IChecksumProvider Inheritance object EmptyChecksumProvider Implements IChecksumProvider Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors EmptyChecksumProvider() public EmptyChecksumProvider() Methods Compute(ReadOnlySpan<byte>) Returns the checksum value for data. public uint Compute(ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns uint int checksum value"
  },
  "api/Backdash.Synchronizing.State.Fletcher32ChecksumProvider.html": {
    "href": "api/Backdash.Synchronizing.State.Fletcher32ChecksumProvider.html",
    "title": "Class Fletcher32ChecksumProvider | Backdash Netcode",
    "summary": "Class Fletcher32ChecksumProvider Namespace Backdash.Synchronizing.State Assembly Backdash.dll Fletcher 32 checksum provider see: http://en.wikipedia.org/wiki/Fletcher%27s_checksum public sealed class Fletcher32ChecksumProvider : IChecksumProvider Inheritance object Fletcher32ChecksumProvider Implements IChecksumProvider Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Fletcher32ChecksumProvider() public Fletcher32ChecksumProvider() Methods Compute(ReadOnlySpan<byte>) Returns the checksum value for data. public uint Compute(ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns uint int checksum value"
  },
  "api/Backdash.Synchronizing.State.IChecksumProvider.html": {
    "href": "api/Backdash.Synchronizing.State.IChecksumProvider.html",
    "title": "Interface IChecksumProvider | Backdash Netcode",
    "summary": "Interface IChecksumProvider Namespace Backdash.Synchronizing.State Assembly Backdash.dll Provider of checksum values public interface IChecksumProvider Methods Compute(ReadOnlySpan<byte>) Returns the checksum value for data. uint Compute(ReadOnlySpan<byte> data) Parameters data ReadOnlySpan<byte> Returns uint int checksum value"
  },
  "api/Backdash.Synchronizing.State.IStateDesyncHandler.html": {
    "href": "api/Backdash.Synchronizing.State.IStateDesyncHandler.html",
    "title": "Interface IStateDesyncHandler | Backdash Netcode",
    "summary": "Interface IStateDesyncHandler Namespace Backdash.Synchronizing.State Assembly Backdash.dll Handles SyncTest state desync. public interface IStateDesyncHandler Methods Handle(INetcodeSession, in StateSnapshot, in StateSnapshot) Handles the states binary representations void Handle(INetcodeSession session, in StateSnapshot previous, in StateSnapshot current) Parameters session INetcodeSession previous StateSnapshot current StateSnapshot"
  },
  "api/Backdash.Synchronizing.State.IStateStore.html": {
    "href": "api/Backdash.Synchronizing.State.IStateStore.html",
    "title": "Interface IStateStore | Backdash Netcode",
    "summary": "Interface IStateStore Namespace Backdash.Synchronizing.State Assembly Backdash.dll Repository for temporary save and restore game states. public interface IStateStore Methods Advance() Advance the store pointer void Advance() GetChecksum(in Frame) Finds checksum for uint GetChecksum(in Frame frame) Parameters frame Frame Returns uint Initialize(int) Initialize the state buffer with capacity of saveCount void Initialize(int saveCount) Parameters saveCount int Last() Returns last SavedFrame. SavedFrame Last() Returns SavedFrame Next() Returns next writable SavedFrame. ref SavedFrame Next() Returns SavedFrame TryLoad(in Frame, out SavedFrame) Try loads a SavedFrame for frame. bool TryLoad(in Frame frame, out SavedFrame savedFrame) Parameters frame Frame savedFrame SavedFrame Returns bool true if the frame was found, false otherwise"
  },
  "api/Backdash.Synchronizing.State.IStateStringParser.html": {
    "href": "api/Backdash.Synchronizing.State.IStateStringParser.html",
    "title": "Interface IStateStringParser | Backdash Netcode",
    "summary": "Interface IStateStringParser Namespace Backdash.Synchronizing.State Assembly Backdash.dll Get string representation of the state Used for Sync Test logging ForSyncTest(Action<SyncTestOptions<TInput>>?) public interface IStateStringParser Methods GetStateString(in Frame, ref readonly BinaryBufferReader, object?) Parse binary state to a string representation. string GetStateString(in Frame frame, ref readonly BinaryBufferReader reader, object? currentState) Parameters frame Frame reader BinaryBufferReader currentState object Returns string"
  },
  "api/Backdash.Synchronizing.State.JsonStateStringParser.html": {
    "href": "api/Backdash.Synchronizing.State.JsonStateStringParser.html",
    "title": "Class JsonStateStringParser | Backdash Netcode",
    "summary": "Class JsonStateStringParser Namespace Backdash.Synchronizing.State Assembly Backdash.dll Try to get the json string representation of the state. public sealed class JsonStateStringParser : IStateStringParser Inheritance object JsonStateStringParser Implements IStateStringParser Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors JsonStateStringParser(JsonSerializerOptions?, IStateStringParser?) Try to get the json string representation of the state. public JsonStateStringParser(JsonSerializerOptions? options = null, IStateStringParser? stateStringFallback = null) Parameters options JsonSerializerOptions stateStringFallback IStateStringParser Methods GetStateString(in Frame, ref readonly BinaryBufferReader, object?) public string GetStateString(in Frame frame, ref readonly BinaryBufferReader reader, object? currentState) Parameters frame Frame reader BinaryBufferReader currentState object Returns string"
  },
  "api/Backdash.Synchronizing.State.SavedFrame.html": {
    "href": "api/Backdash.Synchronizing.State.SavedFrame.html",
    "title": "Class SavedFrame | Backdash Netcode",
    "summary": "Class SavedFrame Namespace Backdash.Synchronizing.State Assembly Backdash.dll Represents a save-state at specific frame. public sealed record SavedFrame : IEquatable<SavedFrame> Inheritance object SavedFrame Implements IEquatable<SavedFrame> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors SavedFrame(Frame, ArrayBufferWriter<byte>, uint) Represents a save-state at specific frame. public SavedFrame(Frame Frame, ArrayBufferWriter<byte> GameState, uint Checksum) Parameters Frame Frame Saved frame number GameState ArrayBufferWriter<byte> Game state on Frame Checksum uint Checksum of state Fields Checksum Saved checksum public uint Checksum Field Value uint Frame Saved frame number public Frame Frame Field Value Frame GameState Saved game state public ArrayBufferWriter<byte> GameState Field Value ArrayBufferWriter<byte> Properties Size Saved state size public ByteSize Size { get; } Property Value ByteSize Methods Deconstruct(out Frame, out ArrayBufferWriter<byte>, out uint) public void Deconstruct(out Frame Frame, out ArrayBufferWriter<byte> GameState, out uint Checksum) Parameters Frame Frame GameState ArrayBufferWriter<byte> Checksum uint Equals(SavedFrame?) public bool Equals(SavedFrame? other) Parameters other SavedFrame Returns bool Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(SavedFrame?, SavedFrame?) public static bool operator ==(SavedFrame? left, SavedFrame? right) Parameters left SavedFrame right SavedFrame Returns bool operator !=(SavedFrame?, SavedFrame?) public static bool operator !=(SavedFrame? left, SavedFrame? right) Parameters left SavedFrame right SavedFrame Returns bool"
  },
  "api/Backdash.Synchronizing.State.StateSnapshot.html": {
    "href": "api/Backdash.Synchronizing.State.StateSnapshot.html",
    "title": "Struct StateSnapshot | Backdash Netcode",
    "summary": "Struct StateSnapshot Namespace Backdash.Synchronizing.State Assembly Backdash.dll State desync snapshot public readonly ref struct StateSnapshot Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors StateSnapshot(string, ref readonly BinaryBufferReader, uint, object?) State desync snapshot public StateSnapshot(string value, ref readonly BinaryBufferReader reader, uint checksum, object? state) Parameters value string reader BinaryBufferReader checksum uint state object Fields Checksum State checksum value public readonly uint Checksum Field Value uint Reader State binary reader public readonly BinaryBufferReader Reader Field Value BinaryBufferReader State State object value public readonly object? State Field Value object See Also CreateState(in Frame, ref readonly BinaryBufferReader) Value State text representation public readonly string Value Field Value string Methods ToString() public override string ToString() Returns string"
  },
  "api/Backdash.Synchronizing.State.html": {
    "href": "api/Backdash.Synchronizing.State.html",
    "title": "Namespace Backdash.Synchronizing.State | Backdash Netcode",
    "summary": "Namespace Backdash.Synchronizing.State Classes DefaultStateStore Binary store for temporary save and restore game states using IBinarySerializer<T>. EmptyChecksumProvider Provider always zero checksum Fletcher32ChecksumProvider Fletcher 32 checksum provider see: http://en.wikipedia.org/wiki/Fletcher%27s_checksum JsonStateStringParser Try to get the json string representation of the state. SavedFrame Represents a save-state at specific frame. Structs StateSnapshot State desync snapshot Interfaces IChecksumProvider Provider of checksum values IStateDesyncHandler Handles SyncTest state desync. IStateStore Repository for temporary save and restore game states. IStateStringParser Get string representation of the state Used for Sync Test logging ForSyncTest(Action<SyncTestOptions<TInput>>?) Delegates ChecksumDelegate Provider of checksum values"
  },
  "api/Backdash.Synchronizing.html": {
    "href": "api/Backdash.Synchronizing.html",
    "title": "Namespace Backdash.Synchronizing | Backdash Netcode",
    "summary": "Namespace Backdash.Synchronizing Classes SessionReplayControl Control flow of a Replay session. ForReplay(Action<SessionReplayOptions<TInput>>?)"
  },
  "api/Backdash.SynchronizingEventInfo.html": {
    "href": "api/Backdash.SynchronizingEventInfo.html",
    "title": "Struct SynchronizingEventInfo | Backdash Netcode",
    "summary": "Struct SynchronizingEventInfo Namespace Backdash Assembly Backdash.dll Data for Synchronizing event. public readonly struct SynchronizingEventInfo : IEquatable<SynchronizingEventInfo> Implements IEquatable<SynchronizingEventInfo> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Constructors SynchronizingEventInfo(int, int) Data for Synchronizing event. public SynchronizingEventInfo(int CurrentStep, int TotalSteps) Parameters CurrentStep int Current synchronizing step. TotalSteps int Total synchronization steps Properties CurrentStep Current synchronizing step. public int CurrentStep { get; init; } Property Value int TotalSteps Total synchronization steps public int TotalSteps { get; init; } Property Value int Methods Deconstruct(out int, out int) public void Deconstruct(out int CurrentStep, out int TotalSteps) Parameters CurrentStep int TotalSteps int Equals(SynchronizingEventInfo) public bool Equals(SynchronizingEventInfo other) Parameters other SynchronizingEventInfo Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator ==(SynchronizingEventInfo, SynchronizingEventInfo) public static bool operator ==(SynchronizingEventInfo left, SynchronizingEventInfo right) Parameters left SynchronizingEventInfo right SynchronizingEventInfo Returns bool operator !=(SynchronizingEventInfo, SynchronizingEventInfo) public static bool operator !=(SynchronizingEventInfo left, SynchronizingEventInfo right) Parameters left SynchronizingEventInfo right SynchronizingEventInfo Returns bool"
  },
  "api/Backdash.html": {
    "href": "api/Backdash.html",
    "title": "Namespace Backdash | Backdash Netcode",
    "summary": "Namespace Backdash Classes FrameTime Frame time helpers FrameTime.Fixed Frame time calculator MathI Int Math NetcodePlayer Holds data of a player to be added to INetcodeSession<TInput>. NetcodeSessionBuilder Builder for INetcodeSession<TInput>. NetcodeSessionBuilder.InputTypeSelected<T> Selected input type for NetcodeSessionBuilder.InputTypeSelector Selector for INetcodeSession<TInput> input type NetcodeSessionBuilder<TInput> Builder for INetcodeSession<TInput>. PeerNetworkStats Holds current session network stats. Calculated in intervals of NetworkPackageStatsInterval. PeerNetworkStats.PackagesInfo Hold package traffic data RollbackNetcode The session builder entrypoint. used to create new netcode sessions. Structs ConnectionInterruptedEventInfo Data for ConnectionInterrupted event. Frame Value representation of a Frame FrameSpan Value representation of a span of frames Uses the FPS defined in FrameTime.CurrentFrameRate PeerEventInfo Data structure for PeerEventInfo notifications. OnPeerEvent(NetcodePlayer, PeerEventInfo) SynchronizedEventInfo Data for Synchronized event. SynchronizedInput<T> Synchronized input result SynchronizingEventInfo Data for Synchronizing event. Interfaces INetcodeSession Contract for managing a netcode session. INetcodeSessionHandler Defines the callback functions that your application must implement. Backdash will periodically call these functions during the session lifecycle. INetcodeSessionInfo Contract for managing a netcode session. INetcodeSession<TInput> Contract for managing a netcode session. Enums PeerEvent Peer event type PlayerType Defines player type. ResultCode Results for INetcodeSession<TInput> operations. SessionMode Defines the mode of INetcodeSession<TInput>>"
  },
  "docs/developer_guide.html": {
    "href": "docs/developer_guide.html",
    "title": "| Backdash Netcode",
    "summary": "Developer Guide Note adapted from GGPO Installing NuGet package available: $ dotnet add package Backdash Game State and Inputs Your game probably has many moving parts. Backdash only depends on these two: Game State describes the current state of everything in your game. In a shooter, this would include the position of the ship and all the enemies on the screen, the location of all the bullets, how much health each opponent has, the current score, etc. Game Inputs are the set of things that modify the game state. These obviously include the joystick and button presses done by the player but can include other non-obvious inputs as well. For example, if your game uses the current time of day to calculate something in the game, the current time of day at the beginning of a frame is also an input. There are many other things in your game engine that are neither game state nor inputs. For example, your audio and video renderers are not game state since they don't have an effect on the outcome of the game. If you have a special effects engine that's generating effects that do not have an impact on the game, they can be excluded from the game state as well. Using State and Inputs for Synchronization Each player in a Backdash networked game has a complete copy of your game running. Backdash needs to keep both copies of the game state in sync to ensure that both players are experiencing the same game. It would be much too expensive to send an entire copy of the game state between players every frame. Instead, Backdash sends the players' inputs to each other and has each player step the game forward. In order for this to work, your game engine must meet three criteria: The game simulation must be fully deterministic. That is, for any given game state and inputs, advancing the game state by exactly 1 frame must result in identical game states for all players. The game state must be fully encapsulated and serializable. Your game engine must be able to load, save, and execute a single simulation frame without rendering the result of that frame. This will be used to implement rollbacks. Programming Guide The following section contains a walk-through for porting your application to Backdash. For a detailed description of the Backdash API, please see the API Reference Docs. Interfacing with Backdash Backdash is designed to be easy to interface with new and existing game engines. It handles most of the implementation of handling rollbacks by calling out to your application via the INetcodeSessionHandler hooks. Creating the INetcodeSession Object The INetcodeSession<TInput> object is your interface to the Backdash framework. Create one with the RollbackNetcode.WithInputType builder: For example, giving the user pre-defined types for the Game State and Game Input public class MyGameState { public MyGameState() { /* initialize state */ } /* members */ } [Flags] public enum MyGameInput { /* members */ } To create a new session bounded to port 9001: using Backdash; var session = RollbackNetcode .WithInputType<MyGameInput>() .Configure(options => { options.LocalPort = 9001; }) .Build(); Tip If you want to use an integer type as your input type: RollbackNetcode.WithInputType(t => t.Integer<uint>()) The session builder can be used to configure the session by setting NetcodeOptions: passing an instance to .WithOptions(..) using a delegate function on .Configure(options => {}) using the fluent api using Backdash; using Backdash.Core; var session = RollbackNetcode .WithInputType<MyGameInput>() .WithPort(9001) .WithInputDelayFrames(2) .WithLogLevel(LogLevel.Warning) .Build(); You should also define an implementation of the INetcodeSessionHandler filled in with your game's callback functions for managing game state. public class MySessionHandler : INetcodeSessionHandler { public void OnSessionStart() { /* ... */ } public void OnSessionClose() { /* ... */ } public void SaveState(in Frame frame, ref readonly BinaryBufferWriter writer) { /* ... */ } public void LoadState(in Frame frame, ref readonly BinaryBufferReader reader) { /* ... */ } public void AdvanceFrame() { /* ... */ } public void TimeSync(FrameSpan framesAhead) { /* ... */ } public void OnPeerEvent(PlayerHandle player, PeerEventInfo evt) { /* ... */ } } And then, set it into the session: session.SetHandler(new MySessionHandler()); The INetcodeSession object should only be used for a single game session. If you need to connect to another opponent, dispose your existing object using the .Dispose method and start a new one: /* Close the current session to start a new one */ session.Dispose(); Sending Player Locations When you created the INetcodeSession you don't specify any information about the players participating in the game. To do so, call the .AddPlayer() method function with an instance of Player for each player. The following example shows how you might use .AddPlayer() in a 2-player game: LocalPlayer player1 = new(1); // local player number 1 var player2Endpoint = IPEndPoint.Parse(\"192.168.0.100:8001\"); // player 2 ip and port RemotePlayer player2 = new(2, player2Endpoint); // remote player number 2 ResultCode result; result = session.AddPlayer(player1); // ... result = session.AddPlayer(player2); // ... Check the samples for more complete code. Starting session After setting up players you must call the session .Start() method. This will start all the background work like socket receiver, input queue, peer synchronization, etc. session.Start(); Synchronizing Local and Remote Inputs Input synchronization happens on the session at the top of each game frame. This is done by calling AddLocalInput for each local player and SynchronizeInputs to fetch the inputs for remote players. Be sure to check the return value of SynchronizeInputs. If it returns a value other than ResultCode.Ok`, you should not advance your game state. This usually happens because Backdash has not received packets from the remote player in a while and has reached its internal prediction limit. After synchronizing you can read the player's inputs using the GetInput method for a single-player or GetInputs to load all player's inputs into a buffer. For example, if your code looks like this currently for a local game: MyGameInput player1Input = GetControllerInput(0); MyGameInput player2Input = GetControllerInput(1); /* send p1 and p2 to the game */ AdvanceGameState(player1Input, player2Input, gameState); You should change it to read as follows: // you must keep the local player handler reference or query it from the session. var player1Handle = player1.Handle; var localInput = GetControllerInput(0); // read the controller // notify Backdash of the local player's inputs var result = session.AddLocalInput(player1Handle, localInput); if (result is ResultCode.Ok) { result = session.SynchronizeInputs(); if (result is ResultCode.Ok) { var gameInputs = session.CurrentSynchronizedInputs; AdvanceGameState(gameInputs[0], gameInputs[1], gameState); } } You should call SynchronizeInputs every frame, even those that happen during a rollback. Make sure you always use the values returned from GetInputs rather than the values you've read from the local controllers to advance your game state. During a rollback SynchronizeInputs will replace the values passed into AddLocalInput with the values used for previous frames. Also, if you've manually added input delay for the local player to smooth out the effect of rollbacks, the inputs you pass into AddLocalInput won't actually be returned in GetInputs until after the frame delay. Implementing your save and load state handlers Backdash will call the LoadState and SaveState callbacks to periodically save and restore the state of your game. The SaveState function is called with a plain binary buffer writer (BinaryBufferReader). You need to call .Write on each of the state members. The LoadState function should restore the game state from a previously saved binary buffer using the BinaryBufferReader, reading each member. Important ⚠️: You must read and write member in the SAME ORDER and also ensure the same size (like arrays or lists). For example: using System.Numerics; using Backdash.Serialization; using Backdash.Serialization.Numerics; public class MyGameState { public int Value1; public Vector2 Value2; } public class MySessionHandler : INetcodeSessionHandler { MyGameState currentGameState = new(); public void SaveState(in Frame frame, ref readonly BinaryBufferWriter writer) { writer.Write(in currentGameState.Value1); writer.Write(in currentGameState.Value2); } public void LoadState(in Frame frame, ref readonly BinaryBufferReader reader) { reader.Read(ref currentGameState.Value1); reader.Read(ref currentGameState.Value2); /* or also: currentGameState.Value1 = reader.ReadInt32(); currentGameState.Value2 = reader.ReadVector2(); */ } /* ... */ } The saved Game State will have a calculated checksum based on its binary representation. The default implementation is Fletcher 32 algorithm by the class Fletcher32ChecksumProvider. You can also use you own checksum algorithm, for this just implement the interface IChecksumProvider. Custom State Serializer If you don't want to write/read each member or just need to use other serialization method for the state, you is able to access the IBufferWriter for save and the raw ReadOnlySpan<byte> for load: Example for MemoryPack; using System.Numerics; using Backdash.Data; using Backdash.Serialization; using MemoryPack; [MemoryPackable] public partial class MyGameState { public int Value1; public Vector2 Value2; } public class MySessionHandler : INetcodeSessionHandler { MyGameState currentGameState = new(); public void SaveState(in Frame frame, ref readonly BinaryBufferWriter writer) { MemoryPackSerializer.Serialize(writer.Buffer, currentGameState); } public void LoadState(in Frame frame, ref readonly BinaryBufferReader reader) { MemoryPackSerializer.Deserialize(reader.Buffer, ref currentGameState!); } /* ... */ } Advance Frame Callback This callback is called when a rollback occurs, just after the SaveState here you must synchronize inputs and advance the state. Usually something like: // ... public void AdvanceFrame() { session.SynchronizeInputs(); var gameInputs = session.CurrentSynchronizedInputs; AdvanceGameState(gameInputs[0], gameInputs[1], gameState); } // ... Remaining Callbacks There are other callbacks in the INetcodeSessionHandler for connection starting/closing the session, peer events, etc. Check the API Docs for more information. Frame Lifecycle We're almost done. The last step is notify Backdash every time your frame starts and every time the game state finishes advancing by one frame. Just call BeginFrame method on session at the beginning of each frame and AdvanceFrame after you've finished one frame but before you've started the next. So, the code for each frame should be something close to: public void Update(){ session.BeginFrame(); var localInput = GetControllerInput(localPlayer.Index); var result = session.AddLocalInput(localPlayer, localInput); if (result is not ResultCode.Ok) return; result = session.SynchronizeInputs(); if (result is not ResultCode.Ok) return; var gameInputs = session.CurrentSynchronizedInputs; AdvanceGameState(gameInputs[0], gameInputs[1], gameState); session.AdvanceFrame(); } Input Type Encoding We heavily recommend that you encode your game input inside a Enum with FlagsAttribute. Enum flags are easy to compose and can represent a large number of inputs in a very low byte count, which is important because the inputs are what is transmitted over the network to other players. For example, we can encode all usable digital buttons of a XBox DPad using only a short type (only 2 bytes): [Flags] public enum PadButtonInputs : short { None = 0, Select = 1 << 0, Up = 1 << 1, Down = 1 << 2, Left = 1 << 3, Right = 1 << 4, X = 1 << 5, Y = 1 << 6, A = 1 << 7, B = 1 << 8, LeftBumper = 1 << 9, RightBumper = 1 << 10, LeftTrigger = 1 << 11, RightTrigger = 1 << 12, LeftStickButton = 1 << 13, RightStickButton = 1 << 14, } The serialization of enums and mostly of primitive types is automatically handled by Backdash. Caution We can also handle serialization of complex structs that do not contain any reference type member. for those no Endianess Convertion is applied. Custom Serializer If you need a more complex input type and support Endianess convertion you must implement an IBinarySerializer<TInput> for your input type. Tip \uD83D\uDCA1 The easiest way to implement a binary serializer is by deriving from BinarySerializer<T> Example: Giving an input type composed as: [Flags] public enum PadButtons : short { None = 0, Select = 1 << 0, Up = 1 << 1, Down = 1 << 2, Left = 1 << 3, Right = 1 << 4, X = 1 << 5, Y = 1 << 6, A = 1 << 7, B = 1 << 8, LeftBumper = 1 << 9, RightBumper = 1 << 10, LeftStickButton = 1 << 11, RightStickButton = 1 << 12, } public record struct Axis { public sbyte X; public sbyte Y; } [StructLayout(LayoutKind.Sequential, Pack = 1)] public record struct MyPadInputs { public PadButtons Buttons; public byte LeftTrigger; public byte RightTrigger; public Axis LeftAxis; public Axis RightAxis; } You can implement the serializer as: public class MyPadInputsBinarySerializer : BinarySerializer<PadInputs> { protected override void Serialize(in BinaryRawBufferWriter binaryWriter, in PadInputs data) { binaryWriter.Write((short)data.Buttons); binaryWriter.Write(data.LeftTrigger); binaryWriter.Write(data.RightTrigger); binaryWriter.Write(data.LeftAxis.X); binaryWriter.Write(data.LeftAxis.Y); binaryWriter.Write(data.RightAxis.X); binaryWriter.Write(data.RightAxis.Y); } protected override void Deserialize(in BinaryBufferReader binaryReader, ref PadInputs result) { result.Buttons = (PadButtons)binaryReader.ReadShort(); result.LeftTrigger = binaryReader.ReadByte(); result.RightTrigger = binaryReader.ReadByte(); result.LeftAxis.X = binaryReader.ReadSByte(); result.LeftAxis.Y = binaryReader.ReadSByte(); result.RightAxis.X = binaryReader.ReadSByte(); result.RightAxis.Y = binaryReader.ReadSByte(); } } To use your custom serializer: MyPadInputsBinarySerializer mySerializer = new(); var session = RollbackNetcode.WithInputType(t => t.Custom(mySerializer)); Tuning Your Application: Frame Delay vs. Speculative Execution Backdash uses both frame delay and speculative execution to hide latency. It does so by allowing the application developer the choice of how many frames they'd like to delay input by. If it takes more time to transmit a packet than the number of frames specified by the game, Backdash will use speculative execution to hide the remaining latency. This number can be tuned by the application mid-game if you so desire. Choosing a proper value for the frame delay depends very much on your game. Here are some helpful hints. In general, you should try to make your frame delay as high as possible without affecting the qualitative experience of the game. For example, a fighting game requires pixel-perfect accuracy, excellent timing, and extremely tightly controlled joystick motions. For this type of game, any frame delay larger than 1 can be noticed by most intermediate players, and expert players may even notice a single frame of delay. On the other hand, board games or puzzle games which do not have very strict timing requirements may get away with setting the frame latency as high as 4 or 5 before users begin to notice. Another reason to set the frame delay high is to eliminate the glitching that can occur during a rollback. The longer the rollback, the more likely the user is to notice the discontinuities caused by temporarily executing the incorrect prediction frames. For example, suppose your game has a feature where the entire screen will flash for exactly 2 frames immediately after the user presses a button. Suppose further that you've chosen a value of 1 for the frame latency and the time to transmit a packet is 4 frames. In this case, a rollback is likely to be around 3 frames (4 – 1 = 3). If the flash occurs on the first frame of the rollback, your 2-second flash will be entirely consumed by the rollback, and the remote player will never get to see it! In this case, you're better off either specifying a higher frame latency value or redesigning your video renderer to delay the flash until after the rollback occurs. Sample Applications Check the samples on the samples directory: There are examples for up to 4 players: Simple console game Monogame SpaceWar Monogame SpaceWar with lobby over internet Godot SpaceWar with lobby over internet See the .cmd/.sh files in the scripts directory for examples on how to start 2, 3, and 4-player games."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | Backdash Netcode",
    "summary": "Introduction Backdash is a multiplayer network SDK to help you implement Rollback Netcode on your game. It started as .NET port of the first rollback netcode SDK GGPO (written in C++) to be used in any game engine that uses C#, F# or any .NET dialect as scripting language (Godot, Monogame, Stride3D, etc). Dispensing with the need to create native builds and native binds to the C++ GGPO code. And also adding more options for configuration and extensibility. Warning ⚠️ This library is not able to run on Unity until they finish the CoreCLR port, check: \uD83D\uDD17 CoreCLR and .NET Modernization - Unite 2024 \uD83D\uDD17 Unity Future .NET Development Status. How Does It Work? Rollback networking is designed to be integrated into a fully deterministic peer-to-peer engine. With full determinism, the game is guaranteed to play out the same way on all player's computers if we simply feed them the same inputs. One way to achieve this is to exchange inputs for all players over the network, only executing a frame of gameplay logic when all players have received all the inputs from their peers. This often results in sluggish, unresponsive gameplay. The longer it takes to get inputs over the network, the slower the game becomes. In rollback networking, the game logic is allowed to proceed with just the inputs from the local player. If the remote inputs have not yet arrived when it's time to execute a frame, the networking code will predict what it expects the remote players to do based on previously seen inputs. Since there's no waiting, the game feels just as responsive as it does offline. When those inputs finally arrive over the network, they can be compared to the ones that were predicted earlier. If they differ, the game can be re-simulated from the point of divergence to the current visible frame. Don't worry if that sounds like a headache. Backdash was designed specifically to implement the rollback algorithms and low-level networking logic in a way that's easy to integrate into your existing game loop. If you simply implement the functionality to save your game state, load it back up, and execute a frame of game state without rendering its outcome, Backdash can take care of the rest. Learning resources More information about how it works and why it is good: Analysis: Why Rollback Netcode Is Better (video). Infil's Netcode Article. Talking Rollback Netcode With Adam \"Keits\" Heart (video). GDC Rollback Networking in Mortal Kombat and Injustice 2 (video). EVO 2017: GGPO panel (video). Fight the Lag! The Trick Behind GGPO's Low Latency Netcode Cross Counter LIVE feat. Mike Z (video)."
  },
  "docs/troubleshooting.html": {
    "href": "docs/troubleshooting.html",
    "title": "Best Practices and Troubleshooting | Backdash Netcode",
    "summary": "Best Practices and Troubleshooting Below is a list of recommended best practices you should consider while porting your application to Backdash. Many of these recommendations are easy to follow even if you're not starting a game from scratch. Most applications will already conform to most of the recommendations below. Isolate Game State from Non-Game State Backdash will periodically request that you save and load the entire state of your game. For most games, the state that needs to be saved is a tiny fraction of the entire game. Usually, the video and audio renderers, look-up tables, textures, sound data, and your code segments are either constant from frame to frame or not involved in the calculation of the game state. These do not need to be saved or restored. You should isolate non-game state from the game state as much as possible. For example, you may consider encapsulating all your game state into a single class/record type. This both clearly delineates what is game state and was is not and makes it trivial to implement the save and load callbacks. Define a Fixed Time Quanta for Advancing Your Game State Backdash will occasionally need to rollback and single-step your application frame by frame. This is difficult to do if your game state advances by a variable tick rate. You should try to make your game state advanced by a fixed time quanta per frame, even if your render loop does not. Separate Updating Game State from Rendering in Your Game Loop Backdash will call your advance frame callback many times during a rollback. Any effects or sounds which are generated during the rollback need to be deferred until after the rollback is finished. This is most easily accomplished by separating your game state from your render state. When you're finished, your game loop may look something like this: bool finished = false; GameState state; Inputs inputs; do { GetControllerInputs(ref inputs); finished = AdvanceGameState(inputs, state); if (!finished) { RenderCurrentFrame(gamestate); } while (!finished); In other words, your game state should be determined solely by the inputs, your rendering code should be driven by the current game state and you should have a way to easily advance the game state forward using a set of inputs without rendering. Make Sure Your Game State Advances Deterministically Once you have your game state identified, make sure the next game state is computed solely from your game inputs. This should happen naturally if you have correctly identified all the game state and inputs, but it can be tricky sometimes. Here are some things that are easy to overlook: Beware of Random Number Generators Many games use random numbers in the computing of the next game state. If you use one, you must ensure that they are fully deterministic, that the seed for the random number generator is the same at frame 0 for both players, and that the state of the random number generator is included in your game state. Doing both of these will ensure that the random numbers which get generated for a particular frame are always the same, regardless of how many times Backdash needs to rollback to that frame. Beware of External Time Sources (eg. random, clock time) Be careful if you use the current time of day in your game state calculation. This may be used for an effect on the game or to derive another game state (e.g. using the timer as a seed to the random number generator). The time on two computers or game consoles is almost never in sync and using time in your game state calculations can lead to synchronization issues. You should either eliminate the use of time in your game state or include the current time for one of the players as part of the input to a frame and always use that time in your calculations. The use of external time sources in non-game state calculations is fine (e.g. computing the duration of effects on screen, or the attenuation of audio samples). [!INFORMATION] We provide an implementation of a Deterministic Random out of the box which can be accessed directly from the Rollback Session Beware of Dangling References If your game state contains any reference type be very careful in your save and load functions to rebase your reference pointers as you save and load your data. When copying data, be sure that you are no copying an object reference instead of the values. Beware of Static Variables or Other Hidden State The language your game is written in may have features that make it difficult to track down all your state. Static automatic variables in C or static members in C# are examples of this behavior. You need to track down all these locations and convert them to a form that can be saved. For example, compare: // This will totally get you into trouble. public record MyGameState { private static int Counter; public int NextCounter => Counter++; } To: // If you must, this is better public static class GlobalState { public static int Counter; // move counter to a global static class public static int GetNextCounter() => Counter++; } public record MyGameState { public int CurrentCounter; // keeps track of the counter value } public class MySessionHandler : INetcodeSessionHandler { MyGameState currentGameState = new(); public void LoadState(in Frame frame, ref readonly BinaryBufferReader reader) { currentGameState.CurrentCounter = reader.ReadInt32(); GlobalState.Counter = currentGameState.CurrentCounter; } /* ... */ } Use the Backdash SyncTest Feature. A Lot. Once you've ported your application to Backdash, you can use tool called SyncTest to help track down synchronization issues which may be the result of a leaky game state. To create a sync test session use: using Backdash; var session = RollbackNetcode .WithInputType<MyGameInput>() .Configure(options => { // ... }) .ForSyncTest(options => options { // ... }) .Build(); The sync test session is a special session which is designed to find errors in your simulation's determinism. When running in a sync-test session, Backdash by default will execute a 1 frame rollback for every frame of your game. It compares the state of the frame when it was executed the first time to the state executed during the rollback, and raises an error if they differ during your game's execution. If you set the LogLevel to at least Information the json of the states will be also logged, you can diff the log of the initial frame vs the log of the rollback frame to track down errors. By running sync-test on developer systems continuously when writing game code, you can identify de-sync causing bugs immediately after they're introduced. Configuring You can configure a wide range of options to help debug you state, like: .ForSyncTest(options => options .UseJsonStateParser() // tries to display you state as json on desync .UseDesyncHandler<YourDesyncHandler>() // custom handler to deal wih a desync .UseRandomInputProvider() // generate random inputs .CheckDistance(4) // the forced rollback check distance in frames ) If you need better meaningful string representation of your state in the sync-test, it is recommended to implement the optional method INetcodeSessionHandler.CreateState. This will be used to materialize previous saved states before passing them to the DesyncHandler. Note The .UseJsonStateParser() will only work if INetcodeSessionHandler.CreateState returns a JSON serializable object. Implement a DesyncHandler a DesyncHandler will help you to handle whenever a desync happens in a SyncTest session. As example, a DesyncHandler that uses DiffPlex to print on the console the state diff when a desync occurs: using Backdash; using Backdash.Synchronizing.State; using DiffPlex.DiffBuilder; using DiffPlex.DiffBuilder.Model; sealed class DiffPlexDesyncHandler : IStateDesyncHandler { public void Handle(INetcodeSession session, in StateSnapshot previous, in StateSnapshot current) { var diff = InlineDiffBuilder.Diff(previous.Value, current.Value); var savedColor = Console.ForegroundColor; foreach (var line in diff.Lines) { switch (line.Type) { case ChangeType.Inserted: Console.ForegroundColor = ConsoleColor.Green; Console.Write(\"+ \"); break; case ChangeType.Deleted: Console.ForegroundColor = ConsoleColor.Red; Console.Write(\"- \"); break; default: Console.ForegroundColor = ConsoleColor.Gray; Console.Write(\" \"); break; } Console.WriteLine(line.Text); } Console.ForegroundColor = savedColor; } } Tip You can see this implementation working with JSON in the SpaceWar sample. Where to Go from Here This document describes the most basic features of Backdash. To learn more, I recommend starting with reading the API Docs and exploring the examples. Good luck!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Backdash \uD83D\uDD79️ | Backdash Netcode",
    "summary": "Backdash \uD83D\uDD79️ Highly configurable and extensible implementation of Rollback Netcode with full asynchronous IO. Heavily inspired by GGPO. Overview Traditional techniques account for network transmission time by adding delay to a players input, resulting in a sluggish, laggy game-feel. Rollback networking uses input prediction and speculative execution to send player inputs to the game immediately, providing the illusion of a zero-latency network. Using rollback, the same timings, reactions, visual and audio queues, and muscle memory your players build up playing offline will translate directly online. Backdash is designed to make incorporating rollback networking (aka. Rollback Netcode) into new and existing games as easy as possible. Getting started NuGet package available: $ dotnet add package Backdash Tip \uD83D\uDCA1 Please check the DOCUMENTATION for usage details. Demos: Title Link Terminal Monogame Local Monogame Lobby Godot Lobby Save/Load Replay Samples Check the samples on the /samples directory: There are examples for up to 4 players: Simple console game Monogame SpaceWar [^2] Monogame SpaceWar with lobby over internet [^1][^2] Godot SpaceWar with lobby over internet [^1]: The sample needs a web server to exchange players addresses. check the sample README.md for more information. [^2]: If you are using ARM MacOS you may need the x64 version of .NET SDK to build some samples. Building from source You need to have installed .NET 8 SDK Clone this repository. Restore tools On root directory run: dotnet tool restore Building Library (root directory) SDK only: dotnet nuke build --configuration Release Alternatively open the solution file Backdash.sln on your IDE. SDK and samples dotnet nuke build-samples --configuration Release. Alternatively open the solution file Samples/Backdash.Samples.sln on your IDE. Licensing Backdash is available under The MIT License. This means Backdash is free for commercial and non-commercial use. Attribution is not required, but appreciated."
  }
}